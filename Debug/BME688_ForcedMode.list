
BME688_ForcedMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  08008490  08008490  00018490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b24  08008b24  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b2c  08008b2c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d8  08008d0c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08008d0c  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ea4  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b42  00000000  00000000  0002a0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071a  00000000  00000000  0002c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002294d  00000000  00000000  0002cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d085  00000000  00000000  0004f5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc137  00000000  00000000  0005c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003638  00000000  00000000  001287a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012bddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008478 	.word	0x08008478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008478 	.word	0x08008478

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f8fb 	bl	80010e8 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	20d0      	movs	r0, #208	; 0xd0
 8000efa:	f000 f8b1 	bl	8001060 <bme68x_get_regs>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d114      	bne.n	8000f34 <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b61      	cmp	r3, #97	; 0x61
 8000f10:	d10e      	bne.n	8000f30 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f002 f858 	bl	8002fc8 <read_variant_id>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d107      	bne.n	8000f34 <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f001 ff4b 	bl	8002dc0 <get_calib_data>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e001      	b.n	8000f34 <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000f30:	23fd      	movs	r3, #253	; 0xfd
 8000f32:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f001 fd07 	bl	8002974 <null_ptr_check>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d16c      	bne.n	800104e <bme68x_set_regs+0x10e>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d069      	beq.n	800104e <bme68x_set_regs+0x10e>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d066      	beq.n	800104e <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d05d      	beq.n	8001042 <bme68x_set_regs+0x102>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0a      	cmp	r3, #10
 8000f8a:	d85a      	bhi.n	8001042 <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f90:	e034      	b.n	8000ffc <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	7b1b      	ldrb	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d118      	bne.n	8000fcc <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	6839      	ldr	r1, [r7, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fc24 	bl	80027f2 <set_mem_page>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	3328      	adds	r3, #40	; 0x28
 8000fc4:	443b      	add	r3, r7
 8000fc6:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000fca:	e009      	b.n	8000fe0 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	441a      	add	r2, r3
 8000fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	7812      	ldrb	r2, [r2, #0]
 8000fd8:	3328      	adds	r3, #40	; 0x28
 8000fda:	443b      	add	r3, r7
 8000fdc:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	3301      	adds	r3, #1
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	3328      	adds	r3, #40	; 0x28
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8c6      	bhi.n	8000f92 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8001004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11e      	bne.n	800104a <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001010:	7c38      	ldrb	r0, [r7, #16]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	1e5a      	subs	r2, r3, #1
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685d      	ldr	r5, [r3, #4]
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	462b      	mov	r3, r5
 8001024:	47a0      	blx	r4
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 800103a:	23fe      	movs	r3, #254	; 0xfe
 800103c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 8001040:	e003      	b.n	800104a <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8001042:	23fc      	movs	r3, #252	; 0xfc
 8001044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001048:	e004      	b.n	8001054 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 800104a:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800104c:	e002      	b.n	8001054 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800104e:	23ff      	movs	r3, #255	; 0xff
 8001050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001054:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001058:	4618      	mov	r0, r3
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}

08001060 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f001 fc7f 	bl	8002974 <null_ptr_check>
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 800107a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d12a      	bne.n	80010d8 <bme68x_get_regs+0x78>
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d027      	beq.n	80010d8 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	7b1b      	ldrb	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10e      	bne.n	80010ae <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fbac 	bl	80027f2 <set_mem_page>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 800109e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	7bf8      	ldrb	r0, [r7, #15]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	47a0      	blx	r4
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 80010d2:	23fe      	movs	r3, #254	; 0xfe
 80010d4:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 80010d6:	e001      	b.n	80010dc <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80010d8:	23ff      	movs	r3, #255	; 0xff
 80010da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}

080010e8 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80010f0:	23e0      	movs	r3, #224	; 0xe0
 80010f2:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80010f4:	23b6      	movs	r3, #182	; 0xb6
 80010f6:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f001 fc3b 	bl	8002974 <null_ptr_check>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d12b      	bne.n	8001162 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7b1b      	ldrb	r3, [r3, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d104      	bne.n	800111c <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f001 fbd2 	bl	80028bc <get_mem_page>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d11e      	bne.n	8001162 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001124:	f107 010d 	add.w	r1, r7, #13
 8001128:	f107 000e 	add.w	r0, r7, #14
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f7ff ff06 	bl	8000f40 <bme68x_set_regs>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d110      	bne.n	8001162 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6852      	ldr	r2, [r2, #4]
 8001148:	4611      	mov	r1, r2
 800114a:	f242 7010 	movw	r0, #10000	; 0x2710
 800114e:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 fbaf 	bl	80028bc <get_mem_page>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 800117a:	2300      	movs	r3, #0
 800117c:	77bb      	strb	r3, [r7, #30]
 800117e:	2301      	movs	r3, #1
 8001180:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001182:	4a7c      	ldr	r2, [pc, #496]	; (8001374 <bme68x_set_conf+0x204>)
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118c:	6018      	str	r0, [r3, #0]
 800118e:	3304      	adds	r3, #4
 8001190:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	2300      	movs	r3, #0
 8001198:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f94a 	bl	800143a <bme68x_get_op_mode>
 80011a6:	4603      	mov	r3, r0
 80011a8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 80011aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f8df 	bl	8001378 <bme68x_set_op_mode>
 80011ba:	4603      	mov	r3, r0
 80011bc:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	77fb      	strb	r3, [r7, #31]
 80011c8:	e0b2      	b.n	8001330 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 80011ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80ae 	bne.w	8001330 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 80011d4:	7d38      	ldrb	r0, [r7, #20]
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2205      	movs	r2, #5
 80011de:	f7ff ff3f 	bl	8001060 <bme68x_get_regs>
 80011e2:	4603      	mov	r3, r0
 80011e4:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 80011ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d108      	bne.n	8001208 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3303      	adds	r3, #3
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	2107      	movs	r1, #7
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fb8b 	bl	800291a <boundary_check>
 8001204:	4603      	mov	r3, r0
 8001206:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001208:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d108      	bne.n	8001222 <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3301      	adds	r3, #1
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	2105      	movs	r1, #5
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fb7e 	bl	800291a <boundary_check>
 800121e:	4603      	mov	r3, r0
 8001220:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001222:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d108      	bne.n	800123c <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3302      	adds	r3, #2
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	2105      	movs	r1, #5
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fb71 	bl	800291a <boundary_check>
 8001238:	4603      	mov	r3, r0
 800123a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800123c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	2105      	movs	r1, #5
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fb65 	bl	800291a <boundary_check>
 8001250:	4603      	mov	r3, r0
 8001252:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3304      	adds	r3, #4
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	2108      	movs	r1, #8
 8001264:	4618      	mov	r0, r3
 8001266:	f001 fb58 	bl	800291a <boundary_check>
 800126a:	4603      	mov	r3, r0
 800126c:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800126e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d15c      	bne.n	8001330 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8001276:	7c3b      	ldrb	r3, [r7, #16]
 8001278:	b25b      	sxtb	r3, r3
 800127a:	f023 031c 	bic.w	r3, r3, #28
 800127e:	b25a      	sxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	78db      	ldrb	r3, [r3, #3]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	f003 031c 	and.w	r3, r3, #28
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b25b      	sxtb	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	b25b      	sxtb	r3, r3
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	015b      	lsls	r3, r3, #5
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	f023 031c 	bic.w	r3, r3, #28
 80012b8:	b25a      	sxtb	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f003 031c 	and.w	r3, r3, #28
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80012d0:	7b7b      	ldrb	r3, [r7, #13]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	f023 0307 	bic.w	r3, r3, #7
 80012d8:	b25a      	sxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d004      	beq.n	8001300 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	791b      	ldrb	r3, [r3, #4]
 80012fa:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001300:	7c3b      	ldrb	r3, [r7, #16]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	b25a      	sxtb	r2, r3
 800130a:	7fbb      	ldrb	r3, [r7, #30]
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	b25b      	sxtb	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b25b      	sxtb	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001320:	b25a      	sxtb	r2, r3
 8001322:	7f7b      	ldrb	r3, [r7, #29]
 8001324:	01db      	lsls	r3, r3, #7
 8001326:	b25b      	sxtb	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b25b      	sxtb	r3, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001330:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001338:	f107 010c 	add.w	r1, r7, #12
 800133c:	f107 0014 	add.w	r0, r7, #20
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2205      	movs	r2, #5
 8001344:	f7ff fdfc 	bl	8000f40 <bme68x_set_regs>
 8001348:	4603      	mov	r3, r0
 800134a:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 800134c:	7f3b      	ldrb	r3, [r7, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00a      	beq.n	8001368 <bme68x_set_conf+0x1f8>
 8001352:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 800135a:	7f3b      	ldrb	r3, [r7, #28]
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f80a 	bl	8001378 <bme68x_set_op_mode>
 8001364:	4603      	mov	r3, r0
 8001366:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001368:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08008490 	.word	0x08008490

08001378 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001388:	2374      	movs	r3, #116	; 0x74
 800138a:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 800138c:	f107 010d 	add.w	r1, r7, #13
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	2074      	movs	r0, #116	; 0x74
 8001396:	f7ff fe63 	bl	8001060 <bme68x_get_regs>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d11d      	bne.n	80013e2 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d016      	beq.n	80013e2 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80013b4:	7b7b      	ldrb	r3, [r7, #13]
 80013b6:	f023 0303 	bic.w	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80013be:	f107 010d 	add.w	r1, r7, #13
 80013c2:	f107 000c 	add.w	r0, r7, #12
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f7ff fdb9 	bl	8000f40 <bme68x_set_regs>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	6852      	ldr	r2, [r2, #4]
 80013da:	4611      	mov	r1, r2
 80013dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80013e0:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <bme68x_set_op_mode+0x78>
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0cd      	beq.n	800138c <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d01b      	beq.n	800142e <bme68x_set_op_mode+0xb6>
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d117      	bne.n	800142e <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	b25b      	sxtb	r3, r3
 8001402:	f023 0303 	bic.w	r3, r3, #3
 8001406:	b25a      	sxtb	r2, r3
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800141a:	f107 010d 	add.w	r1, r7, #13
 800141e:	f107 000c 	add.w	r0, r7, #12
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	f7ff fd8b 	bl	8000f40 <bme68x_set_regs>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00f      	beq.n	800146a <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800144a:	f107 010e 	add.w	r1, r7, #14
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	2074      	movs	r0, #116	; 0x74
 8001454:	f7ff fe04 	bl	8001060 <bme68x_get_regs>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e001      	b.n	800146e <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800146a:	23ff      	movs	r3, #255	; 0xff
 800146c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 800148e:	4a34      	ldr	r2, [pc, #208]	; (8001560 <bme68x_get_meas_dur+0xe4>)
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001498:	6018      	str	r0, [r3, #0]
 800149a:	3304      	adds	r3, #4
 800149c:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d058      	beq.n	8001556 <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3301      	adds	r3, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	2105      	movs	r1, #5
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fa34 	bl	800291a <boundary_check>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME68X_OK)
 80014b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d109      	bne.n	80014d4 <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3302      	adds	r3, #2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	2105      	movs	r1, #5
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fa26 	bl	800291a <boundary_check>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 80014d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d108      	bne.n	80014ee <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	2105      	movs	r1, #5
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fa19 	bl	800291a <boundary_check>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 80014ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12f      	bne.n	8001556 <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	3328      	adds	r3, #40	; 0x28
 80014fc:	443b      	add	r3, r7
 80014fe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001502:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	3328      	adds	r3, #40	; 0x28
 800150a:	443b      	add	r3, r7
 800150c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001510:	461a      	mov	r2, r3
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3328      	adds	r3, #40	; 0x28
 800151e:	443b      	add	r3, r7
 8001520:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001524:	461a      	mov	r2, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800153e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8001546:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d003      	beq.n	8001556 <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001554:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8001556:	6a3b      	ldr	r3, [r7, #32]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	08008498 	.word	0x08008498

08001564 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b09a      	sub	sp, #104	; 0x68
 8001568:	af00      	add	r7, sp, #0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 8001586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	2248      	movs	r2, #72	; 0x48
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f005 f8ae 	bl	80066fc <memset>

    field_ptr[0] = &field_data[0];
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
    field_ptr[1] = &field_data[1];
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	3318      	adds	r3, #24
 80015ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    field_ptr[2] = &field_data[2];
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	3330      	adds	r3, #48	; 0x30
 80015b4:	663b      	str	r3, [r7, #96]	; 0x60

    rslt = null_ptr_check(dev);
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f001 f9dc 	bl	8002974 <null_ptr_check>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 80015c2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 80c1 	bne.w	800174e <bme68x_get_data+0x1ea>
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80bd 	beq.w	800174e <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d11c      	bne.n	8001614 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 fd8b 	bl	80020fa <read_field_data>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (rslt == BME68X_OK)
 80015ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 80a1 	bne.w	8001736 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da03      	bge.n	8001606 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001604:	e097      	b.n	8001736 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 800160c:	2302      	movs	r3, #2
 800160e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001612:	e090      	b.n	8001736 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d003      	beq.n	8001622 <bme68x_get_data+0xbe>
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b03      	cmp	r3, #3
 800161e:	f040 8087 	bne.w	8001730 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001626:	6839      	ldr	r1, [r7, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 feb0 	bl	800238e <read_all_field_data>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

            new_fields = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001640:	e014      	b.n	800166c <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001642:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3368      	adds	r3, #104	; 0x68
 800164a:	443b      	add	r3, r7
 800164c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	da04      	bge.n	8001662 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8001658:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800165c:	3301      	adds	r3, #1
 800165e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001662:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001666:	3301      	adds	r3, #1
 8001668:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800166c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001670:	2b02      	cmp	r3, #2
 8001672:	d803      	bhi.n	800167c <bme68x_get_data+0x118>
 8001674:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0e2      	beq.n	8001642 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001682:	e01c      	b.n	80016be <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8001684:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001688:	3301      	adds	r3, #1
 800168a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800168e:	e00d      	b.n	80016ac <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8001690:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001694:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 8001698:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fb15 	bl	8002ccc <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 80016a2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80016a6:	3301      	adds	r3, #1
 80016a8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80016ac:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d9ed      	bls.n	8001690 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80016b4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016b8:	3301      	adds	r3, #1
 80016ba:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d803      	bhi.n	80016ce <bme68x_get_data+0x16a>
 80016c6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0da      	beq.n	8001684 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80016d4:	e01c      	b.n	8001710 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 80016d6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	3368      	adds	r3, #104	; 0x68
 80016de:	443b      	add	r3, r7
 80016e0:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80016e4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4413      	add	r3, r2
 80016f6:	461c      	mov	r4, r3
 80016f8:	460d      	mov	r5, r1
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001702:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001706:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800170a:	3301      	adds	r3, #1
 800170c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001710:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001714:	2b02      	cmp	r3, #2
 8001716:	d803      	bhi.n	8001720 <bme68x_get_data+0x1bc>
 8001718:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0da      	beq.n	80016d6 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8001720:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8001728:	2302      	movs	r3, #2
 800172a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (new_fields == 0)
 800172e:	e002      	b.n	8001736 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if (n_data == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d103      	bne.n	8001744 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 800173c:	23ff      	movs	r3, #255	; 0xff
 800173e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if (n_data == NULL)
 8001742:	e007      	b.n	8001754 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800174a:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 800174c:	e002      	b.n	8001754 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800174e:	23ff      	movs	r3, #255	; 0xff
 8001750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    }

    return rslt;
 8001754:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8001758:	4618      	mov	r0, r3
 800175a:	3768      	adds	r7, #104	; 0x68
 800175c:	46bd      	mov	sp, r7
 800175e:	bdb0      	pop	{r4, r5, r7, pc}

08001760 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8001776:	f247 1370 	movw	r3, #29040	; 0x7170
 800177a:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d06e      	beq.n	8001860 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fdf7 	bl	8001378 <bme68x_set_op_mode>
 800178a:	4603      	mov	r3, r0
 800178c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 800178e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8001796:	f107 021c 	add.w	r2, r7, #28
 800179a:	7bf9      	ldrb	r1, [r7, #15]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68b8      	ldr	r0, [r7, #8]
 80017a0:	f001 f908 	bl	80029b4 <set_conf>
 80017a4:	4603      	mov	r3, r0
 80017a6:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80017a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d159      	bne.n	8001864 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80017b0:	f107 0118 	add.w	r1, r7, #24
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	2070      	movs	r0, #112	; 0x70
 80017ba:	f7ff fc51 	bl	8001060 <bme68x_get_regs>
 80017be:	4603      	mov	r3, r0
 80017c0:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 80017c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d14c      	bne.n	8001864 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10b      	bne.n	80017ea <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 80017d2:	2300      	movs	r3, #0
 80017d4:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d102      	bne.n	80017e4 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80017de:	2302      	movs	r3, #2
 80017e0:	777b      	strb	r3, [r7, #29]
 80017e2:	e006      	b.n	80017f2 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80017e4:	2301      	movs	r3, #1
 80017e6:	777b      	strb	r3, [r7, #29]
 80017e8:	e003      	b.n	80017f2 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80017ea:	2301      	movs	r3, #1
 80017ec:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80017ee:	2300      	movs	r3, #0
 80017f0:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80017f2:	7e3b      	ldrb	r3, [r7, #24]
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	f023 0308 	bic.w	r3, r3, #8
 80017fa:	b25a      	sxtb	r2, r3
 80017fc:	7fbb      	ldrb	r3, [r7, #30]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	b25b      	sxtb	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b25b      	sxtb	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001810:	7e7b      	ldrb	r3, [r7, #25]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f023 030f 	bic.w	r3, r3, #15
 8001818:	b25a      	sxtb	r2, r3
 800181a:	7f3b      	ldrb	r3, [r7, #28]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	b25b      	sxtb	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b25b      	sxtb	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800182c:	7e7b      	ldrb	r3, [r7, #25]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001834:	b25a      	sxtb	r2, r3
 8001836:	7f7b      	ldrb	r3, [r7, #29]
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	b25b      	sxtb	r3, r3
 800183c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001840:	b25b      	sxtb	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b25b      	sxtb	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800184a:	f107 0118 	add.w	r1, r7, #24
 800184e:	f107 0014 	add.w	r0, r7, #20
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2202      	movs	r2, #2
 8001856:	f7ff fb73 	bl	8000f40 <bme68x_set_regs>
 800185a:	4603      	mov	r3, r0
 800185c:	77fb      	strb	r3, [r7, #31]
 800185e:	e001      	b.n	8001864 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001860:	23ff      	movs	r3, #255	; 0xff
 8001862:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001864:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001968 <calc_temperature+0xf8>
 8001888:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	8bdb      	ldrh	r3, [r3, #30]
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001898:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800196c <calc_temperature+0xfc>
 800189c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b6:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001970 <calc_temperature+0x100>
 80018c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	8bdb      	ldrh	r3, [r3, #30]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018d8:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001974 <calc_temperature+0x104>
 80018dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018e0:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ee:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001970 <calc_temperature+0x100>
 80018f2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	8bdb      	ldrh	r3, [r3, #30]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001902:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001974 <calc_temperature+0x104>
 8001906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800190a:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800190e:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001920:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001924:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8001930:	ed97 7a05 	vldr	s14, [r7, #20]
 8001934:	edd7 7a04 	vldr	s15, [r7, #16]
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001948:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001978 <calc_temperature+0x108>
 800194c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	ee07 3a90 	vmov	s15, r3
}
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	46800000 	.word	0x46800000
 800196c:	44800000 	.word	0x44800000
 8001970:	48000000 	.word	0x48000000
 8001974:	46000000 	.word	0x46000000
 8001978:	45a00000 	.word	0x45a00000

0800197c <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800198c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001bd0 <calc_pressure+0x254>
 8001998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800199c:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80019a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019b6:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001bd4 <calc_pressure+0x258>
 80019ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c2:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 80019ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80019f0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a06:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001bd8 <calc_pressure+0x25c>
 8001a0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a12:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a34:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001bdc <calc_pressure+0x260>
 8001a38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a56:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001be0 <calc_pressure+0x264>
 8001a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5e:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001a62:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001be4 <calc_pressure+0x268>
 8001a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a86:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a94:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001be8 <calc_pressure+0x26c>
 8001a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001aa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa8:	ee17 3a90 	vmov	r3, s15
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8081 	beq.w	8001bb4 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001ab2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ab6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001bec <calc_pressure+0x270>
 8001aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001bf0 <calc_pressure+0x274>
 8001aca:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ace:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad6:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001bf4 <calc_pressure+0x278>
 8001afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b00:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b12:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001be4 <calc_pressure+0x268>
 8001b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001b26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b2a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001bf8 <calc_pressure+0x27c>
 8001b2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b32:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b36:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001bf8 <calc_pressure+0x27c>
 8001b3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b46:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001bf8 <calc_pressure+0x27c>
 8001b4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b60:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001bd4 <calc_pressure+0x258>
 8001b64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001b70:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001bfc <calc_pressure+0x280>
 8001b96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bb2:	e002      	b.n	8001bba <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	ee07 3a90 	vmov	s15, r3
}
 8001bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	477a0000 	.word	0x477a0000
 8001bd4:	48000000 	.word	0x48000000
 8001bd8:	47800000 	.word	0x47800000
 8001bdc:	46800000 	.word	0x46800000
 8001be0:	49000000 	.word	0x49000000
 8001be4:	47000000 	.word	0x47000000
 8001be8:	49800000 	.word	0x49800000
 8001bec:	45800000 	.word	0x45800000
 8001bf0:	45c35000 	.word	0x45c35000
 8001bf4:	4f000000 	.word	0x4f000000
 8001bf8:	43800000 	.word	0x43800000
 8001bfc:	43000000 	.word	0x43000000

08001c00 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001c12:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001d7c <calc_humidity+0x17c>
 8001c16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1a:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	8a1b      	ldrh	r3, [r3, #16]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c34:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001c38:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c4e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001c52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c62:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	8a5b      	ldrh	r3, [r3, #18]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c72:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001d80 <calc_humidity+0x180>
 8001c76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c88:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001d84 <calc_humidity+0x184>
 8001c8c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c9c:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cae:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001d88 <calc_humidity+0x188>
 8001cb2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001cb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cba:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cc2:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001cca:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001cce:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd6:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	7ddb      	ldrb	r3, [r3, #23]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ce6:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001d84 <calc_humidity+0x184>
 8001cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cee:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d00:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001d8c <calc_humidity+0x18c>
 8001d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d08:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001d0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d30:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d38:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001d3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d40:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001d90 <calc_humidity+0x190>
 8001d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	dd02      	ble.n	8001d54 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <calc_humidity+0x194>)
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e009      	b.n	8001d68 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	d502      	bpl.n	8001d68 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	ee07 3a90 	vmov	s15, r3
}
 8001d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	45a00000 	.word	0x45a00000
 8001d80:	48800000 	.word	0x48800000
 8001d84:	46800000 	.word	0x46800000
 8001d88:	49800000 	.word	0x49800000
 8001d8c:	4a000000 	.word	0x4a000000
 8001d90:	42c80000 	.word	0x42c80000
 8001d94:	42c80000 	.word	0x42c80000

08001d98 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001d98:	b4b0      	push	{r4, r5, r7}
 8001d9a:	b0a9      	sub	sp, #164	; 0xa4
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	603a      	str	r2, [r7, #0]
 8001da2:	80fb      	strh	r3, [r7, #6]
 8001da4:	460b      	mov	r3, r1
 8001da6:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001db6:	797b      	ldrb	r3, [r7, #5]
 8001db8:	2201      	movs	r2, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001dca:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <calc_gas_resistance_low+0x12c>)
 8001dcc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001de2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <calc_gas_resistance_low+0x130>)
 8001de8:	f107 0408 	add.w	r4, r7, #8
 8001dec:	461d      	mov	r5, r3
 8001dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e10:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e18:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ecc <calc_gas_resistance_low+0x134>
 8001e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e20:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001e24:	797b      	ldrb	r3, [r7, #5]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	33a0      	adds	r3, #160	; 0xa0
 8001e2a:	443b      	add	r3, r7
 8001e2c:	3b58      	subs	r3, #88	; 0x58
 8001e2e:	ed93 7a00 	vldr	s14, [r3]
 8001e32:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001ed0 <calc_gas_resistance_low+0x138>
 8001e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e42:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001e4e:	797b      	ldrb	r3, [r7, #5]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	33a0      	adds	r3, #160	; 0xa0
 8001e54:	443b      	add	r3, r7
 8001e56:	3b98      	subs	r3, #152	; 0x98
 8001e58:	ed93 7a00 	vldr	s14, [r3]
 8001e5c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001ed0 <calc_gas_resistance_low+0x138>
 8001e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e6c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001e70:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001e74:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ed4 <calc_gas_resistance_low+0x13c>
 8001e78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e7c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e84:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001e88:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001ed8 <calc_gas_resistance_low+0x140>
 8001e8c:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001e90:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001e94:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eac:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eb4:	ee07 3a90 	vmov	s15, r3
}
 8001eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebc:	37a4      	adds	r7, #164	; 0xa4
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bcb0      	pop	{r4, r5, r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	080084a0 	.word	0x080084a0
 8001ec8:	080084e0 	.word	0x080084e0
 8001ecc:	44a78000 	.word	0x44a78000
 8001ed0:	42c80000 	.word	0x42c80000
 8001ed4:	340637bd 	.word	0x340637bd
 8001ed8:	44000000 	.word	0x44000000

08001edc <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	80fb      	strh	r3, [r7, #6]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001eec:	797b      	ldrb	r3, [r7, #5]
 8001eee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001efe:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f10:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001f4c <calc_gas_resistance_high+0x70>
 8001f20:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f32:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	ee07 3a90 	vmov	s15, r3
}
 8001f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	49742400 	.word	0x49742400

08001f50 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08b      	sub	sp, #44	; 0x2c
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001f5c:	89fb      	ldrh	r3, [r7, #14]
 8001f5e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001f62:	d902      	bls.n	8001f6a <calc_res_heat+0x1a>
    {
        temp = 400;
 8001f64:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f68:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f78:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f80:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002094 <calc_res_heat+0x144>
 8001f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002098 <calc_res_heat+0x148>
 8001f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800209c <calc_res_heat+0x14c>
 8001fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001faa:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80020a0 <calc_res_heat+0x150>
 8001fae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb2:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80020a4 <calc_res_heat+0x154>
 8001fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fcc:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fda:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff2:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002004:	edd7 7a07 	vldr	s15, [r7, #28]
 8002008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002014:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002026:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800202a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800202e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002036:	edd7 7a05 	vldr	s15, [r7, #20]
 800203a:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80020a8 <calc_res_heat+0x158>
 8002050:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002058:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800205c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002060:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002064:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002068:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800206c:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8002070:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80020ac <calc_res_heat+0x15c>
 8002074:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8002078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002080:	793b      	ldrb	r3, [r7, #4]
 8002082:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
}
 8002086:	4618      	mov	r0, r3
 8002088:	372c      	adds	r7, #44	; 0x2c
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	42440000 	.word	0x42440000
 8002098:	47000000 	.word	0x47000000
 800209c:	3a03126f 	.word	0x3a03126f
 80020a0:	3b1a0275 	.word	0x3b1a0275
 80020a4:	44800000 	.word	0x44800000
 80020a8:	3b03126f 	.word	0x3b03126f
 80020ac:	4059999a 	.word	0x4059999a

080020b0 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80020c4:	d308      	bcc.n	80020d8 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 80020c6:	23ff      	movs	r3, #255	; 0xff
 80020c8:	73bb      	strb	r3, [r7, #14]
 80020ca:	e00f      	b.n	80020ec <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	3301      	adds	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	2b3f      	cmp	r3, #63	; 0x3f
 80020dc:	d8f6      	bhi.n	80020cc <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b08e      	sub	sp, #56	; 0x38
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002120:	2305      	movs	r3, #5
 8002122:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 8002126:	e123      	b.n	8002370 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	461a      	mov	r2, r3
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	4413      	add	r3, r2
 8002130:	b2db      	uxtb	r3, r3
 8002132:	331d      	adds	r3, #29
 8002134:	b2d8      	uxtb	r0, r3
 8002136:	f107 0110 	add.w	r1, r7, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2211      	movs	r2, #17
 800213e:	f7fe ff8f 	bl	8001060 <bme68x_get_regs>
 8002142:	4603      	mov	r3, r0
 8002144:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 800214e:	23ff      	movs	r3, #255	; 0xff
 8002150:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8002154:	e115      	b.n	8002382 <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002156:	7c3b      	ldrb	r3, [r7, #16]
 8002158:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800215c:	b2da      	uxtb	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002162:	7c3b      	ldrb	r3, [r7, #16]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 800216e:	7c7a      	ldrb	r2, [r7, #17]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002174:	7cbb      	ldrb	r3, [r7, #18]
 8002176:	031a      	lsls	r2, r3, #12
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4313      	orrs	r3, r2
 800217e:	7d3a      	ldrb	r2, [r7, #20]
 8002180:	0912      	lsrs	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4313      	orrs	r3, r2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002188:	7d7b      	ldrb	r3, [r7, #21]
 800218a:	031a      	lsls	r2, r3, #12
 800218c:	7dbb      	ldrb	r3, [r7, #22]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4313      	orrs	r3, r2
 8002192:	7dfa      	ldrb	r2, [r7, #23]
 8002194:	0912      	lsrs	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	4313      	orrs	r3, r2
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 800219c:	7e3b      	ldrb	r3, [r7, #24]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	7e7b      	ldrb	r3, [r7, #25]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 80021ac:	7f7b      	ldrb	r3, [r7, #29]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	7fbb      	ldrb	r3, [r7, #30]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 80021c0:	7ffb      	ldrb	r3, [r7, #31]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 80021d6:	7fbb      	ldrb	r3, [r7, #30]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 80021e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d11c      	bne.n	800222e <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b25a      	sxtb	r2, r3
 80021fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	b25b      	sxtb	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b25b      	sxtb	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b25a      	sxtb	r2, r3
 8002216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800221a:	b25b      	sxtb	r3, r3
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	b25b      	sxtb	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b25b      	sxtb	r3, r3
 8002226:	b2da      	uxtb	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e019      	b.n	8002262 <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b25a      	sxtb	r2, r3
 8002234:	7fbb      	ldrb	r3, [r7, #30]
 8002236:	b25b      	sxtb	r3, r3
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	b25b      	sxtb	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b25b      	sxtb	r3, r3
 8002242:	b2da      	uxtb	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b25a      	sxtb	r2, r3
 800224e:	7fbb      	ldrb	r3, [r7, #30]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	b25b      	sxtb	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b25b      	sxtb	r3, r3
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b25b      	sxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	da70      	bge.n	800234e <read_field_data+0x254>
 800226c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002270:	2b00      	cmp	r3, #0
 8002272:	d16c      	bne.n	800234e <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	785b      	ldrb	r3, [r3, #1]
 8002278:	335a      	adds	r3, #90	; 0x5a
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1cd9      	adds	r1, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f7fe feec 	bl	8001060 <bme68x_get_regs>
 8002288:	4603      	mov	r3, r0
 800228a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 800228e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	3350      	adds	r3, #80	; 0x50
 800229c:	b2d8      	uxtb	r0, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1d19      	adds	r1, r3, #4
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f7fe fedb 	bl	8001060 <bme68x_get_regs>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 80022b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10c      	bne.n	80022d2 <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	785b      	ldrb	r3, [r3, #1]
 80022bc:	3364      	adds	r3, #100	; 0x64
 80022be:	b2d8      	uxtb	r0, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1d59      	adds	r1, r3, #5
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f7fe feca 	bl	8001060 <bme68x_get_regs>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 80022d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d139      	bne.n	800234e <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022de:	f7ff fac7 	bl	8001870 <calc_temperature>
 80022e2:	eef0 7a40 	vmov.f32	s15, s0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f0:	f7ff fb44 	bl	800197c <calc_pressure>
 80022f4:	eef0 7a40 	vmov.f32	s15, s0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 80022fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fc7c 	bl	8001c00 <calc_humidity>
 8002308:	eef0 7a40 	vmov.f32	s15, s0
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10c      	bne.n	8002334 <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800231a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800231e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fdda 	bl	8001edc <calc_gas_resistance_high>
 8002328:	eef0 7a40 	vmov.f32	s15, s0
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002332:	e026      	b.n	8002382 <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002334:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fd2b 	bl	8001d98 <calc_gas_resistance_low>
 8002342:	eef0 7a40 	vmov.f32	s15, s0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 800234c:	e019      	b.n	8002382 <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 800234e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6852      	ldr	r2, [r2, #4]
 800235e:	4611      	mov	r1, r2
 8002360:	f242 7010 	movw	r0, #10000	; 0x2710
 8002364:	4798      	blx	r3
        }

        tries--;
 8002366:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800236a:	3b01      	subs	r3, #1
 800236c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 8002370:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <read_field_data+0x288>
 8002378:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800237c:	2b00      	cmp	r3, #0
 800237e:	f43f aed3 	beq.w	8002128 <read_field_data+0x2e>
    }

    return rslt;
 8002382:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002386:	4618      	mov	r0, r3
 8002388:	3738      	adds	r7, #56	; 0x38
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 800238e:	b590      	push	{r4, r7, lr}
 8002390:	b09d      	sub	sp, #116	; 0x74
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800239e:	2300      	movs	r3, #0
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a6:	222f      	movs	r2, #47	; 0x2f
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f9a6 	bl	80066fc <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
 80023c4:	615a      	str	r2, [r3, #20]
 80023c6:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10c      	bne.n	80023ea <read_all_field_data+0x5c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d107      	bne.n	80023ea <read_all_field_data+0x5c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3308      	adds	r3, #8
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 80023e4:	23ff      	movs	r3, #255	; 0xff
 80023e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 80023ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80023f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2233      	movs	r2, #51	; 0x33
 80023fa:	201d      	movs	r0, #29
 80023fc:	f7fe fe30 	bl	8001060 <bme68x_get_regs>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002406:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 800240e:	f107 0108 	add.w	r1, r7, #8
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	221e      	movs	r2, #30
 8002416:	2050      	movs	r0, #80	; 0x50
 8002418:	f7fe fe22 	bl	8001060 <bme68x_get_regs>
 800241c:	4603      	mov	r3, r0
 800241e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002422:	2300      	movs	r3, #0
 8002424:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002428:	e1d4      	b.n	80027d4 <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 800242a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800242e:	461a      	mov	r2, r3
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	4413      	add	r3, r2
 8002434:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002438:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800243c:	3370      	adds	r3, #112	; 0x70
 800243e:	443b      	add	r3, r7
 8002440:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002444:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	440b      	add	r3, r1
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002458:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800245c:	3370      	adds	r3, #112	; 0x70
 800245e:	443b      	add	r3, r7
 8002460:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002464:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	440b      	add	r3, r1
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f002 020f 	and.w	r2, r2, #15
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002478:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	440b      	add	r3, r1
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3270      	adds	r2, #112	; 0x70
 800248c:	443a      	add	r2, r7
 800248e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002492:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8002494:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002498:	3302      	adds	r3, #2
 800249a:	3370      	adds	r3, #112	; 0x70
 800249c:	443b      	add	r3, r7
 800249e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024a2:	031a      	lsls	r2, r3, #12
 80024a4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024a8:	3303      	adds	r3, #3
 80024aa:	3370      	adds	r3, #112	; 0x70
 80024ac:	443b      	add	r3, r7
 80024ae:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 80024b6:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80024ba:	3204      	adds	r2, #4
 80024bc:	3270      	adds	r2, #112	; 0x70
 80024be:	443a      	add	r2, r7
 80024c0:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80024c4:	0912      	lsrs	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
        adc_pres =
 80024c8:	4313      	orrs	r3, r2
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 80024cc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024d0:	3305      	adds	r3, #5
 80024d2:	3370      	adds	r3, #112	; 0x70
 80024d4:	443b      	add	r3, r7
 80024d6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024da:	031a      	lsls	r2, r3, #12
 80024dc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80024e0:	3306      	adds	r3, #6
 80024e2:	3370      	adds	r3, #112	; 0x70
 80024e4:	443b      	add	r3, r7
 80024e6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80024ee:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80024f2:	3207      	adds	r2, #7
 80024f4:	3270      	adds	r2, #112	; 0x70
 80024f6:	443a      	add	r2, r7
 80024f8:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80024fc:	0912      	lsrs	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
        adc_temp =
 8002500:	4313      	orrs	r3, r2
 8002502:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002504:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002508:	3308      	adds	r3, #8
 800250a:	3370      	adds	r3, #112	; 0x70
 800250c:	443b      	add	r3, r7
 800250e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002512:	b29b      	uxth	r3, r3
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b29a      	uxth	r2, r3
 8002518:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800251c:	3309      	adds	r3, #9
 800251e:	3370      	adds	r3, #112	; 0x70
 8002520:	443b      	add	r3, r7
 8002522:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002526:	b29b      	uxth	r3, r3
 8002528:	4313      	orrs	r3, r2
 800252a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800252e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002532:	330d      	adds	r3, #13
 8002534:	3370      	adds	r3, #112	; 0x70
 8002536:	443b      	add	r3, r7
 8002538:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800253c:	b29b      	uxth	r3, r3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	b29a      	uxth	r2, r3
 8002542:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002546:	330e      	adds	r3, #14
 8002548:	3370      	adds	r3, #112	; 0x70
 800254a:	443b      	add	r3, r7
 800254c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	b2db      	uxtb	r3, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800255c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002560:	330f      	adds	r3, #15
 8002562:	3370      	adds	r3, #112	; 0x70
 8002564:	443b      	add	r3, r7
 8002566:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800256a:	b29b      	uxth	r3, r3
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	b29a      	uxth	r2, r3
 8002570:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002574:	3310      	adds	r3, #16
 8002576:	3370      	adds	r3, #112	; 0x70
 8002578:	443b      	add	r3, r7
 800257a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	b2db      	uxtb	r3, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4313      	orrs	r3, r2
 8002586:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800258a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800258e:	330e      	adds	r3, #14
 8002590:	3370      	adds	r3, #112	; 0x70
 8002592:	443b      	add	r3, r7
 8002594:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80025a0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025a4:	3310      	adds	r3, #16
 80025a6:	3370      	adds	r3, #112	; 0x70
 80025a8:	443b      	add	r3, r7
 80025aa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d13a      	bne.n	8002634 <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 80025be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b25a      	sxtb	r2, r3
 80025ce:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025d2:	3310      	adds	r3, #16
 80025d4:	3370      	adds	r3, #112	; 0x70
 80025d6:	443b      	add	r3, r7
 80025d8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b259      	sxtb	r1, r3
 80025e8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b2ca      	uxtb	r2, r1
 80025f6:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80025f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b25a      	sxtb	r2, r3
 8002608:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800260c:	3310      	adds	r3, #16
 800260e:	3370      	adds	r3, #112	; 0x70
 8002610:	443b      	add	r3, r7
 8002612:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002616:	b25b      	sxtb	r3, r3
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	b25b      	sxtb	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b259      	sxtb	r1, r3
 8002622:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b2ca      	uxtb	r2, r1
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e039      	b.n	80026a8 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002634:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b25a      	sxtb	r2, r3
 8002644:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002648:	330e      	adds	r3, #14
 800264a:	3370      	adds	r3, #112	; 0x70
 800264c:	443b      	add	r3, r7
 800264e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002652:	b25b      	sxtb	r3, r3
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	b25b      	sxtb	r3, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	b259      	sxtb	r1, r3
 800265e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b2ca      	uxtb	r2, r1
 800266c:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800266e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b25a      	sxtb	r2, r3
 800267e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002682:	330e      	adds	r3, #14
 8002684:	3370      	adds	r3, #112	; 0x70
 8002686:	443b      	add	r3, r7
 8002688:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800268c:	b25b      	sxtb	r3, r3
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	b25b      	sxtb	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	b259      	sxtb	r1, r3
 8002698:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b2ca      	uxtb	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80026a8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	4619      	mov	r1, r3
 80026b8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f101 0270 	add.w	r2, r1, #112	; 0x70
 80026c8:	443a      	add	r2, r7
 80026ca:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80026ce:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80026d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	f103 020a 	add.w	r2, r3, #10
 80026e2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	440b      	add	r3, r1
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3270      	adds	r2, #112	; 0x70
 80026f0:	443a      	add	r2, r7
 80026f2:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80026f6:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80026f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	f103 0214 	add.w	r2, r3, #20
 800270a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	440b      	add	r3, r1
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3270      	adds	r2, #112	; 0x70
 8002718:	443a      	add	r2, r7
 800271a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800271e:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002720:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	681c      	ldr	r4, [r3, #0]
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002730:	f7ff f89e 	bl	8001870 <calc_temperature>
 8002734:	eef0 7a40 	vmov.f32	s15, s0
 8002738:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800273c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	681c      	ldr	r4, [r3, #0]
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800274c:	f7ff f916 	bl	800197c <calc_pressure>
 8002750:	eef0 7a40 	vmov.f32	s15, s0
 8002754:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8002758:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	681c      	ldr	r4, [r3, #0]
 8002764:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa48 	bl	8001c00 <calc_humidity>
 8002770:	eef0 7a40 	vmov.f32	s15, s0
 8002774:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d112      	bne.n	80027a6 <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002780:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	681c      	ldr	r4, [r3, #0]
 800278c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002790:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fba0 	bl	8001edc <calc_gas_resistance_high>
 800279c:	eef0 7a40 	vmov.f32	s15, s0
 80027a0:	edc4 7a05 	vstr	s15, [r4, #20]
 80027a4:	e011      	b.n	80027ca <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80027a6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	681c      	ldr	r4, [r3, #0]
 80027b2:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 80027b6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff faeb 	bl	8001d98 <calc_gas_resistance_low>
 80027c2:	eef0 7a40 	vmov.f32	s15, s0
 80027c6:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80027ca:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027ce:	3301      	adds	r3, #1
 80027d0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80027d4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d804      	bhi.n	80027e6 <read_all_field_data+0x458>
 80027dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f43f ae22 	beq.w	800242a <read_all_field_data+0x9c>
        }
    }

    return rslt;
 80027e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3774      	adds	r7, #116	; 0x74
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}

080027f2 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	6039      	str	r1, [r7, #0]
 80027fc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80027fe:	6838      	ldr	r0, [r7, #0]
 8002800:	f000 f8b8 	bl	8002974 <null_ptr_check>
 8002804:	4603      	mov	r3, r0
 8002806:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d14f      	bne.n	80028b0 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	da02      	bge.n	800281e <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8002818:	2300      	movs	r3, #0
 800281a:	73bb      	strb	r3, [r7, #14]
 800281c:	e001      	b.n	8002822 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800281e:	2310      	movs	r3, #16
 8002820:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7b5b      	ldrb	r3, [r3, #13]
 8002826:	7bba      	ldrb	r2, [r7, #14]
 8002828:	429a      	cmp	r2, r3
 800282a:	d041      	beq.n	80028b0 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7bba      	ldrb	r2, [r7, #14]
 8002830:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f107 010d 	add.w	r1, r7, #13
 800283e:	2201      	movs	r2, #1
 8002840:	20f3      	movs	r0, #243	; 0xf3
 8002842:	47a0      	blx	r4
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8002858:	23fe      	movs	r3, #254	; 0xfe
 800285a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 800285c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d125      	bne.n	80028b0 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8002864:	7b7b      	ldrb	r3, [r7, #13]
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7b5b      	ldrb	r3, [r3, #13]
 8002872:	b25b      	sxtb	r3, r3
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	b25a      	sxtb	r2, r3
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b25b      	sxtb	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f107 010d 	add.w	r1, r7, #13
 8002892:	2201      	movs	r2, #1
 8002894:	2073      	movs	r0, #115	; 0x73
 8002896:	47a0      	blx	r4
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 80028ac:	23fe      	movs	r3, #254	; 0xfe
 80028ae:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80028b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}

080028bc <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f855 	bl	8002974 <null_ptr_check>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11b      	bne.n	800290e <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f107 010e 	add.w	r1, r7, #14
 80028e2:	2201      	movs	r2, #1
 80028e4:	20f3      	movs	r0, #243	; 0xf3
 80028e6:	47a0      	blx	r4
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 80028fc:	23fe      	movs	r3, #254	; 0xfe
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e005      	b.n	800290e <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8002902:	7bbb      	ldrb	r3, [r7, #14]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	b2da      	uxtb	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}

0800291a <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	460b      	mov	r3, r1
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f823 	bl	8002974 <null_ptr_check>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <boundary_check+0x4a>
 8002938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d111      	bne.n	8002964 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	7afa      	ldrb	r2, [r7, #11]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20e      	bcs.n	8002968 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	7afa      	ldrb	r2, [r7, #11]
 800294e:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 8002962:	e001      	b.n	8002968 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002964:	23ff      	movs	r3, #255	; 0xff
 8002966:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <null_ptr_check+0x2a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <null_ptr_check+0x2a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <null_ptr_check+0x2a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800299e:	23ff      	movs	r3, #255	; 0xff
 80029a0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b093      	sub	sp, #76	; 0x4c
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80029d0:	236e      	movs	r3, #110	; 0x6e
 80029d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029d6:	4aa1      	ldr	r2, [pc, #644]	; (8002c5c <set_conf+0x2a8>)
 80029d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029de:	c303      	stmia	r3!, {r0, r1}
 80029e0:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029e2:	4a9e      	ldr	r2, [pc, #632]	; (8002c5c <set_conf+0x2a8>)
 80029e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ea:	c303      	stmia	r3!, {r0, r1}
 80029ec:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029ee:	4a9b      	ldr	r2, [pc, #620]	; (8002c5c <set_conf+0x2a8>)
 80029f0:	f107 0320 	add.w	r3, r7, #32
 80029f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f6:	c303      	stmia	r3!, {r0, r1}
 80029f8:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029fa:	4a98      	ldr	r2, [pc, #608]	; (8002c5c <set_conf+0x2a8>)
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a02:	c303      	stmia	r3!, {r0, r1}
 8002a04:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d024      	beq.n	8002a56 <set_conf+0xa2>
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	f300 80f9 	bgt.w	8002c04 <set_conf+0x250>
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d002      	beq.n	8002a1c <set_conf+0x68>
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d07c      	beq.n	8002b14 <set_conf+0x160>
 8002a1a:	e0f3      	b.n	8002c04 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8002a1c:	235a      	movs	r3, #90	; 0x5a
 8002a1e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	885b      	ldrh	r3, [r3, #2]
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fa91 	bl	8001f50 <calc_res_heat>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002a34:	2364      	movs	r3, #100	; 0x64
 8002a36:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	889b      	ldrh	r3, [r3, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fb36 	bl	80020b0 <calc_gas_wait>
 8002a44:	4603      	mov	r3, r0
 8002a46:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002a54:	e0db      	b.n	8002c0e <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <set_conf+0xb2>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002a66:	23ff      	movs	r3, #255	; 0xff
 8002a68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002a6c:	e0cf      	b.n	8002c0e <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002a74:	e03f      	b.n	8002af6 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002a76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a7a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002a7e:	325a      	adds	r2, #90	; 0x5a
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	3348      	adds	r3, #72	; 0x48
 8002a84:	443b      	add	r3, r7
 8002a86:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002a9c:	6839      	ldr	r1, [r7, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fa56 	bl	8001f50 <calc_res_heat>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002aac:	443b      	add	r3, r7
 8002aae:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002ab2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ab6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002aba:	3264      	adds	r2, #100	; 0x64
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	3348      	adds	r3, #72	; 0x48
 8002ac0:	443b      	add	r3, r7
 8002ac2:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fae9 	bl	80020b0 <calc_gas_wait>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002ae6:	443b      	add	r3, r7
 8002ae8:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002aec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002af0:	3301      	adds	r3, #1
 8002af2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	7c1b      	ldrb	r3, [r3, #16]
 8002afa:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3b9      	bcc.n	8002a76 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	7c1a      	ldrb	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	7c1b      	ldrb	r3, [r3, #16]
 8002b0e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002b12:	e07c      	b.n	8002c0e <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <set_conf+0x170>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002b24:	23ff      	movs	r3, #255	; 0xff
 8002b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002b2a:	e070      	b.n	8002c0e <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8a5b      	ldrh	r3, [r3, #18]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002b34:	2303      	movs	r3, #3
 8002b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b40:	e03a      	b.n	8002bb8 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002b42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b46:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b4a:	325a      	adds	r2, #90	; 0x5a
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	3348      	adds	r3, #72	; 0x48
 8002b50:	443b      	add	r3, r7
 8002b52:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f9f0 	bl	8001f50 <calc_res_heat>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002b78:	443b      	add	r3, r7
 8002b7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002b7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b82:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002b86:	3264      	adds	r2, #100	; 0x64
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	3348      	adds	r3, #72	; 0x48
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	3348      	adds	r3, #72	; 0x48
 8002ba8:	443b      	add	r3, r7
 8002baa:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002bae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	7c1b      	ldrb	r3, [r3, #16]
 8002bbc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3be      	bcc.n	8002b42 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	7c1a      	ldrb	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	7c1b      	ldrb	r3, [r3, #16]
 8002bd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8a5b      	ldrh	r3, [r3, #18]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f841 	bl	8002c60 <calc_heatr_dur_shared>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002be4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10f      	bne.n	8002c0c <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002bec:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002bf0:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f7fe f9a2 	bl	8000f40 <bme68x_set_regs>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002c02:	e003      	b.n	8002c0c <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002c0a:	e000      	b.n	8002c0e <set_conf+0x25a>
            break;
 8002c0c:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002c0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10b      	bne.n	8002c2e <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002c16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c1a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c1e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f7fe f98c 	bl	8000f40 <bme68x_set_regs>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002c2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002c36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c3a:	f107 0114 	add.w	r1, r7, #20
 8002c3e:	f107 0020 	add.w	r0, r7, #32
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f7fe f97c 	bl	8000f40 <bme68x_set_regs>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002c4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	374c      	adds	r7, #76	; 0x4c
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08008520 	.word	0x08008520

08002c60 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	f240 7282 	movw	r2, #1922	; 0x782
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d902      	bls.n	8002c7e <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002c78:	23ff      	movs	r3, #255	; 0xff
 8002c7a:	73bb      	strb	r3, [r7, #14]
 8002c7c:	e01d      	b.n	8002cba <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c84:	fb03 f202 	mul.w	r2, r3, r2
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <calc_heatr_dur_shared+0x68>)
 8002c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8e:	1ad2      	subs	r2, r2, r3
 8002c90:	0852      	lsrs	r2, r2, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002c98:	e005      	b.n	8002ca6 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b3f      	cmp	r3, #63	; 0x3f
 8002caa:	d8f6      	bhi.n	8002c9a <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	019b      	lsls	r3, r3, #6
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002cba:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	12c8b89f 	.word	0x12c8b89f

08002ccc <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	603a      	str	r2, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	789b      	ldrb	r3, [r3, #2]
 8002ce8:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002cea:	79bb      	ldrb	r3, [r7, #6]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	789b      	ldrb	r3, [r3, #2]
 8002cf6:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da21      	bge.n	8002d4e <sort_sensor_data+0x82>
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da18      	bge.n	8002d4e <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002d1c:	89ba      	ldrh	r2, [r7, #12]
 8002d1e:	89fb      	ldrh	r3, [r7, #14]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002d26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d2a:	f113 0f02 	cmn.w	r3, #2
 8002d2e:	db03      	blt.n	8002d38 <sort_sensor_data+0x6c>
 8002d30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db03      	blt.n	8002d40 <sort_sensor_data+0x74>
 8002d38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	dd16      	ble.n	8002d6e <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002d40:	79b9      	ldrb	r1, [r7, #6]
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f816 	bl	8002d78 <swap_fields>
    {
 8002d4c:	e00f      	b.n	8002d6e <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002d4e:	79bb      	ldrb	r3, [r7, #6]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da07      	bge.n	8002d70 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002d60:	79b9      	ldrb	r1, [r7, #6]
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f806 	bl	8002d78 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002d6c:	e000      	b.n	8002d70 <sort_sensor_data+0xa4>
    {
 8002d6e:	bf00      	nop
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	603a      	str	r2, [r7, #0]
 8002d82:	71fb      	strb	r3, [r7, #7]
 8002d84:	460b      	mov	r3, r1
 8002d86:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002d94:	79bb      	ldrb	r3, [r7, #6]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	441a      	add	r2, r3
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	440b      	add	r3, r1
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002da8:	79bb      	ldrb	r3, [r7, #6]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002dc8:	f107 010c 	add.w	r1, r7, #12
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2217      	movs	r2, #23
 8002dd0:	208a      	movs	r0, #138	; 0x8a
 8002dd2:	f7fe f945 	bl	8001060 <bme68x_get_regs>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8002ddc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	f103 0117 	add.w	r1, r3, #23
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	220e      	movs	r2, #14
 8002df0:	20e1      	movs	r0, #225	; 0xe1
 8002df2:	f7fe f935 	bl	8001060 <bme68x_get_regs>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8002dfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2205      	movs	r2, #5
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fe f925 	bl	8001060 <bme68x_get_regs>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002e1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 80cb 	bne.w	8002fbc <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002e26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002e3e:	7b7b      	ldrb	r3, [r7, #13]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	7b3b      	ldrb	r3, [r7, #12]
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	b25a      	sxtb	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002e5a:	7c7b      	ldrb	r3, [r7, #17]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	b21a      	sxth	r2, r3
 8002e60:	7c3b      	ldrb	r3, [r7, #16]
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	4313      	orrs	r3, r2
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	b21a      	sxth	r2, r3
 8002e74:	7cbb      	ldrb	r3, [r7, #18]
 8002e76:	b21b      	sxth	r3, r3
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002e80:	7d3b      	ldrb	r3, [r7, #20]
 8002e82:	b25a      	sxtb	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	7dbb      	ldrb	r3, [r7, #22]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002e9c:	7e7b      	ldrb	r3, [r7, #25]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	b21a      	sxth	r2, r3
 8002ea2:	7e3b      	ldrb	r3, [r7, #24]
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002eae:	7efb      	ldrb	r3, [r7, #27]
 8002eb0:	b25a      	sxtb	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002eb8:	7ebb      	ldrb	r3, [r7, #26]
 8002eba:	b25a      	sxtb	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	7fbb      	ldrb	r3, [r7, #30]
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002ed4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	b21a      	sxth	r2, r3
 8002edc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ee0:	b21b      	sxth	r3, r3
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002eea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002ef4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002efc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	b21b      	sxth	r3, r3
 8002f28:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002f2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f32:	b25a      	sxtb	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f3c:	b25a      	sxtb	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f46:	b25a      	sxtb	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002f4c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002f54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002f58:	b25a      	sxtb	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f62:	b25a      	sxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002f68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	b21a      	sxth	r2, r3
 8002f70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002f7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f82:	b25a      	sxtb	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da00      	bge.n	8002f96 <get_calib_data+0x1d6>
 8002f94:	330f      	adds	r3, #15
 8002f96:	111b      	asrs	r3, r3, #4
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002fa0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002fa4:	b25a      	sxtb	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002fac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	111b      	asrs	r3, r3, #4
 8002fb4:	b25a      	sxtb	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 8002fbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3738      	adds	r7, #56	; 0x38
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002fd4:	f107 010e 	add.w	r1, r7, #14
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	20f0      	movs	r0, #240	; 0xf0
 8002fde:	f7fe f83f 	bl	8001060 <bme68x_get_regs>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8002fee:	7bbb      	ldrb	r3, [r7, #14]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8002ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003008:	b08d      	sub	sp, #52	; 0x34
 800300a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800300c:	f000 fc64 	bl	80038d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003010:	f000 f902 	bl	8003218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003014:	f000 f99a 	bl	800334c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003018:	f000 f96a 	bl	80032f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	bme68x_soft_reset(&bme);
 800301c:	486d      	ldr	r0, [pc, #436]	; (80031d4 <main+0x1d0>)
 800301e:	f7fe f863 	bl	80010e8 <bme68x_soft_reset>

	rslt = bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003022:	2101      	movs	r1, #1
 8003024:	486b      	ldr	r0, [pc, #428]	; (80031d4 <main+0x1d0>)
 8003026:	f000 fa81 	bl	800352c <bme68x_interface_init>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <main+0x1d4>)
 8003030:	701a      	strb	r2, [r3, #0]
	bme68x_check_rslt("bme68x_interface_init", rslt);
 8003032:	4b69      	ldr	r3, [pc, #420]	; (80031d8 <main+0x1d4>)
 8003034:	f993 3000 	ldrsb.w	r3, [r3]
 8003038:	4619      	mov	r1, r3
 800303a:	4868      	ldr	r0, [pc, #416]	; (80031dc <main+0x1d8>)
 800303c:	f000 fa0c 	bl	8003458 <bme68x_check_rslt>

	rslt = bme68x_init(&bme);
 8003040:	4864      	ldr	r0, [pc, #400]	; (80031d4 <main+0x1d0>)
 8003042:	f7fd ff4f 	bl	8000ee4 <bme68x_init>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <main+0x1d4>)
 800304c:	701a      	strb	r2, [r3, #0]
	bme68x_check_rslt("bme68x_init", rslt);
 800304e:	4b62      	ldr	r3, [pc, #392]	; (80031d8 <main+0x1d4>)
 8003050:	f993 3000 	ldrsb.w	r3, [r3]
 8003054:	4619      	mov	r1, r3
 8003056:	4862      	ldr	r0, [pc, #392]	; (80031e0 <main+0x1dc>)
 8003058:	f000 f9fe 	bl	8003458 <bme68x_check_rslt>

	conf.filter = BME68X_FILTER_OFF;
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <main+0x1e0>)
 800305e:	2200      	movs	r2, #0
 8003060:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 8003062:	4b60      	ldr	r3, [pc, #384]	; (80031e4 <main+0x1e0>)
 8003064:	2208      	movs	r2, #8
 8003066:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_16X;
 8003068:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <main+0x1e0>)
 800306a:	2205      	movs	r2, #5
 800306c:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_1X;
 800306e:	4b5d      	ldr	r3, [pc, #372]	; (80031e4 <main+0x1e0>)
 8003070:	2201      	movs	r2, #1
 8003072:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_2X;
 8003074:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <main+0x1e0>)
 8003076:	2202      	movs	r2, #2
 8003078:	705a      	strb	r2, [r3, #1]
	rslt = bme68x_set_conf(&conf, &bme);
 800307a:	4956      	ldr	r1, [pc, #344]	; (80031d4 <main+0x1d0>)
 800307c:	4859      	ldr	r0, [pc, #356]	; (80031e4 <main+0x1e0>)
 800307e:	f7fe f877 	bl	8001170 <bme68x_set_conf>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <main+0x1d4>)
 8003088:	701a      	strb	r2, [r3, #0]
	bme68x_check_rslt("bme68x_set_conf", rslt);
 800308a:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <main+0x1d4>)
 800308c:	f993 3000 	ldrsb.w	r3, [r3]
 8003090:	4619      	mov	r1, r3
 8003092:	4855      	ldr	r0, [pc, #340]	; (80031e8 <main+0x1e4>)
 8003094:	f000 f9e0 	bl	8003458 <bme68x_check_rslt>

	heatr_conf.enable = BME68X_ENABLE;
 8003098:	4b54      	ldr	r3, [pc, #336]	; (80031ec <main+0x1e8>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 300;
 800309e:	4b53      	ldr	r3, [pc, #332]	; (80031ec <main+0x1e8>)
 80030a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030a4:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 100;
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <main+0x1e8>)
 80030a8:	2264      	movs	r2, #100	; 0x64
 80030aa:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 80030ac:	4a49      	ldr	r2, [pc, #292]	; (80031d4 <main+0x1d0>)
 80030ae:	494f      	ldr	r1, [pc, #316]	; (80031ec <main+0x1e8>)
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7fe fb55 	bl	8001760 <bme68x_set_heatr_conf>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <main+0x1d4>)
 80030bc:	701a      	strb	r2, [r3, #0]
	bme68x_check_rslt("bme68x_set_heatr_conf", rslt);
 80030be:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <main+0x1d4>)
 80030c0:	f993 3000 	ldrsb.w	r3, [r3]
 80030c4:	4619      	mov	r1, r3
 80030c6:	484a      	ldr	r0, [pc, #296]	; (80031f0 <main+0x1ec>)
 80030c8:	f000 f9c6 	bl	8003458 <bme68x_check_rslt>

	printf("Sample, TimeStamp(ms), Temperature(deg C), Pressure(Pa), Humidity(%%), Gas resistance(ohm), Status\n");
 80030cc:	4849      	ldr	r0, [pc, #292]	; (80031f4 <main+0x1f0>)
 80030ce:	f003 f9cf 	bl	8006470 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      	  while (sample_count <= SAMPLE_COUNT)
 80030d2:	e071      	b.n	80031b8 <main+0x1b4>
      	  {
          rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 80030d4:	493f      	ldr	r1, [pc, #252]	; (80031d4 <main+0x1d0>)
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7fe f94e 	bl	8001378 <bme68x_set_op_mode>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <main+0x1d4>)
 80030e2:	701a      	strb	r2, [r3, #0]
          bme68x_check_rslt("bme68x_set_op_mode", rslt);
 80030e4:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <main+0x1d4>)
 80030e6:	f993 3000 	ldrsb.w	r3, [r3]
 80030ea:	4619      	mov	r1, r3
 80030ec:	4842      	ldr	r0, [pc, #264]	; (80031f8 <main+0x1f4>)
 80030ee:	f000 f9b3 	bl	8003458 <bme68x_check_rslt>

          del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme) + (heatr_conf.heatr_dur * 1000);
 80030f2:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <main+0x1d0>)
 80030f4:	493b      	ldr	r1, [pc, #236]	; (80031e4 <main+0x1e0>)
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7fe f9c0 	bl	800147c <bme68x_get_meas_dur>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <main+0x1e8>)
 8003100:	8892      	ldrh	r2, [r2, #4]
 8003102:	4611      	mov	r1, r2
 8003104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003108:	fb01 f202 	mul.w	r2, r1, r2
 800310c:	4413      	add	r3, r2
 800310e:	4a3b      	ldr	r2, [pc, #236]	; (80031fc <main+0x1f8>)
 8003110:	6013      	str	r3, [r2, #0]
          bme.delay_us(0, bme.intf_ptr);
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <main+0x1d0>)
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	4a2f      	ldr	r2, [pc, #188]	; (80031d4 <main+0x1d0>)
 8003118:	6852      	ldr	r2, [r2, #4]
 800311a:	4611      	mov	r1, r2
 800311c:	2000      	movs	r0, #0
 800311e:	4798      	blx	r3

          rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <main+0x1d0>)
 8003122:	4a37      	ldr	r2, [pc, #220]	; (8003200 <main+0x1fc>)
 8003124:	4937      	ldr	r1, [pc, #220]	; (8003204 <main+0x200>)
 8003126:	2001      	movs	r0, #1
 8003128:	f7fe fa1c 	bl	8001564 <bme68x_get_data>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <main+0x1d4>)
 8003132:	701a      	strb	r2, [r3, #0]
          bme68x_check_rslt("bme68x_get_data", rslt);
 8003134:	4b28      	ldr	r3, [pc, #160]	; (80031d8 <main+0x1d4>)
 8003136:	f993 3000 	ldrsb.w	r3, [r3]
 800313a:	4619      	mov	r1, r3
 800313c:	4832      	ldr	r0, [pc, #200]	; (8003208 <main+0x204>)
 800313e:	f000 f98b 	bl	8003458 <bme68x_check_rslt>

          if (n_fields)
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <main+0x1fc>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d036      	beq.n	80031b8 <main+0x1b4>
          {
  #ifdef BME68X_USE_FPU
			printf("%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <main+0x208>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <main+0x20c>)
 8003152:	681e      	ldr	r6, [r3, #0]
			sample_count,
			(long unsigned int)time_ms,
			data.temperature,
 8003154:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <main+0x200>)
 8003156:	689b      	ldr	r3, [r3, #8]
			printf("%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fa15 	bl	8000588 <__aeabi_f2d>
 800315e:	4604      	mov	r4, r0
 8003160:	460d      	mov	r5, r1
			data.pressure,
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <main+0x200>)
 8003164:	68db      	ldr	r3, [r3, #12]
			printf("%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fa0e 	bl	8000588 <__aeabi_f2d>
 800316c:	4680      	mov	r8, r0
 800316e:	4689      	mov	r9, r1
			data.humidity,
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <main+0x200>)
 8003172:	691b      	ldr	r3, [r3, #16]
			printf("%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fa07 	bl	8000588 <__aeabi_f2d>
 800317a:	4682      	mov	sl, r0
 800317c:	468b      	mov	fp, r1
			data.gas_resistance,
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <main+0x200>)
 8003180:	695b      	ldr	r3, [r3, #20]
			printf("%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fa00 	bl	8000588 <__aeabi_f2d>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
			data.status);
 800318c:	491d      	ldr	r1, [pc, #116]	; (8003204 <main+0x200>)
 800318e:	7809      	ldrb	r1, [r1, #0]
			printf("%u, %lu, %.2f, %.2f, %.2f, %.2f, 0x%x\n",
 8003190:	9108      	str	r1, [sp, #32]
 8003192:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003196:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800319a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800319e:	e9cd 4500 	strd	r4, r5, [sp]
 80031a2:	4632      	mov	r2, r6
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	481b      	ldr	r0, [pc, #108]	; (8003214 <main+0x210>)
 80031a8:	f003 f962 	bl	8006470 <iprintf>
			(long unsigned int)(data.humidity / 1000),
			(long unsigned int)data.gas_resistance,
			data.status);
  #endif

  sample_count++;
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <main+0x208>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <main+0x208>)
 80031b6:	801a      	strh	r2, [r3, #0]
      	  while (sample_count <= SAMPLE_COUNT)
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <main+0x208>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80031c0:	d988      	bls.n	80030d4 <main+0xd0>

          }
  }
  return rslt;
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <main+0x1d4>)
 80031c4:	f993 3000 	ldrsb.w	r3, [r3]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d2:	bf00      	nop
 80031d4:	20000248 	.word	0x20000248
 80031d8:	20000298 	.word	0x20000298
 80031dc:	0800852c 	.word	0x0800852c
 80031e0:	08008544 	.word	0x08008544
 80031e4:	2000029c 	.word	0x2000029c
 80031e8:	08008550 	.word	0x08008550
 80031ec:	200002a4 	.word	0x200002a4
 80031f0:	08008560 	.word	0x08008560
 80031f4:	08008578 	.word	0x08008578
 80031f8:	080085dc 	.word	0x080085dc
 80031fc:	200002d0 	.word	0x200002d0
 8003200:	200002d8 	.word	0x200002d8
 8003204:	200002b8 	.word	0x200002b8
 8003208:	080085f0 	.word	0x080085f0
 800320c:	20000000 	.word	0x20000000
 8003210:	200002d4 	.word	0x200002d4
 8003214:	08008600 	.word	0x08008600

08003218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b094      	sub	sp, #80	; 0x50
 800321c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	2234      	movs	r2, #52	; 0x34
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f003 fa68 	bl	80066fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <SystemClock_Config+0xd0>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <SystemClock_Config+0xd0>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	; 0x40
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <SystemClock_Config+0xd0>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003258:	2300      	movs	r3, #0
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4b23      	ldr	r3, [pc, #140]	; (80032ec <SystemClock_Config+0xd4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <SystemClock_Config+0xd4>)
 8003262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <SystemClock_Config+0xd4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003274:	2302      	movs	r3, #2
 8003276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003278:	2301      	movs	r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800327c:	2310      	movs	r3, #16
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003280:	2302      	movs	r3, #2
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003284:	2300      	movs	r3, #0
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003288:	2308      	movs	r3, #8
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800328c:	23a0      	movs	r3, #160	; 0xa0
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003290:	2302      	movs	r3, #2
 8003292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003294:	2302      	movs	r3, #2
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003298:	2302      	movs	r3, #2
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 f91f 	bl	80054e4 <HAL_RCC_OscConfig>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80032ac:	f000 f876 	bl	800339c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032b0:	230f      	movs	r3, #15
 80032b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032b4:	2302      	movs	r3, #2
 80032b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	2105      	movs	r1, #5
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fdd2 	bl	8004e78 <HAL_RCC_ClockConfig>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80032da:	f000 f85f 	bl	800339c <Error_Handler>
  }
}
 80032de:	bf00      	nop
 80032e0:	3750      	adds	r7, #80	; 0x50
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40007000 	.word	0x40007000

080032f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <MX_I2C1_Init+0x50>)
 80032f6:	4a13      	ldr	r2, [pc, #76]	; (8003344 <MX_I2C1_Init+0x54>)
 80032f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <MX_I2C1_Init+0x50>)
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <MX_I2C1_Init+0x58>)
 80032fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <MX_I2C1_Init+0x50>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <MX_I2C1_Init+0x50>)
 8003308:	2200      	movs	r2, #0
 800330a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <MX_I2C1_Init+0x50>)
 800330e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <MX_I2C1_Init+0x50>)
 8003316:	2200      	movs	r2, #0
 8003318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <MX_I2C1_Init+0x50>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <MX_I2C1_Init+0x50>)
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <MX_I2C1_Init+0x50>)
 8003328:	2200      	movs	r2, #0
 800332a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800332c:	4804      	ldr	r0, [pc, #16]	; (8003340 <MX_I2C1_Init+0x50>)
 800332e:	f000 fde3 	bl	8003ef8 <HAL_I2C_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003338:	f000 f830 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200001f4 	.word	0x200001f4
 8003344:	40005400 	.word	0x40005400
 8003348:	000186a0 	.word	0x000186a0

0800334c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <MX_GPIO_Init+0x4c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <MX_GPIO_Init+0x4c>)
 800335c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <MX_GPIO_Init+0x4c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <MX_GPIO_Init+0x4c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <MX_GPIO_Init+0x4c>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <MX_GPIO_Init+0x4c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <Error_Handler+0x8>
	...

080033a8 <bme68x_i2c_read>:
extern I2C_HandleTypeDef hi2c1;



BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af04      	add	r7, sp, #16
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4603      	mov	r3, r0
 80033b6:	73fb      	strb	r3, [r7, #15]
    uint8_t device_addr = *(uint8_t*)intf_ptr;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	75fb      	strb	r3, [r7, #23]

    (void)intf_ptr;


    return HAL_I2C_Mem_Read(&hi2c1, (device_addr << 1), reg_addr, 1,
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	b299      	uxth	r1, r3
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033d2:	9002      	str	r0, [sp, #8]
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2301      	movs	r3, #1
 80033dc:	4804      	ldr	r0, [pc, #16]	; (80033f0 <bme68x_i2c_read+0x48>)
 80033de:	f000 ffc9 	bl	8004374 <HAL_I2C_Mem_Read>
 80033e2:	4603      	mov	r3, r0
 80033e4:	b25b      	sxtb	r3, r3
    			reg_data, (uint16_t)len, 500);

}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200001f4 	.word	0x200001f4

080033f4 <bme68x_i2c_write>:



BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const  uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af04      	add	r7, sp, #16
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
    uint8_t device_addr = *(uint8_t*)intf_ptr;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	75fb      	strb	r3, [r7, #23]

    (void)intf_ptr;


    return HAL_I2C_Mem_Write(&hi2c1, (device_addr << 1), reg_addr, 1, (uint8_t*)reg_data, (uint16_t)len,
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	b29b      	uxth	r3, r3
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	b299      	uxth	r1, r3
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f241 3088 	movw	r0, #5000	; 0x1388
 800341e:	9002      	str	r0, [sp, #8]
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2301      	movs	r3, #1
 8003428:	4804      	ldr	r0, [pc, #16]	; (800343c <bme68x_i2c_write+0x48>)
 800342a:	f000 fea9 	bl	8004180 <HAL_I2C_Mem_Write>
 800342e:	4603      	mov	r3, r0
 8003430:	b25b      	sxtb	r3, r3
    			5000);

}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200001f4 	.word	0x200001f4

08003440 <bme68x_delay_us>:


void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    (void)intf_ptr;
    HAL_Delay(period);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fab6 	bl	80039bc <HAL_Delay>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <bme68x_check_rslt>:

void bme68x_check_rslt(const char api_name[], int8_t rslt)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 8003464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003468:	3305      	adds	r3, #5
 800346a:	2b07      	cmp	r3, #7
 800346c:	d842      	bhi.n	80034f4 <bme68x_check_rslt+0x9c>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <bme68x_check_rslt+0x1c>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	080034d5 	.word	0x080034d5
 8003478:	080034b5 	.word	0x080034b5
 800347c:	080034c5 	.word	0x080034c5
 8003480:	080034a5 	.word	0x080034a5
 8003484:	08003495 	.word	0x08003495
 8003488:	08003505 	.word	0x08003505
 800348c:	080034f5 	.word	0x080034f5
 8003490:	080034e5 	.word	0x080034e5
        case BME68X_OK:


            break;
        case BME68X_E_NULL_PTR:
            printf("API name [%s]  Error [%d] : Null pointer\r\n", api_name, rslt);
 8003494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003498:	461a      	mov	r2, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	481c      	ldr	r0, [pc, #112]	; (8003510 <bme68x_check_rslt+0xb8>)
 800349e:	f002 ffe7 	bl	8006470 <iprintf>
            break;
 80034a2:	e030      	b.n	8003506 <bme68x_check_rslt+0xae>
        case BME68X_E_COM_FAIL:
            printf("API name [%s]  Error [%d] : Communication failure\r\n", api_name, rslt);
 80034a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a8:	461a      	mov	r2, r3
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4819      	ldr	r0, [pc, #100]	; (8003514 <bme68x_check_rslt+0xbc>)
 80034ae:	f002 ffdf 	bl	8006470 <iprintf>
            break;
 80034b2:	e028      	b.n	8003506 <bme68x_check_rslt+0xae>
        case BME68X_E_INVALID_LENGTH:
            printf("API name [%s]  Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
 80034b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4816      	ldr	r0, [pc, #88]	; (8003518 <bme68x_check_rslt+0xc0>)
 80034be:	f002 ffd7 	bl	8006470 <iprintf>
            break;
 80034c2:	e020      	b.n	8003506 <bme68x_check_rslt+0xae>
        case BME68X_E_DEV_NOT_FOUND:
            printf("API name [%s]  Error [%d] : Device not found\r\n", api_name, rslt);
 80034c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c8:	461a      	mov	r2, r3
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4813      	ldr	r0, [pc, #76]	; (800351c <bme68x_check_rslt+0xc4>)
 80034ce:	f002 ffcf 	bl	8006470 <iprintf>
            break;
 80034d2:	e018      	b.n	8003506 <bme68x_check_rslt+0xae>
        case BME68X_E_SELF_TEST:
            printf("API name [%s]  Error [%d] : Self test error\r\n", api_name, rslt);
 80034d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d8:	461a      	mov	r2, r3
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4810      	ldr	r0, [pc, #64]	; (8003520 <bme68x_check_rslt+0xc8>)
 80034de:	f002 ffc7 	bl	8006470 <iprintf>
            break;
 80034e2:	e010      	b.n	8003506 <bme68x_check_rslt+0xae>
        case BME68X_W_NO_NEW_DATA:
            printf("API name [%s]  Warning [%d] : No new data found\r\n", api_name, rslt);
 80034e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	480d      	ldr	r0, [pc, #52]	; (8003524 <bme68x_check_rslt+0xcc>)
 80034ee:	f002 ffbf 	bl	8006470 <iprintf>
            break;
 80034f2:	e008      	b.n	8003506 <bme68x_check_rslt+0xae>
        default:
            printf("API name [%s]  Error [%d] : Unknown error code\r\n", api_name, rslt);
 80034f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	480a      	ldr	r0, [pc, #40]	; (8003528 <bme68x_check_rslt+0xd0>)
 80034fe:	f002 ffb7 	bl	8006470 <iprintf>
            break;
 8003502:	e000      	b.n	8003506 <bme68x_check_rslt+0xae>
            break;
 8003504:	bf00      	nop
    }
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	08008628 	.word	0x08008628
 8003514:	08008654 	.word	0x08008654
 8003518:	08008688 	.word	0x08008688
 800351c:	080086c4 	.word	0x080086c4
 8003520:	080086f4 	.word	0x080086f4
 8003524:	08008724 	.word	0x08008724
 8003528:	08008758 	.word	0x08008758

0800352c <bme68x_interface_init>:


int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BME68X_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]




        /* Bus configuration : I2C */
        if (intf == BME68X_I2C_INTF)
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d11b      	bne.n	800357a <bme68x_interface_init+0x4e>
        {
            printf("I2C Interface\n");
 8003542:	4812      	ldr	r0, [pc, #72]	; (800358c <bme68x_interface_init+0x60>)
 8003544:	f002 fffa 	bl	800653c <puts>
            dev_addr = BME68X_I2C_ADDR_HIGH;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <bme68x_interface_init+0x64>)
 800354a:	2277      	movs	r2, #119	; 0x77
 800354c:	701a      	strb	r2, [r3, #0]
            bme->read = bme68x_i2c_read;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a10      	ldr	r2, [pc, #64]	; (8003594 <bme68x_interface_init+0x68>)
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
            bme->write = bme68x_i2c_write;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a10      	ldr	r2, [pc, #64]	; (8003598 <bme68x_interface_init+0x6c>)
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
            bme->intf = BME68X_I2C_INTF;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	731a      	strb	r2, [r3, #12]



        HAL_Delay(100);
 8003560:	2064      	movs	r0, #100	; 0x64
 8003562:	f000 fa2b 	bl	80039bc <HAL_Delay>

        bme->delay_us = bme68x_delay_us;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a0c      	ldr	r2, [pc, #48]	; (800359c <bme68x_interface_init+0x70>)
 800356a:	649a      	str	r2, [r3, #72]	; 0x48
        bme->intf_ptr = &dev_addr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <bme68x_interface_init+0x64>)
 8003570:	605a      	str	r2, [r3, #4]
        bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2219      	movs	r2, #25
 8003576:	739a      	strb	r2, [r3, #14]
 8003578:	e001      	b.n	800357e <bme68x_interface_init+0x52>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800357a:	23ff      	movs	r3, #255	; 0xff
 800357c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	0800878c 	.word	0x0800878c
 8003590:	200002d9 	.word	0x200002d9
 8003594:	080033a9 	.word	0x080033a9
 8003598:	080033f5 	.word	0x080033f5
 800359c:	08003441 	.word	0x08003441

080035a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_MspInit+0x4c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <HAL_MspInit+0x4c>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <HAL_MspInit+0x4c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_MspInit+0x4c>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a08      	ldr	r2, [pc, #32]	; (80035ec <HAL_MspInit+0x4c>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_MspInit+0x4c>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035de:	2007      	movs	r0, #7
 80035e0:	f000 fac2 	bl	8003b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800

080035f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_I2C_MspInit+0x84>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d12b      	bne.n	800366a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_I2C_MspInit+0x88>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800362e:	23c0      	movs	r3, #192	; 0xc0
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003632:	2312      	movs	r3, #18
 8003634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800363e:	2304      	movs	r3, #4
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	480c      	ldr	r0, [pc, #48]	; (800367c <HAL_I2C_MspInit+0x8c>)
 800364a:	f000 fac1 	bl	8003bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_I2C_MspInit+0x88>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800366a:	bf00      	nop
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40005400 	.word	0x40005400
 8003678:	40023800 	.word	0x40023800
 800367c:	40020400 	.word	0x40020400

08003680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <NMI_Handler+0x4>

08003686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <HardFault_Handler+0x4>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <MemManage_Handler+0x4>

08003692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003696:	e7fe      	b.n	8003696 <BusFault_Handler+0x4>

08003698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800369c:	e7fe      	b.n	800369c <UsageFault_Handler+0x4>

0800369e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f000 f956 	bl	800397c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return 1;
 80036d8:	2301      	movs	r3, #1
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_kill>:

int _kill(int pid, int sig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036ee:	f003 f857 	bl	80067a0 <__errno>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2216      	movs	r2, #22
 80036f6:	601a      	str	r2, [r3, #0]
  return -1;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_exit>:

void _exit (int status)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ffe7 	bl	80036e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003716:	e7fe      	b.n	8003716 <_exit+0x12>

08003718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e00a      	b.n	8003740 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800372a:	f3af 8000 	nop.w
 800372e:	4601      	mov	r1, r0
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	60ba      	str	r2, [r7, #8]
 8003736:	b2ca      	uxtb	r2, r1
 8003738:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	dbf0      	blt.n	800372a <_read+0x12>
  }

  return len;
 8003748:	687b      	ldr	r3, [r7, #4]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e009      	b.n	8003778 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	60ba      	str	r2, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	3301      	adds	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	dbf1      	blt.n	8003764 <_write+0x12>

  }
  return len;
 8003780:	687b      	ldr	r3, [r7, #4]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <_close>:

int _close(int file)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b2:	605a      	str	r2, [r3, #4]
  return 0;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_isatty>:

int _isatty(int file)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <_sbrk+0x5c>)
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <_sbrk+0x60>)
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <_sbrk+0x64>)
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <_sbrk+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <_sbrk+0x64>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003824:	f002 ffbc 	bl	80067a0 <__errno>
 8003828:	4603      	mov	r3, r0
 800382a:	220c      	movs	r2, #12
 800382c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	e009      	b.n	8003848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <_sbrk+0x64>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <_sbrk+0x64>)
 8003844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20020000 	.word	0x20020000
 8003854:	00000400 	.word	0x00000400
 8003858:	200002dc 	.word	0x200002dc
 800385c:	20000430 	.word	0x20000430

08003860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <SystemInit+0x20>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	4a05      	ldr	r2, [pc, #20]	; (8003880 <SystemInit+0x20>)
 800386c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003888:	480d      	ldr	r0, [pc, #52]	; (80038c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800388a:	490e      	ldr	r1, [pc, #56]	; (80038c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800388c:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800388e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003890:	e002      	b.n	8003898 <LoopCopyDataInit>

08003892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003896:	3304      	adds	r3, #4

08003898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800389a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800389c:	d3f9      	bcc.n	8003892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800389e:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038a0:	4c0b      	ldr	r4, [pc, #44]	; (80038d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a4:	e001      	b.n	80038aa <LoopFillZerobss>

080038a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a8:	3204      	adds	r2, #4

080038aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038ac:	d3fb      	bcc.n	80038a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038ae:	f7ff ffd7 	bl	8003860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038b2:	f002 ff7b 	bl	80067ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038b6:	f7ff fba5 	bl	8003004 <main>
  bx  lr    
 80038ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80038c8:	08008b34 	.word	0x08008b34
  ldr r2, =_sbss
 80038cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80038d0:	20000430 	.word	0x20000430

080038d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d4:	e7fe      	b.n	80038d4 <ADC_IRQHandler>
	...

080038d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_Init+0x40>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <HAL_Init+0x40>)
 80038e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_Init+0x40>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <HAL_Init+0x40>)
 80038ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_Init+0x40>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a07      	ldr	r2, [pc, #28]	; (8003918 <HAL_Init+0x40>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003900:	2003      	movs	r0, #3
 8003902:	f000 f931 	bl	8003b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003906:	2000      	movs	r0, #0
 8003908:	f000 f808 	bl	800391c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800390c:	f7ff fe48 	bl	80035a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023c00 	.word	0x40023c00

0800391c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_InitTick+0x54>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_InitTick+0x58>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4619      	mov	r1, r3
 800392e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003932:	fbb3 f3f1 	udiv	r3, r3, r1
 8003936:	fbb2 f3f3 	udiv	r3, r2, r3
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f93b 	bl	8003bb6 <HAL_SYSTICK_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e00e      	b.n	8003968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b0f      	cmp	r3, #15
 800394e:	d80a      	bhi.n	8003966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003950:	2200      	movs	r2, #0
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	f000 f911 	bl	8003b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800395c:	4a06      	ldr	r2, [pc, #24]	; (8003978 <HAL_InitTick+0x5c>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000004 	.word	0x20000004
 8003974:	2000000c 	.word	0x2000000c
 8003978:	20000008 	.word	0x20000008

0800397c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_IncTick+0x20>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_IncTick+0x24>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4413      	add	r3, r2
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_IncTick+0x24>)
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	200002e0 	.word	0x200002e0

080039a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return uwTick;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_GetTick+0x14>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	200002e0 	.word	0x200002e0

080039bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c4:	f7ff ffee 	bl	80039a4 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d005      	beq.n	80039e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_Delay+0x44>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039e2:	bf00      	nop
 80039e4:	f7ff ffde 	bl	80039a4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d8f7      	bhi.n	80039e4 <HAL_Delay+0x28>
  {
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000000c 	.word	0x2000000c

08003a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a36:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	60d3      	str	r3, [r2, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <__NVIC_GetPriorityGrouping+0x18>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0307 	and.w	r3, r3, #7
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	db0a      	blt.n	8003a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <__NVIC_SetPriority+0x4c>)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a90:	e00a      	b.n	8003aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <__NVIC_SetPriority+0x50>)
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	3b04      	subs	r3, #4
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	761a      	strb	r2, [r3, #24]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000e100 	.word	0xe000e100
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f1c3 0307 	rsb	r3, r3, #7
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	bf28      	it	cs
 8003ada:	2304      	movcs	r3, #4
 8003adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d902      	bls.n	8003aec <NVIC_EncodePriority+0x30>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3b03      	subs	r3, #3
 8003aea:	e000      	b.n	8003aee <NVIC_EncodePriority+0x32>
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	401a      	ands	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b04:	f04f 31ff 	mov.w	r1, #4294967295
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	43d9      	mvns	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b14:	4313      	orrs	r3, r2
         );
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b34:	d301      	bcc.n	8003b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00f      	b.n	8003b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <SysTick_Config+0x40>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b42:	210f      	movs	r1, #15
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f7ff ff8e 	bl	8003a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <SysTick_Config+0x40>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <SysTick_Config+0x40>)
 8003b54:	2207      	movs	r2, #7
 8003b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	e000e010 	.word	0xe000e010

08003b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff47 	bl	8003a04 <__NVIC_SetPriorityGrouping>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	4603      	mov	r3, r0
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b90:	f7ff ff5c 	bl	8003a4c <__NVIC_GetPriorityGrouping>
 8003b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7ff ff8e 	bl	8003abc <NVIC_EncodePriority>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff5d 	bl	8003a68 <__NVIC_SetPriority>
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ffb0 	bl	8003b24 <SysTick_Config>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	e165      	b.n	8003eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bec:	2201      	movs	r2, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	f040 8154 	bne.w	8003eb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d005      	beq.n	8003c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d130      	bne.n	8003c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c58:	2201      	movs	r2, #1
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 0201 	and.w	r2, r3, #1
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d017      	beq.n	8003cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d123      	bne.n	8003d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	08da      	lsrs	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3208      	adds	r2, #8
 8003cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	220f      	movs	r2, #15
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	08da      	lsrs	r2, r3, #3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3208      	adds	r2, #8
 8003d0e:	69b9      	ldr	r1, [r7, #24]
 8003d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2203      	movs	r2, #3
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0203 	and.w	r2, r3, #3
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80ae 	beq.w	8003eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_GPIO_Init+0x300>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	4a5c      	ldr	r2, [pc, #368]	; (8003ed0 <HAL_GPIO_Init+0x300>)
 8003d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d64:	6453      	str	r3, [r2, #68]	; 0x44
 8003d66:	4b5a      	ldr	r3, [pc, #360]	; (8003ed0 <HAL_GPIO_Init+0x300>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d72:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <HAL_GPIO_Init+0x304>)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	220f      	movs	r2, #15
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4f      	ldr	r2, [pc, #316]	; (8003ed8 <HAL_GPIO_Init+0x308>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d025      	beq.n	8003dea <HAL_GPIO_Init+0x21a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4e      	ldr	r2, [pc, #312]	; (8003edc <HAL_GPIO_Init+0x30c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <HAL_GPIO_Init+0x216>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4d      	ldr	r2, [pc, #308]	; (8003ee0 <HAL_GPIO_Init+0x310>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d019      	beq.n	8003de2 <HAL_GPIO_Init+0x212>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4c      	ldr	r2, [pc, #304]	; (8003ee4 <HAL_GPIO_Init+0x314>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0x20e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4b      	ldr	r2, [pc, #300]	; (8003ee8 <HAL_GPIO_Init+0x318>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_GPIO_Init+0x20a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4a      	ldr	r2, [pc, #296]	; (8003eec <HAL_GPIO_Init+0x31c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <HAL_GPIO_Init+0x206>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a49      	ldr	r2, [pc, #292]	; (8003ef0 <HAL_GPIO_Init+0x320>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GPIO_Init+0x202>
 8003dce:	2306      	movs	r3, #6
 8003dd0:	e00c      	b.n	8003dec <HAL_GPIO_Init+0x21c>
 8003dd2:	2307      	movs	r3, #7
 8003dd4:	e00a      	b.n	8003dec <HAL_GPIO_Init+0x21c>
 8003dd6:	2305      	movs	r3, #5
 8003dd8:	e008      	b.n	8003dec <HAL_GPIO_Init+0x21c>
 8003dda:	2304      	movs	r3, #4
 8003ddc:	e006      	b.n	8003dec <HAL_GPIO_Init+0x21c>
 8003dde:	2303      	movs	r3, #3
 8003de0:	e004      	b.n	8003dec <HAL_GPIO_Init+0x21c>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e002      	b.n	8003dec <HAL_GPIO_Init+0x21c>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_GPIO_Init+0x21c>
 8003dea:	2300      	movs	r3, #0
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	f002 0203 	and.w	r2, r2, #3
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	4093      	lsls	r3, r2
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dfc:	4935      	ldr	r1, [pc, #212]	; (8003ed4 <HAL_GPIO_Init+0x304>)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	089b      	lsrs	r3, r3, #2
 8003e02:	3302      	adds	r3, #2
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e2e:	4a31      	ldr	r2, [pc, #196]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e34:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e5e:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e82:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eac:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	f67f ae96 	bls.w	8003bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40013800 	.word	0x40013800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40020400 	.word	0x40020400
 8003ee0:	40020800 	.word	0x40020800
 8003ee4:	40020c00 	.word	0x40020c00
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40021400 	.word	0x40021400
 8003ef0:	40021800 	.word	0x40021800
 8003ef4:	40013c00 	.word	0x40013c00

08003ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e12b      	b.n	8004162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fb66 	bl	80035f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f001 f87e 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8003f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4a81      	ldr	r2, [pc, #516]	; (800416c <HAL_I2C_Init+0x274>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d807      	bhi.n	8003f7c <HAL_I2C_Init+0x84>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a80      	ldr	r2, [pc, #512]	; (8004170 <HAL_I2C_Init+0x278>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	bf94      	ite	ls
 8003f74:	2301      	movls	r3, #1
 8003f76:	2300      	movhi	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e006      	b.n	8003f8a <HAL_I2C_Init+0x92>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4a7d      	ldr	r2, [pc, #500]	; (8004174 <HAL_I2C_Init+0x27c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	bf94      	ite	ls
 8003f84:	2301      	movls	r3, #1
 8003f86:	2300      	movhi	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0e7      	b.n	8004162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4a78      	ldr	r2, [pc, #480]	; (8004178 <HAL_I2C_Init+0x280>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	0c9b      	lsrs	r3, r3, #18
 8003f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a6a      	ldr	r2, [pc, #424]	; (800416c <HAL_I2C_Init+0x274>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d802      	bhi.n	8003fcc <HAL_I2C_Init+0xd4>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	e009      	b.n	8003fe0 <HAL_I2C_Init+0xe8>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	4a69      	ldr	r2, [pc, #420]	; (800417c <HAL_I2C_Init+0x284>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	3301      	adds	r3, #1
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	495c      	ldr	r1, [pc, #368]	; (800416c <HAL_I2C_Init+0x274>)
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	d819      	bhi.n	8004034 <HAL_I2C_Init+0x13c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1e59      	subs	r1, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fbb1 f3f3 	udiv	r3, r1, r3
 800400e:	1c59      	adds	r1, r3, #1
 8004010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004014:	400b      	ands	r3, r1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_I2C_Init+0x138>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1e59      	subs	r1, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fbb1 f3f3 	udiv	r3, r1, r3
 8004028:	3301      	adds	r3, #1
 800402a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402e:	e051      	b.n	80040d4 <HAL_I2C_Init+0x1dc>
 8004030:	2304      	movs	r3, #4
 8004032:	e04f      	b.n	80040d4 <HAL_I2C_Init+0x1dc>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d111      	bne.n	8004060 <HAL_I2C_Init+0x168>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1e58      	subs	r0, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	440b      	add	r3, r1
 800404a:	fbb0 f3f3 	udiv	r3, r0, r3
 800404e:	3301      	adds	r3, #1
 8004050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e012      	b.n	8004086 <HAL_I2C_Init+0x18e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1e58      	subs	r0, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	0099      	lsls	r1, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	fbb0 f3f3 	udiv	r3, r0, r3
 8004076:	3301      	adds	r3, #1
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Init+0x196>
 800408a:	2301      	movs	r3, #1
 800408c:	e022      	b.n	80040d4 <HAL_I2C_Init+0x1dc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10e      	bne.n	80040b4 <HAL_I2C_Init+0x1bc>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1e58      	subs	r0, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	440b      	add	r3, r1
 80040a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b2:	e00f      	b.n	80040d4 <HAL_I2C_Init+0x1dc>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e58      	subs	r0, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6859      	ldr	r1, [r3, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	0099      	lsls	r1, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ca:	3301      	adds	r3, #1
 80040cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	6809      	ldr	r1, [r1, #0]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6911      	ldr	r1, [r2, #16]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68d2      	ldr	r2, [r2, #12]
 800410e:	4311      	orrs	r1, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	430b      	orrs	r3, r1
 8004116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	000186a0 	.word	0x000186a0
 8004170:	001e847f 	.word	0x001e847f
 8004174:	003d08ff 	.word	0x003d08ff
 8004178:	431bde83 	.word	0x431bde83
 800417c:	10624dd3 	.word	0x10624dd3

08004180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	460b      	mov	r3, r1
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800419a:	f7ff fc03 	bl	80039a4 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	f040 80d9 	bne.w	8004360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2319      	movs	r3, #25
 80041b4:	2201      	movs	r2, #1
 80041b6:	496d      	ldr	r1, [pc, #436]	; (800436c <HAL_I2C_Mem_Write+0x1ec>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fc7f 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	e0cc      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_I2C_Mem_Write+0x56>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e0c5      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d007      	beq.n	80041fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2221      	movs	r2, #33	; 0x21
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2240      	movs	r2, #64	; 0x40
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800422c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a4d      	ldr	r2, [pc, #308]	; (8004370 <HAL_I2C_Mem_Write+0x1f0>)
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800423e:	88f8      	ldrh	r0, [r7, #6]
 8004240:	893a      	ldrh	r2, [r7, #8]
 8004242:	8979      	ldrh	r1, [r7, #10]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4603      	mov	r3, r0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fab6 	bl	80047c0 <I2C_RequestMemoryWrite>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d052      	beq.n	8004300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e081      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fd00 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	2b04      	cmp	r3, #4
 8004274:	d107      	bne.n	8004286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06b      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d11b      	bne.n	8004300 <HAL_I2C_Mem_Write+0x180>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1aa      	bne.n	800425e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fcec 	bl	8004cea <I2C_WaitOnBTFFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	2b04      	cmp	r3, #4
 800431e:	d107      	bne.n	8004330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e016      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	00100002 	.word	0x00100002
 8004370:	ffff0000 	.word	0xffff0000

08004374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800438e:	f7ff fb09 	bl	80039a4 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b20      	cmp	r3, #32
 800439e:	f040 8208 	bne.w	80047b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2319      	movs	r3, #25
 80043a8:	2201      	movs	r2, #1
 80043aa:	497b      	ldr	r1, [pc, #492]	; (8004598 <HAL_I2C_Mem_Read+0x224>)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fb85 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
 80043ba:	e1fb      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Mem_Read+0x56>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e1f4      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d007      	beq.n	80043f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2222      	movs	r2, #34	; 0x22
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a5b      	ldr	r2, [pc, #364]	; (800459c <HAL_I2C_Mem_Read+0x228>)
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004432:	88f8      	ldrh	r0, [r7, #6]
 8004434:	893a      	ldrh	r2, [r7, #8]
 8004436:	8979      	ldrh	r1, [r7, #10]
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	4603      	mov	r3, r0
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fa52 	bl	80048ec <I2C_RequestMemoryRead>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1b0      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d113      	bne.n	8004482 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e184      	b.n	800478c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	2b01      	cmp	r3, #1
 8004488:	d11b      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e164      	b.n	800478c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d11b      	bne.n	8004502 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	e144      	b.n	800478c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004518:	e138      	b.n	800478c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	2b03      	cmp	r3, #3
 8004520:	f200 80f1 	bhi.w	8004706 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b01      	cmp	r3, #1
 800452a:	d123      	bne.n	8004574 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fc1b 	bl	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e139      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004572:	e10b      	b.n	800478c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b02      	cmp	r3, #2
 800457a:	d14e      	bne.n	800461a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	2200      	movs	r2, #0
 8004584:	4906      	ldr	r1, [pc, #24]	; (80045a0 <HAL_I2C_Mem_Read+0x22c>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa98 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e10e      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
 8004596:	bf00      	nop
 8004598:	00100002 	.word	0x00100002
 800459c:	ffff0000 	.word	0xffff0000
 80045a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004618:	e0b8      	b.n	800478c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2200      	movs	r2, #0
 8004622:	4966      	ldr	r1, [pc, #408]	; (80047bc <HAL_I2C_Mem_Read+0x448>)
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fa49 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0bf      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	2200      	movs	r2, #0
 800467e:	494f      	ldr	r1, [pc, #316]	; (80047bc <HAL_I2C_Mem_Read+0x448>)
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fa1b 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e091      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004704:	e042      	b.n	800478c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fb2e 	bl	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e04c      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d118      	bne.n	800478c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	f47f aec2 	bne.w	800451a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e000      	b.n	80047b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047b2:	2302      	movs	r3, #2
  }
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00010004 	.word	0x00010004

080047c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	817b      	strh	r3, [r7, #10]
 80047d2:	460b      	mov	r3, r1
 80047d4:	813b      	strh	r3, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f960 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004810:	d103      	bne.n	800481a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e05f      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800482c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	492d      	ldr	r1, [pc, #180]	; (80048e8 <I2C_RequestMemoryWrite+0x128>)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f998 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e04c      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	6a39      	ldr	r1, [r7, #32]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa02 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00d      	beq.n	8004886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	2b04      	cmp	r3, #4
 8004870:	d107      	bne.n	8004882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e02b      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800488c:	893b      	ldrh	r3, [r7, #8]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]
 8004896:	e021      	b.n	80048dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004898:	893b      	ldrh	r3, [r7, #8]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	b29b      	uxth	r3, r3
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a8:	6a39      	ldr	r1, [r7, #32]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f9dc 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d107      	bne.n	80048ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e005      	b.n	80048de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d2:	893b      	ldrh	r3, [r7, #8]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	00010002 	.word	0x00010002

080048ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	461a      	mov	r2, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	817b      	strh	r3, [r7, #10]
 80048fe:	460b      	mov	r3, r1
 8004900:	813b      	strh	r3, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2200      	movs	r2, #0
 800492e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f8c2 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494c:	d103      	bne.n	8004956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0aa      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	4952      	ldr	r1, [pc, #328]	; (8004ab8 <I2C_RequestMemoryRead+0x1cc>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f8fa 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e097      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f964 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e076      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049c8:	893b      	ldrh	r3, [r7, #8]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]
 80049d2:	e021      	b.n	8004a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	b29b      	uxth	r3, r3
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f93e 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d107      	bne.n	8004a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e050      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0e:	893b      	ldrh	r3, [r7, #8]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	6a39      	ldr	r1, [r7, #32]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f923 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00d      	beq.n	8004a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d107      	bne.n	8004a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e035      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f82b 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7a:	d103      	bne.n	8004a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e013      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a88:	897b      	ldrh	r3, [r7, #10]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <I2C_RequestMemoryRead+0x1cc>)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f863 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	00010002 	.word	0x00010002

08004abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004acc:	e025      	b.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d021      	beq.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fe ff65 	bl	80039a4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d116      	bne.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e023      	b.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10d      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	e00c      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf0c      	ite	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	2300      	movne	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d0b6      	beq.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b78:	e051      	b.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d123      	bne.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0204 	orr.w	r2, r3, #4
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e046      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d021      	beq.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fe fee3 	bl	80039a4 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e020      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10c      	bne.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e00b      	b.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d18d      	bne.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c74:	e02d      	b.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f8ce 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e02d      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d021      	beq.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fe fe89 	bl	80039a4 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d116      	bne.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e007      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d1ca      	bne.n	8004c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cf6:	e02d      	b.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f88d 	bl	8004e18 <I2C_IsAcknowledgeFailed>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e02d      	b.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d021      	beq.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d10:	f7fe fe48 	bl	80039a4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d116      	bne.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e007      	b.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d1ca      	bne.n	8004cf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d78:	e042      	b.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d119      	bne.n	8004dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e029      	b.n	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbc:	f7fe fdf2 	bl	80039a4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d116      	bne.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e007      	b.n	8004e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d1b5      	bne.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d11b      	bne.n	8004e68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	f043 0204 	orr.w	r2, r3, #4
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0cc      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b68      	ldr	r3, [pc, #416]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d90c      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b65      	ldr	r3, [pc, #404]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b63      	ldr	r3, [pc, #396]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0b8      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d020      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ecc:	4b59      	ldr	r3, [pc, #356]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a58      	ldr	r2, [pc, #352]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ee4:	4b53      	ldr	r3, [pc, #332]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef0:	4b50      	ldr	r3, [pc, #320]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	494d      	ldr	r1, [pc, #308]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d044      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d119      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f36:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f46:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e067      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f023 0203 	bic.w	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4934      	ldr	r1, [pc, #208]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f68:	f7fe fd1c 	bl	80039a4 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f70:	f7fe fd18 	bl	80039a4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e04f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f86:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 020c 	and.w	r2, r3, #12
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d1eb      	bne.n	8004f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d20c      	bcs.n	8004fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b22      	ldr	r3, [pc, #136]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fae:	4b20      	ldr	r3, [pc, #128]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e032      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4916      	ldr	r1, [pc, #88]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	490e      	ldr	r1, [pc, #56]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ffe:	f000 f841 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 8005002:	4602      	mov	r2, r0
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	490a      	ldr	r1, [pc, #40]	; (8005038 <HAL_RCC_ClockConfig+0x1c0>)
 8005010:	5ccb      	ldrb	r3, [r1, r3]
 8005012:	fa22 f303 	lsr.w	r3, r2, r3
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fc7c 	bl	800391c <HAL_InitTick>

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40023c00 	.word	0x40023c00
 8005034:	40023800 	.word	0x40023800
 8005038:	0800879c 	.word	0x0800879c
 800503c:	20000004 	.word	0x20000004
 8005040:	20000008 	.word	0x20000008

08005044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <HAL_RCC_GetHCLKFreq+0x14>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000004 	.word	0x20000004

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005060:	f7ff fff0 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0a9b      	lsrs	r3, r3, #10
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40023800 	.word	0x40023800
 8005080:	080087ac 	.word	0x080087ac

08005084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005088:	b0ae      	sub	sp, #184	; 0xb8
 800508a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050aa:	4bcb      	ldr	r3, [pc, #812]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	f200 8206 	bhi.w	80054c4 <HAL_RCC_GetSysClockFreq+0x440>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	080054c5 	.word	0x080054c5
 80050c8:	080054c5 	.word	0x080054c5
 80050cc:	080054c5 	.word	0x080054c5
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	080054c5 	.word	0x080054c5
 80050d8:	080054c5 	.word	0x080054c5
 80050dc:	080054c5 	.word	0x080054c5
 80050e0:	08005105 	.word	0x08005105
 80050e4:	080054c5 	.word	0x080054c5
 80050e8:	080054c5 	.word	0x080054c5
 80050ec:	080054c5 	.word	0x080054c5
 80050f0:	080052f5 	.word	0x080052f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4bb9      	ldr	r3, [pc, #740]	; (80053dc <HAL_RCC_GetSysClockFreq+0x358>)
 80050f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80050fa:	e1e7      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050fc:	4bb8      	ldr	r3, [pc, #736]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80050fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005102:	e1e3      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005104:	4bb4      	ldr	r3, [pc, #720]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005110:	4bb1      	ldr	r3, [pc, #708]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d071      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511c:	4bae      	ldr	r3, [pc, #696]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	099b      	lsrs	r3, r3, #6
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005128:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800512c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800513e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005142:	4622      	mov	r2, r4
 8005144:	462b      	mov	r3, r5
 8005146:	f04f 0000 	mov.w	r0, #0
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	0159      	lsls	r1, r3, #5
 8005150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005154:	0150      	lsls	r0, r2, #5
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4621      	mov	r1, r4
 800515c:	1a51      	subs	r1, r2, r1
 800515e:	6439      	str	r1, [r7, #64]	; 0x40
 8005160:	4629      	mov	r1, r5
 8005162:	eb63 0301 	sbc.w	r3, r3, r1
 8005166:	647b      	str	r3, [r7, #68]	; 0x44
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005174:	4649      	mov	r1, r9
 8005176:	018b      	lsls	r3, r1, #6
 8005178:	4641      	mov	r1, r8
 800517a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800517e:	4641      	mov	r1, r8
 8005180:	018a      	lsls	r2, r1, #6
 8005182:	4641      	mov	r1, r8
 8005184:	1a51      	subs	r1, r2, r1
 8005186:	63b9      	str	r1, [r7, #56]	; 0x38
 8005188:	4649      	mov	r1, r9
 800518a:	eb63 0301 	sbc.w	r3, r3, r1
 800518e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800519c:	4649      	mov	r1, r9
 800519e:	00cb      	lsls	r3, r1, #3
 80051a0:	4641      	mov	r1, r8
 80051a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a6:	4641      	mov	r1, r8
 80051a8:	00ca      	lsls	r2, r1, #3
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	4622      	mov	r2, r4
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30
 80051b6:	462b      	mov	r3, r5
 80051b8:	460a      	mov	r2, r1
 80051ba:	eb42 0303 	adc.w	r3, r2, r3
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051cc:	4629      	mov	r1, r5
 80051ce:	024b      	lsls	r3, r1, #9
 80051d0:	4621      	mov	r1, r4
 80051d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051d6:	4621      	mov	r1, r4
 80051d8:	024a      	lsls	r2, r1, #9
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80051f0:	f7fb fcfa 	bl	8000be8 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4613      	mov	r3, r2
 80051fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051fe:	e067      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005200:	4b75      	ldr	r3, [pc, #468]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800520c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005218:	67bb      	str	r3, [r7, #120]	; 0x78
 800521a:	2300      	movs	r3, #0
 800521c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800521e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	f04f 0000 	mov.w	r0, #0
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	0159      	lsls	r1, r3, #5
 8005230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005234:	0150      	lsls	r0, r2, #5
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4621      	mov	r1, r4
 800523c:	1a51      	subs	r1, r2, r1
 800523e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005240:	4629      	mov	r1, r5
 8005242:	eb63 0301 	sbc.w	r3, r3, r1
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005254:	4649      	mov	r1, r9
 8005256:	018b      	lsls	r3, r1, #6
 8005258:	4641      	mov	r1, r8
 800525a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800525e:	4641      	mov	r1, r8
 8005260:	018a      	lsls	r2, r1, #6
 8005262:	4641      	mov	r1, r8
 8005264:	ebb2 0a01 	subs.w	sl, r2, r1
 8005268:	4649      	mov	r1, r9
 800526a:	eb63 0b01 	sbc.w	fp, r3, r1
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800527a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800527e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005282:	4692      	mov	sl, r2
 8005284:	469b      	mov	fp, r3
 8005286:	4623      	mov	r3, r4
 8005288:	eb1a 0303 	adds.w	r3, sl, r3
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	462b      	mov	r3, r5
 8005290:	eb4b 0303 	adc.w	r3, fp, r3
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80052a2:	4629      	mov	r1, r5
 80052a4:	028b      	lsls	r3, r1, #10
 80052a6:	4621      	mov	r1, r4
 80052a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052ac:	4621      	mov	r1, r4
 80052ae:	028a      	lsls	r2, r1, #10
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052b8:	2200      	movs	r2, #0
 80052ba:	673b      	str	r3, [r7, #112]	; 0x70
 80052bc:	677a      	str	r2, [r7, #116]	; 0x74
 80052be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80052c2:	f7fb fc91 	bl	8000be8 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4613      	mov	r3, r2
 80052cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052d0:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	3301      	adds	r3, #1
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80052e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80052f2:	e0eb      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f4:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005300:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d06b      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530c:	4b32      	ldr	r3, [pc, #200]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	2200      	movs	r2, #0
 8005314:	66bb      	str	r3, [r7, #104]	; 0x68
 8005316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	663b      	str	r3, [r7, #96]	; 0x60
 8005320:	2300      	movs	r3, #0
 8005322:	667b      	str	r3, [r7, #100]	; 0x64
 8005324:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	f04f 0000 	mov.w	r0, #0
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	0159      	lsls	r1, r3, #5
 8005336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800533a:	0150      	lsls	r0, r2, #5
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4621      	mov	r1, r4
 8005342:	1a51      	subs	r1, r2, r1
 8005344:	61b9      	str	r1, [r7, #24]
 8005346:	4629      	mov	r1, r5
 8005348:	eb63 0301 	sbc.w	r3, r3, r1
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800535a:	4659      	mov	r1, fp
 800535c:	018b      	lsls	r3, r1, #6
 800535e:	4651      	mov	r1, sl
 8005360:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005364:	4651      	mov	r1, sl
 8005366:	018a      	lsls	r2, r1, #6
 8005368:	4651      	mov	r1, sl
 800536a:	ebb2 0801 	subs.w	r8, r2, r1
 800536e:	4659      	mov	r1, fp
 8005370:	eb63 0901 	sbc.w	r9, r3, r1
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005380:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005384:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005388:	4690      	mov	r8, r2
 800538a:	4699      	mov	r9, r3
 800538c:	4623      	mov	r3, r4
 800538e:	eb18 0303 	adds.w	r3, r8, r3
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	462b      	mov	r3, r5
 8005396:	eb49 0303 	adc.w	r3, r9, r3
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80053a8:	4629      	mov	r1, r5
 80053aa:	024b      	lsls	r3, r1, #9
 80053ac:	4621      	mov	r1, r4
 80053ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053b2:	4621      	mov	r1, r4
 80053b4:	024a      	lsls	r2, r1, #9
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053be:	2200      	movs	r2, #0
 80053c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80053c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053c8:	f7fb fc0e 	bl	8000be8 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053d6:	e065      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x420>
 80053d8:	40023800 	.word	0x40023800
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e4:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <HAL_RCC_GetSysClockFreq+0x458>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	099b      	lsrs	r3, r3, #6
 80053ea:	2200      	movs	r2, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	4611      	mov	r1, r2
 80053f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053f4:	653b      	str	r3, [r7, #80]	; 0x50
 80053f6:	2300      	movs	r3, #0
 80053f8:	657b      	str	r3, [r7, #84]	; 0x54
 80053fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80053fe:	4642      	mov	r2, r8
 8005400:	464b      	mov	r3, r9
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	0159      	lsls	r1, r3, #5
 800540c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005410:	0150      	lsls	r0, r2, #5
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4641      	mov	r1, r8
 8005418:	1a51      	subs	r1, r2, r1
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	4649      	mov	r1, r9
 800541e:	eb63 0301 	sbc.w	r3, r3, r1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005430:	4659      	mov	r1, fp
 8005432:	018b      	lsls	r3, r1, #6
 8005434:	4651      	mov	r1, sl
 8005436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800543a:	4651      	mov	r1, sl
 800543c:	018a      	lsls	r2, r1, #6
 800543e:	4651      	mov	r1, sl
 8005440:	1a54      	subs	r4, r2, r1
 8005442:	4659      	mov	r1, fp
 8005444:	eb63 0501 	sbc.w	r5, r3, r1
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	00eb      	lsls	r3, r5, #3
 8005452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005456:	00e2      	lsls	r2, r4, #3
 8005458:	4614      	mov	r4, r2
 800545a:	461d      	mov	r5, r3
 800545c:	4643      	mov	r3, r8
 800545e:	18e3      	adds	r3, r4, r3
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	464b      	mov	r3, r9
 8005464:	eb45 0303 	adc.w	r3, r5, r3
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005476:	4629      	mov	r1, r5
 8005478:	028b      	lsls	r3, r1, #10
 800547a:	4621      	mov	r1, r4
 800547c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005480:	4621      	mov	r1, r4
 8005482:	028a      	lsls	r2, r1, #10
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800548c:	2200      	movs	r2, #0
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005490:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005492:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005496:	f7fb fba7 	bl	8000be8 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4613      	mov	r3, r2
 80054a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80054a4:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <HAL_RCC_GetSysClockFreq+0x458>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	0f1b      	lsrs	r3, r3, #28
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80054b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80054c2:	e003      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80054c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80054ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	37b8      	adds	r7, #184	; 0xb8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800
 80054e0:	00f42400 	.word	0x00f42400

080054e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e28d      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 8083 	beq.w	800560a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005504:	4b94      	ldr	r3, [pc, #592]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b04      	cmp	r3, #4
 800550e:	d019      	beq.n	8005544 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005510:	4b91      	ldr	r3, [pc, #580]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005518:	2b08      	cmp	r3, #8
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800551c:	4b8e      	ldr	r3, [pc, #568]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005528:	d00c      	beq.n	8005544 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552a:	4b8b      	ldr	r3, [pc, #556]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005532:	2b0c      	cmp	r3, #12
 8005534:	d112      	bne.n	800555c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005536:	4b88      	ldr	r3, [pc, #544]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005542:	d10b      	bne.n	800555c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005544:	4b84      	ldr	r3, [pc, #528]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d05b      	beq.n	8005608 <HAL_RCC_OscConfig+0x124>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d157      	bne.n	8005608 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e25a      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005564:	d106      	bne.n	8005574 <HAL_RCC_OscConfig+0x90>
 8005566:	4b7c      	ldr	r3, [pc, #496]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a7b      	ldr	r2, [pc, #492]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e01d      	b.n	80055b0 <HAL_RCC_OscConfig+0xcc>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800557c:	d10c      	bne.n	8005598 <HAL_RCC_OscConfig+0xb4>
 800557e:	4b76      	ldr	r3, [pc, #472]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a75      	ldr	r2, [pc, #468]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	4b73      	ldr	r3, [pc, #460]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a72      	ldr	r2, [pc, #456]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e00b      	b.n	80055b0 <HAL_RCC_OscConfig+0xcc>
 8005598:	4b6f      	ldr	r3, [pc, #444]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a6e      	ldr	r2, [pc, #440]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800559e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	4b6c      	ldr	r3, [pc, #432]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a6b      	ldr	r2, [pc, #428]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80055aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d013      	beq.n	80055e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fe f9f4 	bl	80039a4 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055c0:	f7fe f9f0 	bl	80039a4 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e21f      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	4b61      	ldr	r3, [pc, #388]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0xdc>
 80055de:	e014      	b.n	800560a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fe f9e0 	bl	80039a4 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055e8:	f7fe f9dc 	bl	80039a4 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	; 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e20b      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fa:	4b57      	ldr	r3, [pc, #348]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCC_OscConfig+0x104>
 8005606:	e000      	b.n	800560a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06f      	beq.n	80056f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005616:	4b50      	ldr	r3, [pc, #320]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b00      	cmp	r3, #0
 8005620:	d017      	beq.n	8005652 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005622:	4b4d      	ldr	r3, [pc, #308]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800562a:	2b08      	cmp	r3, #8
 800562c:	d105      	bne.n	800563a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563a:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005642:	2b0c      	cmp	r3, #12
 8005644:	d11c      	bne.n	8005680 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005646:	4b44      	ldr	r3, [pc, #272]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d116      	bne.n	8005680 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005652:	4b41      	ldr	r3, [pc, #260]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_RCC_OscConfig+0x186>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e1d3      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4937      	ldr	r1, [pc, #220]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567e:	e03a      	b.n	80056f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d020      	beq.n	80056ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005688:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_RCC_OscConfig+0x278>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568e:	f7fe f989 	bl	80039a4 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005696:	f7fe f985 	bl	80039a4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e1b4      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	4b28      	ldr	r3, [pc, #160]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4925      	ldr	r1, [pc, #148]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
 80056c8:	e015      	b.n	80056f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ca:	4b24      	ldr	r3, [pc, #144]	; (800575c <HAL_RCC_OscConfig+0x278>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fe f968 	bl	80039a4 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d8:	f7fe f964 	bl	80039a4 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e193      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d036      	beq.n	8005770 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_RCC_OscConfig+0x27c>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fe f948 	bl	80039a4 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005718:	f7fe f944 	bl	80039a4 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e173      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_RCC_OscConfig+0x274>)
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x234>
 8005736:	e01b      	b.n	8005770 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <HAL_RCC_OscConfig+0x27c>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573e:	f7fe f931 	bl	80039a4 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005744:	e00e      	b.n	8005764 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005746:	f7fe f92d 	bl	80039a4 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d907      	bls.n	8005764 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e15c      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
 8005758:	40023800 	.word	0x40023800
 800575c:	42470000 	.word	0x42470000
 8005760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005764:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ea      	bne.n	8005746 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8097 	beq.w	80058ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005782:	4b83      	ldr	r3, [pc, #524]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	4b7f      	ldr	r3, [pc, #508]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a7e      	ldr	r2, [pc, #504]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
 800579e:	4b7c      	ldr	r3, [pc, #496]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ae:	4b79      	ldr	r3, [pc, #484]	; (8005994 <HAL_RCC_OscConfig+0x4b0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d118      	bne.n	80057ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ba:	4b76      	ldr	r3, [pc, #472]	; (8005994 <HAL_RCC_OscConfig+0x4b0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a75      	ldr	r2, [pc, #468]	; (8005994 <HAL_RCC_OscConfig+0x4b0>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c6:	f7fe f8ed 	bl	80039a4 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ce:	f7fe f8e9 	bl	80039a4 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e118      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	4b6c      	ldr	r3, [pc, #432]	; (8005994 <HAL_RCC_OscConfig+0x4b0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d106      	bne.n	8005802 <HAL_RCC_OscConfig+0x31e>
 80057f4:	4b66      	ldr	r3, [pc, #408]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a65      	ldr	r2, [pc, #404]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	e01c      	b.n	800583c <HAL_RCC_OscConfig+0x358>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b05      	cmp	r3, #5
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0x340>
 800580a:	4b61      	ldr	r3, [pc, #388]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a60      	ldr	r2, [pc, #384]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	4b5e      	ldr	r3, [pc, #376]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	4a5d      	ldr	r2, [pc, #372]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
 8005822:	e00b      	b.n	800583c <HAL_RCC_OscConfig+0x358>
 8005824:	4b5a      	ldr	r3, [pc, #360]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a59      	ldr	r2, [pc, #356]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
 8005830:	4b57      	ldr	r3, [pc, #348]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a56      	ldr	r2, [pc, #344]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005836:	f023 0304 	bic.w	r3, r3, #4
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fe f8ae 	bl	80039a4 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584c:	f7fe f8aa 	bl	80039a4 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e0d7      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005862:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0ee      	beq.n	800584c <HAL_RCC_OscConfig+0x368>
 800586e:	e014      	b.n	800589a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005870:	f7fe f898 	bl	80039a4 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005876:	e00a      	b.n	800588e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7fe f894 	bl	80039a4 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0c1      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588e:	4b40      	ldr	r3, [pc, #256]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1ee      	bne.n	8005878 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d105      	bne.n	80058ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a0:	4b3b      	ldr	r3, [pc, #236]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	4a3a      	ldr	r2, [pc, #232]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 80058a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80ad 	beq.w	8005a10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b6:	4b36      	ldr	r3, [pc, #216]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d060      	beq.n	8005984 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d145      	bne.n	8005956 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ca:	4b33      	ldr	r3, [pc, #204]	; (8005998 <HAL_RCC_OscConfig+0x4b4>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fe f868 	bl	80039a4 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fe f864 	bl	80039a4 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e093      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ea:	4b29      	ldr	r3, [pc, #164]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	3b01      	subs	r3, #1
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	071b      	lsls	r3, r3, #28
 8005922:	491b      	ldr	r1, [pc, #108]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <HAL_RCC_OscConfig+0x4b4>)
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592e:	f7fe f839 	bl	80039a4 <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005936:	f7fe f835 	bl	80039a4 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e064      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005948:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCC_OscConfig+0x452>
 8005954:	e05c      	b.n	8005a10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <HAL_RCC_OscConfig+0x4b4>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fe f822 	bl	80039a4 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005964:	f7fe f81e 	bl	80039a4 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e04d      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_RCC_OscConfig+0x4ac>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x480>
 8005982:	e045      	b.n	8005a10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e040      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
 8005990:	40023800 	.word	0x40023800
 8005994:	40007000 	.word	0x40007000
 8005998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <HAL_RCC_OscConfig+0x538>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d030      	beq.n	8005a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d129      	bne.n	8005a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d122      	bne.n	8005a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d119      	bne.n	8005a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	085b      	lsrs	r3, r3, #1
 80059e4:	3b01      	subs	r3, #1
 80059e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d10f      	bne.n	8005a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d107      	bne.n	8005a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023800 	.word	0x40023800

08005a20 <__cvt>:
 8005a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	ec55 4b10 	vmov	r4, r5, d0
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	460e      	mov	r6, r1
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	462b      	mov	r3, r5
 8005a30:	bfbb      	ittet	lt
 8005a32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a36:	461d      	movlt	r5, r3
 8005a38:	2300      	movge	r3, #0
 8005a3a:	232d      	movlt	r3, #45	; 0x2d
 8005a3c:	700b      	strb	r3, [r1, #0]
 8005a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a44:	4691      	mov	r9, r2
 8005a46:	f023 0820 	bic.w	r8, r3, #32
 8005a4a:	bfbc      	itt	lt
 8005a4c:	4622      	movlt	r2, r4
 8005a4e:	4614      	movlt	r4, r2
 8005a50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a54:	d005      	beq.n	8005a62 <__cvt+0x42>
 8005a56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a5a:	d100      	bne.n	8005a5e <__cvt+0x3e>
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	2102      	movs	r1, #2
 8005a60:	e000      	b.n	8005a64 <__cvt+0x44>
 8005a62:	2103      	movs	r1, #3
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	ab02      	add	r3, sp, #8
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	ec45 4b10 	vmov	d0, r4, r5
 8005a70:	4653      	mov	r3, sl
 8005a72:	4632      	mov	r2, r6
 8005a74:	f000 ff4c 	bl	8006910 <_dtoa_r>
 8005a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	d102      	bne.n	8005a86 <__cvt+0x66>
 8005a80:	f019 0f01 	tst.w	r9, #1
 8005a84:	d022      	beq.n	8005acc <__cvt+0xac>
 8005a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a8a:	eb07 0906 	add.w	r9, r7, r6
 8005a8e:	d110      	bne.n	8005ab2 <__cvt+0x92>
 8005a90:	783b      	ldrb	r3, [r7, #0]
 8005a92:	2b30      	cmp	r3, #48	; 0x30
 8005a94:	d10a      	bne.n	8005aac <__cvt+0x8c>
 8005a96:	2200      	movs	r2, #0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f7fb f833 	bl	8000b08 <__aeabi_dcmpeq>
 8005aa2:	b918      	cbnz	r0, 8005aac <__cvt+0x8c>
 8005aa4:	f1c6 0601 	rsb	r6, r6, #1
 8005aa8:	f8ca 6000 	str.w	r6, [sl]
 8005aac:	f8da 3000 	ldr.w	r3, [sl]
 8005ab0:	4499      	add	r9, r3
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fb f825 	bl	8000b08 <__aeabi_dcmpeq>
 8005abe:	b108      	cbz	r0, 8005ac4 <__cvt+0xa4>
 8005ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ac4:	2230      	movs	r2, #48	; 0x30
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	454b      	cmp	r3, r9
 8005aca:	d307      	bcc.n	8005adc <__cvt+0xbc>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad0:	1bdb      	subs	r3, r3, r7
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	b004      	add	sp, #16
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	9103      	str	r1, [sp, #12]
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e7f0      	b.n	8005ac6 <__cvt+0xa6>

08005ae4 <__exponent>:
 8005ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	bfb8      	it	lt
 8005aec:	4249      	neglt	r1, r1
 8005aee:	f803 2b02 	strb.w	r2, [r3], #2
 8005af2:	bfb4      	ite	lt
 8005af4:	222d      	movlt	r2, #45	; 0x2d
 8005af6:	222b      	movge	r2, #43	; 0x2b
 8005af8:	2909      	cmp	r1, #9
 8005afa:	7042      	strb	r2, [r0, #1]
 8005afc:	dd2a      	ble.n	8005b54 <__exponent+0x70>
 8005afe:	f10d 0207 	add.w	r2, sp, #7
 8005b02:	4617      	mov	r7, r2
 8005b04:	260a      	movs	r6, #10
 8005b06:	4694      	mov	ip, r2
 8005b08:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b0c:	fb06 1415 	mls	r4, r6, r5, r1
 8005b10:	3430      	adds	r4, #48	; 0x30
 8005b12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b16:	460c      	mov	r4, r1
 8005b18:	2c63      	cmp	r4, #99	; 0x63
 8005b1a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b1e:	4629      	mov	r1, r5
 8005b20:	dcf1      	bgt.n	8005b06 <__exponent+0x22>
 8005b22:	3130      	adds	r1, #48	; 0x30
 8005b24:	f1ac 0402 	sub.w	r4, ip, #2
 8005b28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b2c:	1c41      	adds	r1, r0, #1
 8005b2e:	4622      	mov	r2, r4
 8005b30:	42ba      	cmp	r2, r7
 8005b32:	d30a      	bcc.n	8005b4a <__exponent+0x66>
 8005b34:	f10d 0209 	add.w	r2, sp, #9
 8005b38:	eba2 020c 	sub.w	r2, r2, ip
 8005b3c:	42bc      	cmp	r4, r7
 8005b3e:	bf88      	it	hi
 8005b40:	2200      	movhi	r2, #0
 8005b42:	4413      	add	r3, r2
 8005b44:	1a18      	subs	r0, r3, r0
 8005b46:	b003      	add	sp, #12
 8005b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005b52:	e7ed      	b.n	8005b30 <__exponent+0x4c>
 8005b54:	2330      	movs	r3, #48	; 0x30
 8005b56:	3130      	adds	r1, #48	; 0x30
 8005b58:	7083      	strb	r3, [r0, #2]
 8005b5a:	70c1      	strb	r1, [r0, #3]
 8005b5c:	1d03      	adds	r3, r0, #4
 8005b5e:	e7f1      	b.n	8005b44 <__exponent+0x60>

08005b60 <_printf_float>:
 8005b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	ed2d 8b02 	vpush	{d8}
 8005b68:	b08d      	sub	sp, #52	; 0x34
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b70:	4616      	mov	r6, r2
 8005b72:	461f      	mov	r7, r3
 8005b74:	4605      	mov	r5, r0
 8005b76:	f000 fdc9 	bl	800670c <_localeconv_r>
 8005b7a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b7e:	4650      	mov	r0, sl
 8005b80:	f7fa fb96 	bl	80002b0 <strlen>
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	; 0x28
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b94:	3307      	adds	r3, #7
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	f103 0208 	add.w	r2, r3, #8
 8005b9e:	f8c8 2000 	str.w	r2, [r8]
 8005ba2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bb0:	ee08 0a10 	vmov	s16, r0
 8005bb4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bbc:	4b9e      	ldr	r3, [pc, #632]	; (8005e38 <_printf_float+0x2d8>)
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	f7fa ffd3 	bl	8000b6c <__aeabi_dcmpun>
 8005bc6:	bb88      	cbnz	r0, 8005c2c <_printf_float+0xcc>
 8005bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bcc:	4b9a      	ldr	r3, [pc, #616]	; (8005e38 <_printf_float+0x2d8>)
 8005bce:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd2:	f7fa ffad 	bl	8000b30 <__aeabi_dcmple>
 8005bd6:	bb48      	cbnz	r0, 8005c2c <_printf_float+0xcc>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4640      	mov	r0, r8
 8005bde:	4649      	mov	r1, r9
 8005be0:	f7fa ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8005be4:	b110      	cbz	r0, 8005bec <_printf_float+0x8c>
 8005be6:	232d      	movs	r3, #45	; 0x2d
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	4a93      	ldr	r2, [pc, #588]	; (8005e3c <_printf_float+0x2dc>)
 8005bee:	4b94      	ldr	r3, [pc, #592]	; (8005e40 <_printf_float+0x2e0>)
 8005bf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bf4:	bf94      	ite	ls
 8005bf6:	4690      	movls	r8, r2
 8005bf8:	4698      	movhi	r8, r3
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	9b05      	ldr	r3, [sp, #20]
 8005c00:	f023 0304 	bic.w	r3, r3, #4
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	f04f 0900 	mov.w	r9, #0
 8005c0a:	9700      	str	r7, [sp, #0]
 8005c0c:	4633      	mov	r3, r6
 8005c0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f9da 	bl	8005fcc <_printf_common>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f040 8090 	bne.w	8005d3e <_printf_float+0x1de>
 8005c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c22:	b00d      	add	sp, #52	; 0x34
 8005c24:	ecbd 8b02 	vpop	{d8}
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	464b      	mov	r3, r9
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f7fa ff9a 	bl	8000b6c <__aeabi_dcmpun>
 8005c38:	b140      	cbz	r0, 8005c4c <_printf_float+0xec>
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bfbc      	itt	lt
 8005c40:	232d      	movlt	r3, #45	; 0x2d
 8005c42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c46:	4a7f      	ldr	r2, [pc, #508]	; (8005e44 <_printf_float+0x2e4>)
 8005c48:	4b7f      	ldr	r3, [pc, #508]	; (8005e48 <_printf_float+0x2e8>)
 8005c4a:	e7d1      	b.n	8005bf0 <_printf_float+0x90>
 8005c4c:	6863      	ldr	r3, [r4, #4]
 8005c4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c52:	9206      	str	r2, [sp, #24]
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	d13f      	bne.n	8005cd8 <_printf_float+0x178>
 8005c58:	2306      	movs	r3, #6
 8005c5a:	6063      	str	r3, [r4, #4]
 8005c5c:	9b05      	ldr	r3, [sp, #20]
 8005c5e:	6861      	ldr	r1, [r4, #4]
 8005c60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c64:	2300      	movs	r3, #0
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	ab0a      	add	r3, sp, #40	; 0x28
 8005c6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c6e:	ab09      	add	r3, sp, #36	; 0x24
 8005c70:	ec49 8b10 	vmov	d0, r8, r9
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	6022      	str	r2, [r4, #0]
 8005c78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff fecf 	bl	8005a20 <__cvt>
 8005c82:	9b06      	ldr	r3, [sp, #24]
 8005c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c86:	2b47      	cmp	r3, #71	; 0x47
 8005c88:	4680      	mov	r8, r0
 8005c8a:	d108      	bne.n	8005c9e <_printf_float+0x13e>
 8005c8c:	1cc8      	adds	r0, r1, #3
 8005c8e:	db02      	blt.n	8005c96 <_printf_float+0x136>
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	4299      	cmp	r1, r3
 8005c94:	dd41      	ble.n	8005d1a <_printf_float+0x1ba>
 8005c96:	f1ab 0302 	sub.w	r3, fp, #2
 8005c9a:	fa5f fb83 	uxtb.w	fp, r3
 8005c9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ca2:	d820      	bhi.n	8005ce6 <_printf_float+0x186>
 8005ca4:	3901      	subs	r1, #1
 8005ca6:	465a      	mov	r2, fp
 8005ca8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cac:	9109      	str	r1, [sp, #36]	; 0x24
 8005cae:	f7ff ff19 	bl	8005ae4 <__exponent>
 8005cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cb4:	1813      	adds	r3, r2, r0
 8005cb6:	2a01      	cmp	r2, #1
 8005cb8:	4681      	mov	r9, r0
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	dc02      	bgt.n	8005cc4 <_printf_float+0x164>
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	07d2      	lsls	r2, r2, #31
 8005cc2:	d501      	bpl.n	8005cc8 <_printf_float+0x168>
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d09c      	beq.n	8005c0a <_printf_float+0xaa>
 8005cd0:	232d      	movs	r3, #45	; 0x2d
 8005cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd6:	e798      	b.n	8005c0a <_printf_float+0xaa>
 8005cd8:	9a06      	ldr	r2, [sp, #24]
 8005cda:	2a47      	cmp	r2, #71	; 0x47
 8005cdc:	d1be      	bne.n	8005c5c <_printf_float+0xfc>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1bc      	bne.n	8005c5c <_printf_float+0xfc>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e7b9      	b.n	8005c5a <_printf_float+0xfa>
 8005ce6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cea:	d118      	bne.n	8005d1e <_printf_float+0x1be>
 8005cec:	2900      	cmp	r1, #0
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	dd0b      	ble.n	8005d0a <_printf_float+0x1aa>
 8005cf2:	6121      	str	r1, [r4, #16]
 8005cf4:	b913      	cbnz	r3, 8005cfc <_printf_float+0x19c>
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	07d0      	lsls	r0, r2, #31
 8005cfa:	d502      	bpl.n	8005d02 <_printf_float+0x1a2>
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	440b      	add	r3, r1
 8005d00:	6123      	str	r3, [r4, #16]
 8005d02:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d04:	f04f 0900 	mov.w	r9, #0
 8005d08:	e7de      	b.n	8005cc8 <_printf_float+0x168>
 8005d0a:	b913      	cbnz	r3, 8005d12 <_printf_float+0x1b2>
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	07d2      	lsls	r2, r2, #31
 8005d10:	d501      	bpl.n	8005d16 <_printf_float+0x1b6>
 8005d12:	3302      	adds	r3, #2
 8005d14:	e7f4      	b.n	8005d00 <_printf_float+0x1a0>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e7f2      	b.n	8005d00 <_printf_float+0x1a0>
 8005d1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d20:	4299      	cmp	r1, r3
 8005d22:	db05      	blt.n	8005d30 <_printf_float+0x1d0>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	6121      	str	r1, [r4, #16]
 8005d28:	07d8      	lsls	r0, r3, #31
 8005d2a:	d5ea      	bpl.n	8005d02 <_printf_float+0x1a2>
 8005d2c:	1c4b      	adds	r3, r1, #1
 8005d2e:	e7e7      	b.n	8005d00 <_printf_float+0x1a0>
 8005d30:	2900      	cmp	r1, #0
 8005d32:	bfd4      	ite	le
 8005d34:	f1c1 0202 	rsble	r2, r1, #2
 8005d38:	2201      	movgt	r2, #1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	e7e0      	b.n	8005d00 <_printf_float+0x1a0>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	055a      	lsls	r2, r3, #21
 8005d42:	d407      	bmi.n	8005d54 <_printf_float+0x1f4>
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	4642      	mov	r2, r8
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d12c      	bne.n	8005dac <_printf_float+0x24c>
 8005d52:	e764      	b.n	8005c1e <_printf_float+0xbe>
 8005d54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d58:	f240 80e0 	bls.w	8005f1c <_printf_float+0x3bc>
 8005d5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d60:	2200      	movs	r2, #0
 8005d62:	2300      	movs	r3, #0
 8005d64:	f7fa fed0 	bl	8000b08 <__aeabi_dcmpeq>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d034      	beq.n	8005dd6 <_printf_float+0x276>
 8005d6c:	4a37      	ldr	r2, [pc, #220]	; (8005e4c <_printf_float+0x2ec>)
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f af51 	beq.w	8005c1e <_printf_float+0xbe>
 8005d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d80:	429a      	cmp	r2, r3
 8005d82:	db02      	blt.n	8005d8a <_printf_float+0x22a>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	07d8      	lsls	r0, r3, #31
 8005d88:	d510      	bpl.n	8005dac <_printf_float+0x24c>
 8005d8a:	ee18 3a10 	vmov	r3, s16
 8005d8e:	4652      	mov	r2, sl
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f af41 	beq.w	8005c1e <_printf_float+0xbe>
 8005d9c:	f04f 0800 	mov.w	r8, #0
 8005da0:	f104 091a 	add.w	r9, r4, #26
 8005da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	4543      	cmp	r3, r8
 8005daa:	dc09      	bgt.n	8005dc0 <_printf_float+0x260>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	079b      	lsls	r3, r3, #30
 8005db0:	f100 8107 	bmi.w	8005fc2 <_printf_float+0x462>
 8005db4:	68e0      	ldr	r0, [r4, #12]
 8005db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005db8:	4298      	cmp	r0, r3
 8005dba:	bfb8      	it	lt
 8005dbc:	4618      	movlt	r0, r3
 8005dbe:	e730      	b.n	8005c22 <_printf_float+0xc2>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	464a      	mov	r2, r9
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af27 	beq.w	8005c1e <_printf_float+0xbe>
 8005dd0:	f108 0801 	add.w	r8, r8, #1
 8005dd4:	e7e6      	b.n	8005da4 <_printf_float+0x244>
 8005dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dc39      	bgt.n	8005e50 <_printf_float+0x2f0>
 8005ddc:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <_printf_float+0x2ec>)
 8005dde:	2301      	movs	r3, #1
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f af19 	beq.w	8005c1e <_printf_float+0xbe>
 8005dec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d102      	bne.n	8005dfa <_printf_float+0x29a>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07d9      	lsls	r1, r3, #31
 8005df8:	d5d8      	bpl.n	8005dac <_printf_float+0x24c>
 8005dfa:	ee18 3a10 	vmov	r3, s16
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f af09 	beq.w	8005c1e <_printf_float+0xbe>
 8005e0c:	f04f 0900 	mov.w	r9, #0
 8005e10:	f104 0a1a 	add.w	sl, r4, #26
 8005e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e16:	425b      	negs	r3, r3
 8005e18:	454b      	cmp	r3, r9
 8005e1a:	dc01      	bgt.n	8005e20 <_printf_float+0x2c0>
 8005e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e1e:	e792      	b.n	8005d46 <_printf_float+0x1e6>
 8005e20:	2301      	movs	r3, #1
 8005e22:	4652      	mov	r2, sl
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f aef7 	beq.w	8005c1e <_printf_float+0xbe>
 8005e30:	f109 0901 	add.w	r9, r9, #1
 8005e34:	e7ee      	b.n	8005e14 <_printf_float+0x2b4>
 8005e36:	bf00      	nop
 8005e38:	7fefffff 	.word	0x7fefffff
 8005e3c:	080087b4 	.word	0x080087b4
 8005e40:	080087b8 	.word	0x080087b8
 8005e44:	080087bc 	.word	0x080087bc
 8005e48:	080087c0 	.word	0x080087c0
 8005e4c:	080087c4 	.word	0x080087c4
 8005e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e54:	429a      	cmp	r2, r3
 8005e56:	bfa8      	it	ge
 8005e58:	461a      	movge	r2, r3
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	4691      	mov	r9, r2
 8005e5e:	dc37      	bgt.n	8005ed0 <_printf_float+0x370>
 8005e60:	f04f 0b00 	mov.w	fp, #0
 8005e64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e68:	f104 021a 	add.w	r2, r4, #26
 8005e6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	eba3 0309 	sub.w	r3, r3, r9
 8005e74:	455b      	cmp	r3, fp
 8005e76:	dc33      	bgt.n	8005ee0 <_printf_float+0x380>
 8005e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	db3b      	blt.n	8005ef8 <_printf_float+0x398>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	07da      	lsls	r2, r3, #31
 8005e84:	d438      	bmi.n	8005ef8 <_printf_float+0x398>
 8005e86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e8a:	eba2 0903 	sub.w	r9, r2, r3
 8005e8e:	9b05      	ldr	r3, [sp, #20]
 8005e90:	1ad2      	subs	r2, r2, r3
 8005e92:	4591      	cmp	r9, r2
 8005e94:	bfa8      	it	ge
 8005e96:	4691      	movge	r9, r2
 8005e98:	f1b9 0f00 	cmp.w	r9, #0
 8005e9c:	dc35      	bgt.n	8005f0a <_printf_float+0x3aa>
 8005e9e:	f04f 0800 	mov.w	r8, #0
 8005ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ea6:	f104 0a1a 	add.w	sl, r4, #26
 8005eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	eba3 0309 	sub.w	r3, r3, r9
 8005eb4:	4543      	cmp	r3, r8
 8005eb6:	f77f af79 	ble.w	8005dac <_printf_float+0x24c>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4652      	mov	r2, sl
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f aeaa 	beq.w	8005c1e <_printf_float+0xbe>
 8005eca:	f108 0801 	add.w	r8, r8, #1
 8005ece:	e7ec      	b.n	8005eaa <_printf_float+0x34a>
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	d1c0      	bne.n	8005e60 <_printf_float+0x300>
 8005ede:	e69e      	b.n	8005c1e <_printf_float+0xbe>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	9205      	str	r2, [sp, #20]
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	f43f ae97 	beq.w	8005c1e <_printf_float+0xbe>
 8005ef0:	9a05      	ldr	r2, [sp, #20]
 8005ef2:	f10b 0b01 	add.w	fp, fp, #1
 8005ef6:	e7b9      	b.n	8005e6c <_printf_float+0x30c>
 8005ef8:	ee18 3a10 	vmov	r3, s16
 8005efc:	4652      	mov	r2, sl
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	d1be      	bne.n	8005e86 <_printf_float+0x326>
 8005f08:	e689      	b.n	8005c1e <_printf_float+0xbe>
 8005f0a:	9a05      	ldr	r2, [sp, #20]
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	4442      	add	r2, r8
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	d1c1      	bne.n	8005e9e <_printf_float+0x33e>
 8005f1a:	e680      	b.n	8005c1e <_printf_float+0xbe>
 8005f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1e:	2a01      	cmp	r2, #1
 8005f20:	dc01      	bgt.n	8005f26 <_printf_float+0x3c6>
 8005f22:	07db      	lsls	r3, r3, #31
 8005f24:	d53a      	bpl.n	8005f9c <_printf_float+0x43c>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4642      	mov	r2, r8
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f ae74 	beq.w	8005c1e <_printf_float+0xbe>
 8005f36:	ee18 3a10 	vmov	r3, s16
 8005f3a:	4652      	mov	r2, sl
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f ae6b 	beq.w	8005c1e <_printf_float+0xbe>
 8005f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005f54:	f7fa fdd8 	bl	8000b08 <__aeabi_dcmpeq>
 8005f58:	b9d8      	cbnz	r0, 8005f92 <_printf_float+0x432>
 8005f5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005f5e:	f108 0201 	add.w	r2, r8, #1
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d10e      	bne.n	8005f8a <_printf_float+0x42a>
 8005f6c:	e657      	b.n	8005c1e <_printf_float+0xbe>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f ae50 	beq.w	8005c1e <_printf_float+0xbe>
 8005f7e:	f108 0801 	add.w	r8, r8, #1
 8005f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f84:	3b01      	subs	r3, #1
 8005f86:	4543      	cmp	r3, r8
 8005f88:	dcf1      	bgt.n	8005f6e <_printf_float+0x40e>
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f90:	e6da      	b.n	8005d48 <_printf_float+0x1e8>
 8005f92:	f04f 0800 	mov.w	r8, #0
 8005f96:	f104 0a1a 	add.w	sl, r4, #26
 8005f9a:	e7f2      	b.n	8005f82 <_printf_float+0x422>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	e7df      	b.n	8005f62 <_printf_float+0x402>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	464a      	mov	r2, r9
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f ae36 	beq.w	8005c1e <_printf_float+0xbe>
 8005fb2:	f108 0801 	add.w	r8, r8, #1
 8005fb6:	68e3      	ldr	r3, [r4, #12]
 8005fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fba:	1a5b      	subs	r3, r3, r1
 8005fbc:	4543      	cmp	r3, r8
 8005fbe:	dcf0      	bgt.n	8005fa2 <_printf_float+0x442>
 8005fc0:	e6f8      	b.n	8005db4 <_printf_float+0x254>
 8005fc2:	f04f 0800 	mov.w	r8, #0
 8005fc6:	f104 0919 	add.w	r9, r4, #25
 8005fca:	e7f4      	b.n	8005fb6 <_printf_float+0x456>

08005fcc <_printf_common>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	4616      	mov	r6, r2
 8005fd2:	4699      	mov	r9, r3
 8005fd4:	688a      	ldr	r2, [r1, #8]
 8005fd6:	690b      	ldr	r3, [r1, #16]
 8005fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bfb8      	it	lt
 8005fe0:	4613      	movlt	r3, r2
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	b10a      	cbz	r2, 8005ff2 <_printf_common+0x26>
 8005fee:	3301      	adds	r3, #1
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	0699      	lsls	r1, r3, #26
 8005ff6:	bf42      	ittt	mi
 8005ff8:	6833      	ldrmi	r3, [r6, #0]
 8005ffa:	3302      	addmi	r3, #2
 8005ffc:	6033      	strmi	r3, [r6, #0]
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	f015 0506 	ands.w	r5, r5, #6
 8006004:	d106      	bne.n	8006014 <_printf_common+0x48>
 8006006:	f104 0a19 	add.w	sl, r4, #25
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	6832      	ldr	r2, [r6, #0]
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	42ab      	cmp	r3, r5
 8006012:	dc26      	bgt.n	8006062 <_printf_common+0x96>
 8006014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006018:	1e13      	subs	r3, r2, #0
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	bf18      	it	ne
 800601e:	2301      	movne	r3, #1
 8006020:	0692      	lsls	r2, r2, #26
 8006022:	d42b      	bmi.n	800607c <_printf_common+0xb0>
 8006024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006028:	4649      	mov	r1, r9
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d01e      	beq.n	8006070 <_printf_common+0xa4>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	f003 0306 	and.w	r3, r3, #6
 800603a:	2b04      	cmp	r3, #4
 800603c:	bf02      	ittt	eq
 800603e:	68e5      	ldreq	r5, [r4, #12]
 8006040:	6833      	ldreq	r3, [r6, #0]
 8006042:	1aed      	subeq	r5, r5, r3
 8006044:	68a3      	ldr	r3, [r4, #8]
 8006046:	bf0c      	ite	eq
 8006048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800604c:	2500      	movne	r5, #0
 800604e:	4293      	cmp	r3, r2
 8006050:	bfc4      	itt	gt
 8006052:	1a9b      	subgt	r3, r3, r2
 8006054:	18ed      	addgt	r5, r5, r3
 8006056:	2600      	movs	r6, #0
 8006058:	341a      	adds	r4, #26
 800605a:	42b5      	cmp	r5, r6
 800605c:	d11a      	bne.n	8006094 <_printf_common+0xc8>
 800605e:	2000      	movs	r0, #0
 8006060:	e008      	b.n	8006074 <_printf_common+0xa8>
 8006062:	2301      	movs	r3, #1
 8006064:	4652      	mov	r2, sl
 8006066:	4649      	mov	r1, r9
 8006068:	4638      	mov	r0, r7
 800606a:	47c0      	blx	r8
 800606c:	3001      	adds	r0, #1
 800606e:	d103      	bne.n	8006078 <_printf_common+0xac>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	3501      	adds	r5, #1
 800607a:	e7c6      	b.n	800600a <_printf_common+0x3e>
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	2030      	movs	r0, #48	; 0x30
 8006082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006086:	4422      	add	r2, r4
 8006088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800608c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006090:	3302      	adds	r3, #2
 8006092:	e7c7      	b.n	8006024 <_printf_common+0x58>
 8006094:	2301      	movs	r3, #1
 8006096:	4622      	mov	r2, r4
 8006098:	4649      	mov	r1, r9
 800609a:	4638      	mov	r0, r7
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d0e6      	beq.n	8006070 <_printf_common+0xa4>
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7d9      	b.n	800605a <_printf_common+0x8e>
	...

080060a8 <_printf_i>:
 80060a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	7e0f      	ldrb	r7, [r1, #24]
 80060ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060b0:	2f78      	cmp	r7, #120	; 0x78
 80060b2:	4691      	mov	r9, r2
 80060b4:	4680      	mov	r8, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	469a      	mov	sl, r3
 80060ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060be:	d807      	bhi.n	80060d0 <_printf_i+0x28>
 80060c0:	2f62      	cmp	r7, #98	; 0x62
 80060c2:	d80a      	bhi.n	80060da <_printf_i+0x32>
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	f000 80d4 	beq.w	8006272 <_printf_i+0x1ca>
 80060ca:	2f58      	cmp	r7, #88	; 0x58
 80060cc:	f000 80c0 	beq.w	8006250 <_printf_i+0x1a8>
 80060d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d8:	e03a      	b.n	8006150 <_printf_i+0xa8>
 80060da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060de:	2b15      	cmp	r3, #21
 80060e0:	d8f6      	bhi.n	80060d0 <_printf_i+0x28>
 80060e2:	a101      	add	r1, pc, #4	; (adr r1, 80060e8 <_printf_i+0x40>)
 80060e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006155 	.word	0x08006155
 80060f0:	080060d1 	.word	0x080060d1
 80060f4:	080060d1 	.word	0x080060d1
 80060f8:	080060d1 	.word	0x080060d1
 80060fc:	080060d1 	.word	0x080060d1
 8006100:	08006155 	.word	0x08006155
 8006104:	080060d1 	.word	0x080060d1
 8006108:	080060d1 	.word	0x080060d1
 800610c:	080060d1 	.word	0x080060d1
 8006110:	080060d1 	.word	0x080060d1
 8006114:	08006259 	.word	0x08006259
 8006118:	08006181 	.word	0x08006181
 800611c:	08006213 	.word	0x08006213
 8006120:	080060d1 	.word	0x080060d1
 8006124:	080060d1 	.word	0x080060d1
 8006128:	0800627b 	.word	0x0800627b
 800612c:	080060d1 	.word	0x080060d1
 8006130:	08006181 	.word	0x08006181
 8006134:	080060d1 	.word	0x080060d1
 8006138:	080060d1 	.word	0x080060d1
 800613c:	0800621b 	.word	0x0800621b
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	602a      	str	r2, [r5, #0]
 8006148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800614c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006150:	2301      	movs	r3, #1
 8006152:	e09f      	b.n	8006294 <_printf_i+0x1ec>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	0607      	lsls	r7, r0, #24
 800615a:	f103 0104 	add.w	r1, r3, #4
 800615e:	6029      	str	r1, [r5, #0]
 8006160:	d501      	bpl.n	8006166 <_printf_i+0xbe>
 8006162:	681e      	ldr	r6, [r3, #0]
 8006164:	e003      	b.n	800616e <_printf_i+0xc6>
 8006166:	0646      	lsls	r6, r0, #25
 8006168:	d5fb      	bpl.n	8006162 <_printf_i+0xba>
 800616a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800616e:	2e00      	cmp	r6, #0
 8006170:	da03      	bge.n	800617a <_printf_i+0xd2>
 8006172:	232d      	movs	r3, #45	; 0x2d
 8006174:	4276      	negs	r6, r6
 8006176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617a:	485a      	ldr	r0, [pc, #360]	; (80062e4 <_printf_i+0x23c>)
 800617c:	230a      	movs	r3, #10
 800617e:	e012      	b.n	80061a6 <_printf_i+0xfe>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6029      	str	r1, [r5, #0]
 8006188:	0605      	lsls	r5, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xe8>
 800618c:	681e      	ldr	r6, [r3, #0]
 800618e:	e002      	b.n	8006196 <_printf_i+0xee>
 8006190:	0641      	lsls	r1, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xe4>
 8006194:	881e      	ldrh	r6, [r3, #0]
 8006196:	4853      	ldr	r0, [pc, #332]	; (80062e4 <_printf_i+0x23c>)
 8006198:	2f6f      	cmp	r7, #111	; 0x6f
 800619a:	bf0c      	ite	eq
 800619c:	2308      	moveq	r3, #8
 800619e:	230a      	movne	r3, #10
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061a6:	6865      	ldr	r5, [r4, #4]
 80061a8:	60a5      	str	r5, [r4, #8]
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	bfa2      	ittt	ge
 80061ae:	6821      	ldrge	r1, [r4, #0]
 80061b0:	f021 0104 	bicge.w	r1, r1, #4
 80061b4:	6021      	strge	r1, [r4, #0]
 80061b6:	b90e      	cbnz	r6, 80061bc <_printf_i+0x114>
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	d04b      	beq.n	8006254 <_printf_i+0x1ac>
 80061bc:	4615      	mov	r5, r2
 80061be:	fbb6 f1f3 	udiv	r1, r6, r3
 80061c2:	fb03 6711 	mls	r7, r3, r1, r6
 80061c6:	5dc7      	ldrb	r7, [r0, r7]
 80061c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061cc:	4637      	mov	r7, r6
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	460e      	mov	r6, r1
 80061d2:	d9f4      	bls.n	80061be <_printf_i+0x116>
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d10b      	bne.n	80061f0 <_printf_i+0x148>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07de      	lsls	r6, r3, #31
 80061dc:	d508      	bpl.n	80061f0 <_printf_i+0x148>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	6861      	ldr	r1, [r4, #4]
 80061e2:	4299      	cmp	r1, r3
 80061e4:	bfde      	ittt	le
 80061e6:	2330      	movle	r3, #48	; 0x30
 80061e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061f0:	1b52      	subs	r2, r2, r5
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	464b      	mov	r3, r9
 80061fa:	aa03      	add	r2, sp, #12
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fee4 	bl	8005fcc <_printf_common>
 8006204:	3001      	adds	r0, #1
 8006206:	d14a      	bne.n	800629e <_printf_i+0x1f6>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	b004      	add	sp, #16
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	4833      	ldr	r0, [pc, #204]	; (80062e8 <_printf_i+0x240>)
 800621c:	2778      	movs	r7, #120	; 0x78
 800621e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6829      	ldr	r1, [r5, #0]
 8006226:	061f      	lsls	r7, r3, #24
 8006228:	f851 6b04 	ldr.w	r6, [r1], #4
 800622c:	d402      	bmi.n	8006234 <_printf_i+0x18c>
 800622e:	065f      	lsls	r7, r3, #25
 8006230:	bf48      	it	mi
 8006232:	b2b6      	uxthmi	r6, r6
 8006234:	07df      	lsls	r7, r3, #31
 8006236:	bf48      	it	mi
 8006238:	f043 0320 	orrmi.w	r3, r3, #32
 800623c:	6029      	str	r1, [r5, #0]
 800623e:	bf48      	it	mi
 8006240:	6023      	strmi	r3, [r4, #0]
 8006242:	b91e      	cbnz	r6, 800624c <_printf_i+0x1a4>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f023 0320 	bic.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	2310      	movs	r3, #16
 800624e:	e7a7      	b.n	80061a0 <_printf_i+0xf8>
 8006250:	4824      	ldr	r0, [pc, #144]	; (80062e4 <_printf_i+0x23c>)
 8006252:	e7e4      	b.n	800621e <_printf_i+0x176>
 8006254:	4615      	mov	r5, r2
 8006256:	e7bd      	b.n	80061d4 <_printf_i+0x12c>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6826      	ldr	r6, [r4, #0]
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	1d18      	adds	r0, r3, #4
 8006260:	6028      	str	r0, [r5, #0]
 8006262:	0635      	lsls	r5, r6, #24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	d501      	bpl.n	800626c <_printf_i+0x1c4>
 8006268:	6019      	str	r1, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0x1ca>
 800626c:	0670      	lsls	r0, r6, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0x1c0>
 8006270:	8019      	strh	r1, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	4615      	mov	r5, r2
 8006278:	e7bc      	b.n	80061f4 <_printf_i+0x14c>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	681d      	ldr	r5, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	4628      	mov	r0, r5
 8006288:	f7f9 ffc2 	bl	8000210 <memchr>
 800628c:	b108      	cbz	r0, 8006292 <_printf_i+0x1ea>
 800628e:	1b40      	subs	r0, r0, r5
 8006290:	6060      	str	r0, [r4, #4]
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629c:	e7aa      	b.n	80061f4 <_printf_i+0x14c>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	462a      	mov	r2, r5
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0ad      	beq.n	8006208 <_printf_i+0x160>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d413      	bmi.n	80062da <_printf_i+0x232>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bfb8      	it	lt
 80062ba:	4618      	movlt	r0, r3
 80062bc:	e7a6      	b.n	800620c <_printf_i+0x164>
 80062be:	2301      	movs	r3, #1
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d09d      	beq.n	8006208 <_printf_i+0x160>
 80062cc:	3501      	adds	r5, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dcf2      	bgt.n	80062be <_printf_i+0x216>
 80062d8:	e7eb      	b.n	80062b2 <_printf_i+0x20a>
 80062da:	2500      	movs	r5, #0
 80062dc:	f104 0619 	add.w	r6, r4, #25
 80062e0:	e7f5      	b.n	80062ce <_printf_i+0x226>
 80062e2:	bf00      	nop
 80062e4:	080087c6 	.word	0x080087c6
 80062e8:	080087d7 	.word	0x080087d7

080062ec <std>:
 80062ec:	2300      	movs	r3, #0
 80062ee:	b510      	push	{r4, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	e9c0 3300 	strd	r3, r3, [r0]
 80062f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062fa:	6083      	str	r3, [r0, #8]
 80062fc:	8181      	strh	r1, [r0, #12]
 80062fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006300:	81c2      	strh	r2, [r0, #14]
 8006302:	6183      	str	r3, [r0, #24]
 8006304:	4619      	mov	r1, r3
 8006306:	2208      	movs	r2, #8
 8006308:	305c      	adds	r0, #92	; 0x5c
 800630a:	f000 f9f7 	bl	80066fc <memset>
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <std+0x58>)
 8006310:	6263      	str	r3, [r4, #36]	; 0x24
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <std+0x5c>)
 8006314:	62a3      	str	r3, [r4, #40]	; 0x28
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <std+0x60>)
 8006318:	62e3      	str	r3, [r4, #44]	; 0x2c
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <std+0x64>)
 800631c:	6323      	str	r3, [r4, #48]	; 0x30
 800631e:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <std+0x68>)
 8006320:	6224      	str	r4, [r4, #32]
 8006322:	429c      	cmp	r4, r3
 8006324:	d006      	beq.n	8006334 <std+0x48>
 8006326:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800632a:	4294      	cmp	r4, r2
 800632c:	d002      	beq.n	8006334 <std+0x48>
 800632e:	33d0      	adds	r3, #208	; 0xd0
 8006330:	429c      	cmp	r4, r3
 8006332:	d105      	bne.n	8006340 <std+0x54>
 8006334:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633c:	f000 ba5a 	b.w	80067f4 <__retarget_lock_init_recursive>
 8006340:	bd10      	pop	{r4, pc}
 8006342:	bf00      	nop
 8006344:	0800654d 	.word	0x0800654d
 8006348:	0800656f 	.word	0x0800656f
 800634c:	080065a7 	.word	0x080065a7
 8006350:	080065cb 	.word	0x080065cb
 8006354:	200002e4 	.word	0x200002e4

08006358 <stdio_exit_handler>:
 8006358:	4a02      	ldr	r2, [pc, #8]	; (8006364 <stdio_exit_handler+0xc>)
 800635a:	4903      	ldr	r1, [pc, #12]	; (8006368 <stdio_exit_handler+0x10>)
 800635c:	4803      	ldr	r0, [pc, #12]	; (800636c <stdio_exit_handler+0x14>)
 800635e:	f000 b869 	b.w	8006434 <_fwalk_sglue>
 8006362:	bf00      	nop
 8006364:	20000010 	.word	0x20000010
 8006368:	08008181 	.word	0x08008181
 800636c:	2000001c 	.word	0x2000001c

08006370 <cleanup_stdio>:
 8006370:	6841      	ldr	r1, [r0, #4]
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <cleanup_stdio+0x34>)
 8006374:	4299      	cmp	r1, r3
 8006376:	b510      	push	{r4, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	d001      	beq.n	8006380 <cleanup_stdio+0x10>
 800637c:	f001 ff00 	bl	8008180 <_fflush_r>
 8006380:	68a1      	ldr	r1, [r4, #8]
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <cleanup_stdio+0x38>)
 8006384:	4299      	cmp	r1, r3
 8006386:	d002      	beq.n	800638e <cleanup_stdio+0x1e>
 8006388:	4620      	mov	r0, r4
 800638a:	f001 fef9 	bl	8008180 <_fflush_r>
 800638e:	68e1      	ldr	r1, [r4, #12]
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <cleanup_stdio+0x3c>)
 8006392:	4299      	cmp	r1, r3
 8006394:	d004      	beq.n	80063a0 <cleanup_stdio+0x30>
 8006396:	4620      	mov	r0, r4
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639c:	f001 bef0 	b.w	8008180 <_fflush_r>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	200002e4 	.word	0x200002e4
 80063a8:	2000034c 	.word	0x2000034c
 80063ac:	200003b4 	.word	0x200003b4

080063b0 <global_stdio_init.part.0>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <global_stdio_init.part.0+0x30>)
 80063b4:	4c0b      	ldr	r4, [pc, #44]	; (80063e4 <global_stdio_init.part.0+0x34>)
 80063b6:	4a0c      	ldr	r2, [pc, #48]	; (80063e8 <global_stdio_init.part.0+0x38>)
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	2200      	movs	r2, #0
 80063be:	2104      	movs	r1, #4
 80063c0:	f7ff ff94 	bl	80062ec <std>
 80063c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063c8:	2201      	movs	r2, #1
 80063ca:	2109      	movs	r1, #9
 80063cc:	f7ff ff8e 	bl	80062ec <std>
 80063d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80063d4:	2202      	movs	r2, #2
 80063d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063da:	2112      	movs	r1, #18
 80063dc:	f7ff bf86 	b.w	80062ec <std>
 80063e0:	2000041c 	.word	0x2000041c
 80063e4:	200002e4 	.word	0x200002e4
 80063e8:	08006359 	.word	0x08006359

080063ec <__sfp_lock_acquire>:
 80063ec:	4801      	ldr	r0, [pc, #4]	; (80063f4 <__sfp_lock_acquire+0x8>)
 80063ee:	f000 ba02 	b.w	80067f6 <__retarget_lock_acquire_recursive>
 80063f2:	bf00      	nop
 80063f4:	20000425 	.word	0x20000425

080063f8 <__sfp_lock_release>:
 80063f8:	4801      	ldr	r0, [pc, #4]	; (8006400 <__sfp_lock_release+0x8>)
 80063fa:	f000 b9fd 	b.w	80067f8 <__retarget_lock_release_recursive>
 80063fe:	bf00      	nop
 8006400:	20000425 	.word	0x20000425

08006404 <__sinit>:
 8006404:	b510      	push	{r4, lr}
 8006406:	4604      	mov	r4, r0
 8006408:	f7ff fff0 	bl	80063ec <__sfp_lock_acquire>
 800640c:	6a23      	ldr	r3, [r4, #32]
 800640e:	b11b      	cbz	r3, 8006418 <__sinit+0x14>
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f7ff bff0 	b.w	80063f8 <__sfp_lock_release>
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <__sinit+0x28>)
 800641a:	6223      	str	r3, [r4, #32]
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <__sinit+0x2c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f5      	bne.n	8006410 <__sinit+0xc>
 8006424:	f7ff ffc4 	bl	80063b0 <global_stdio_init.part.0>
 8006428:	e7f2      	b.n	8006410 <__sinit+0xc>
 800642a:	bf00      	nop
 800642c:	08006371 	.word	0x08006371
 8006430:	2000041c 	.word	0x2000041c

08006434 <_fwalk_sglue>:
 8006434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006438:	4607      	mov	r7, r0
 800643a:	4688      	mov	r8, r1
 800643c:	4614      	mov	r4, r2
 800643e:	2600      	movs	r6, #0
 8006440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006444:	f1b9 0901 	subs.w	r9, r9, #1
 8006448:	d505      	bpl.n	8006456 <_fwalk_sglue+0x22>
 800644a:	6824      	ldr	r4, [r4, #0]
 800644c:	2c00      	cmp	r4, #0
 800644e:	d1f7      	bne.n	8006440 <_fwalk_sglue+0xc>
 8006450:	4630      	mov	r0, r6
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	89ab      	ldrh	r3, [r5, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d907      	bls.n	800646c <_fwalk_sglue+0x38>
 800645c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006460:	3301      	adds	r3, #1
 8006462:	d003      	beq.n	800646c <_fwalk_sglue+0x38>
 8006464:	4629      	mov	r1, r5
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	4306      	orrs	r6, r0
 800646c:	3568      	adds	r5, #104	; 0x68
 800646e:	e7e9      	b.n	8006444 <_fwalk_sglue+0x10>

08006470 <iprintf>:
 8006470:	b40f      	push	{r0, r1, r2, r3}
 8006472:	b507      	push	{r0, r1, r2, lr}
 8006474:	4906      	ldr	r1, [pc, #24]	; (8006490 <iprintf+0x20>)
 8006476:	ab04      	add	r3, sp, #16
 8006478:	6808      	ldr	r0, [r1, #0]
 800647a:	f853 2b04 	ldr.w	r2, [r3], #4
 800647e:	6881      	ldr	r1, [r0, #8]
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	f001 fcdd 	bl	8007e40 <_vfiprintf_r>
 8006486:	b003      	add	sp, #12
 8006488:	f85d eb04 	ldr.w	lr, [sp], #4
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr
 8006490:	20000068 	.word	0x20000068

08006494 <_puts_r>:
 8006494:	6a03      	ldr	r3, [r0, #32]
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	6884      	ldr	r4, [r0, #8]
 800649a:	4605      	mov	r5, r0
 800649c:	460e      	mov	r6, r1
 800649e:	b90b      	cbnz	r3, 80064a4 <_puts_r+0x10>
 80064a0:	f7ff ffb0 	bl	8006404 <__sinit>
 80064a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a6:	07db      	lsls	r3, r3, #31
 80064a8:	d405      	bmi.n	80064b6 <_puts_r+0x22>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	0598      	lsls	r0, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_puts_r+0x22>
 80064b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b2:	f000 f9a0 	bl	80067f6 <__retarget_lock_acquire_recursive>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	0719      	lsls	r1, r3, #28
 80064ba:	d513      	bpl.n	80064e4 <_puts_r+0x50>
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	b18b      	cbz	r3, 80064e4 <_puts_r+0x50>
 80064c0:	3e01      	subs	r6, #1
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064c8:	3b01      	subs	r3, #1
 80064ca:	60a3      	str	r3, [r4, #8]
 80064cc:	b9e9      	cbnz	r1, 800650a <_puts_r+0x76>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da2e      	bge.n	8006530 <_puts_r+0x9c>
 80064d2:	4622      	mov	r2, r4
 80064d4:	210a      	movs	r1, #10
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 f87b 	bl	80065d2 <__swbuf_r>
 80064dc:	3001      	adds	r0, #1
 80064de:	d007      	beq.n	80064f0 <_puts_r+0x5c>
 80064e0:	250a      	movs	r5, #10
 80064e2:	e007      	b.n	80064f4 <_puts_r+0x60>
 80064e4:	4621      	mov	r1, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 f8b0 	bl	800664c <__swsetup_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d0e7      	beq.n	80064c0 <_puts_r+0x2c>
 80064f0:	f04f 35ff 	mov.w	r5, #4294967295
 80064f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064f6:	07da      	lsls	r2, r3, #31
 80064f8:	d405      	bmi.n	8006506 <_puts_r+0x72>
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	059b      	lsls	r3, r3, #22
 80064fe:	d402      	bmi.n	8006506 <_puts_r+0x72>
 8006500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006502:	f000 f979 	bl	80067f8 <__retarget_lock_release_recursive>
 8006506:	4628      	mov	r0, r5
 8006508:	bd70      	pop	{r4, r5, r6, pc}
 800650a:	2b00      	cmp	r3, #0
 800650c:	da04      	bge.n	8006518 <_puts_r+0x84>
 800650e:	69a2      	ldr	r2, [r4, #24]
 8006510:	429a      	cmp	r2, r3
 8006512:	dc06      	bgt.n	8006522 <_puts_r+0x8e>
 8006514:	290a      	cmp	r1, #10
 8006516:	d004      	beq.n	8006522 <_puts_r+0x8e>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	7019      	strb	r1, [r3, #0]
 8006520:	e7cf      	b.n	80064c2 <_puts_r+0x2e>
 8006522:	4622      	mov	r2, r4
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f854 	bl	80065d2 <__swbuf_r>
 800652a:	3001      	adds	r0, #1
 800652c:	d1c9      	bne.n	80064c2 <_puts_r+0x2e>
 800652e:	e7df      	b.n	80064f0 <_puts_r+0x5c>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	250a      	movs	r5, #10
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	6022      	str	r2, [r4, #0]
 8006538:	701d      	strb	r5, [r3, #0]
 800653a:	e7db      	b.n	80064f4 <_puts_r+0x60>

0800653c <puts>:
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <puts+0xc>)
 800653e:	4601      	mov	r1, r0
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	f7ff bfa7 	b.w	8006494 <_puts_r>
 8006546:	bf00      	nop
 8006548:	20000068 	.word	0x20000068

0800654c <__sread>:
 800654c:	b510      	push	{r4, lr}
 800654e:	460c      	mov	r4, r1
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	f000 f900 	bl	8006758 <_read_r>
 8006558:	2800      	cmp	r0, #0
 800655a:	bfab      	itete	ge
 800655c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800655e:	89a3      	ldrhlt	r3, [r4, #12]
 8006560:	181b      	addge	r3, r3, r0
 8006562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006566:	bfac      	ite	ge
 8006568:	6563      	strge	r3, [r4, #84]	; 0x54
 800656a:	81a3      	strhlt	r3, [r4, #12]
 800656c:	bd10      	pop	{r4, pc}

0800656e <__swrite>:
 800656e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	461f      	mov	r7, r3
 8006574:	898b      	ldrh	r3, [r1, #12]
 8006576:	05db      	lsls	r3, r3, #23
 8006578:	4605      	mov	r5, r0
 800657a:	460c      	mov	r4, r1
 800657c:	4616      	mov	r6, r2
 800657e:	d505      	bpl.n	800658c <__swrite+0x1e>
 8006580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006584:	2302      	movs	r3, #2
 8006586:	2200      	movs	r2, #0
 8006588:	f000 f8d4 	bl	8006734 <_lseek_r>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006596:	81a3      	strh	r3, [r4, #12]
 8006598:	4632      	mov	r2, r6
 800659a:	463b      	mov	r3, r7
 800659c:	4628      	mov	r0, r5
 800659e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a2:	f000 b8eb 	b.w	800677c <_write_r>

080065a6 <__sseek>:
 80065a6:	b510      	push	{r4, lr}
 80065a8:	460c      	mov	r4, r1
 80065aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ae:	f000 f8c1 	bl	8006734 <_lseek_r>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	bf15      	itete	ne
 80065b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065c2:	81a3      	strheq	r3, [r4, #12]
 80065c4:	bf18      	it	ne
 80065c6:	81a3      	strhne	r3, [r4, #12]
 80065c8:	bd10      	pop	{r4, pc}

080065ca <__sclose>:
 80065ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ce:	f000 b8a1 	b.w	8006714 <_close_r>

080065d2 <__swbuf_r>:
 80065d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d4:	460e      	mov	r6, r1
 80065d6:	4614      	mov	r4, r2
 80065d8:	4605      	mov	r5, r0
 80065da:	b118      	cbz	r0, 80065e4 <__swbuf_r+0x12>
 80065dc:	6a03      	ldr	r3, [r0, #32]
 80065de:	b90b      	cbnz	r3, 80065e4 <__swbuf_r+0x12>
 80065e0:	f7ff ff10 	bl	8006404 <__sinit>
 80065e4:	69a3      	ldr	r3, [r4, #24]
 80065e6:	60a3      	str	r3, [r4, #8]
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	071a      	lsls	r2, r3, #28
 80065ec:	d525      	bpl.n	800663a <__swbuf_r+0x68>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	b31b      	cbz	r3, 800663a <__swbuf_r+0x68>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	1a98      	subs	r0, r3, r2
 80065f8:	6963      	ldr	r3, [r4, #20]
 80065fa:	b2f6      	uxtb	r6, r6
 80065fc:	4283      	cmp	r3, r0
 80065fe:	4637      	mov	r7, r6
 8006600:	dc04      	bgt.n	800660c <__swbuf_r+0x3a>
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f001 fdbb 	bl	8008180 <_fflush_r>
 800660a:	b9e0      	cbnz	r0, 8006646 <__swbuf_r+0x74>
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	3b01      	subs	r3, #1
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	701e      	strb	r6, [r3, #0]
 800661a:	6962      	ldr	r2, [r4, #20]
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	429a      	cmp	r2, r3
 8006620:	d004      	beq.n	800662c <__swbuf_r+0x5a>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	07db      	lsls	r3, r3, #31
 8006626:	d506      	bpl.n	8006636 <__swbuf_r+0x64>
 8006628:	2e0a      	cmp	r6, #10
 800662a:	d104      	bne.n	8006636 <__swbuf_r+0x64>
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f001 fda6 	bl	8008180 <_fflush_r>
 8006634:	b938      	cbnz	r0, 8006646 <__swbuf_r+0x74>
 8006636:	4638      	mov	r0, r7
 8006638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663a:	4621      	mov	r1, r4
 800663c:	4628      	mov	r0, r5
 800663e:	f000 f805 	bl	800664c <__swsetup_r>
 8006642:	2800      	cmp	r0, #0
 8006644:	d0d5      	beq.n	80065f2 <__swbuf_r+0x20>
 8006646:	f04f 37ff 	mov.w	r7, #4294967295
 800664a:	e7f4      	b.n	8006636 <__swbuf_r+0x64>

0800664c <__swsetup_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <__swsetup_r+0xac>)
 8006650:	4605      	mov	r5, r0
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	460c      	mov	r4, r1
 8006656:	b118      	cbz	r0, 8006660 <__swsetup_r+0x14>
 8006658:	6a03      	ldr	r3, [r0, #32]
 800665a:	b90b      	cbnz	r3, 8006660 <__swsetup_r+0x14>
 800665c:	f7ff fed2 	bl	8006404 <__sinit>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006666:	0718      	lsls	r0, r3, #28
 8006668:	d422      	bmi.n	80066b0 <__swsetup_r+0x64>
 800666a:	06d9      	lsls	r1, r3, #27
 800666c:	d407      	bmi.n	800667e <__swsetup_r+0x32>
 800666e:	2309      	movs	r3, #9
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e034      	b.n	80066e8 <__swsetup_r+0x9c>
 800667e:	0758      	lsls	r0, r3, #29
 8006680:	d512      	bpl.n	80066a8 <__swsetup_r+0x5c>
 8006682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006684:	b141      	cbz	r1, 8006698 <__swsetup_r+0x4c>
 8006686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800668a:	4299      	cmp	r1, r3
 800668c:	d002      	beq.n	8006694 <__swsetup_r+0x48>
 800668e:	4628      	mov	r0, r5
 8006690:	f000 ff30 	bl	80074f4 <_free_r>
 8006694:	2300      	movs	r3, #0
 8006696:	6363      	str	r3, [r4, #52]	; 0x34
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	2300      	movs	r3, #0
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	f043 0308 	orr.w	r3, r3, #8
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	b94b      	cbnz	r3, 80066c8 <__swsetup_r+0x7c>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066be:	d003      	beq.n	80066c8 <__swsetup_r+0x7c>
 80066c0:	4621      	mov	r1, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	f001 fdaa 	bl	800821c <__smakebuf_r>
 80066c8:	89a0      	ldrh	r0, [r4, #12]
 80066ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ce:	f010 0301 	ands.w	r3, r0, #1
 80066d2:	d00a      	beq.n	80066ea <__swsetup_r+0x9e>
 80066d4:	2300      	movs	r3, #0
 80066d6:	60a3      	str	r3, [r4, #8]
 80066d8:	6963      	ldr	r3, [r4, #20]
 80066da:	425b      	negs	r3, r3
 80066dc:	61a3      	str	r3, [r4, #24]
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	b943      	cbnz	r3, 80066f4 <__swsetup_r+0xa8>
 80066e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066e6:	d1c4      	bne.n	8006672 <__swsetup_r+0x26>
 80066e8:	bd38      	pop	{r3, r4, r5, pc}
 80066ea:	0781      	lsls	r1, r0, #30
 80066ec:	bf58      	it	pl
 80066ee:	6963      	ldrpl	r3, [r4, #20]
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	e7f4      	b.n	80066de <__swsetup_r+0x92>
 80066f4:	2000      	movs	r0, #0
 80066f6:	e7f7      	b.n	80066e8 <__swsetup_r+0x9c>
 80066f8:	20000068 	.word	0x20000068

080066fc <memset>:
 80066fc:	4402      	add	r2, r0
 80066fe:	4603      	mov	r3, r0
 8006700:	4293      	cmp	r3, r2
 8006702:	d100      	bne.n	8006706 <memset+0xa>
 8006704:	4770      	bx	lr
 8006706:	f803 1b01 	strb.w	r1, [r3], #1
 800670a:	e7f9      	b.n	8006700 <memset+0x4>

0800670c <_localeconv_r>:
 800670c:	4800      	ldr	r0, [pc, #0]	; (8006710 <_localeconv_r+0x4>)
 800670e:	4770      	bx	lr
 8006710:	2000015c 	.word	0x2000015c

08006714 <_close_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d06      	ldr	r5, [pc, #24]	; (8006730 <_close_r+0x1c>)
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	f7fd f833 	bl	800378a <_close>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_close_r+0x1a>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_close_r+0x1a>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000420 	.word	0x20000420

08006734 <_lseek_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	; (8006754 <_lseek_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fd f848 	bl	80037d8 <_lseek>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_lseek_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_lseek_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20000420 	.word	0x20000420

08006758 <_read_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	; (8006778 <_read_r+0x20>)
 800675c:	4604      	mov	r4, r0
 800675e:	4608      	mov	r0, r1
 8006760:	4611      	mov	r1, r2
 8006762:	2200      	movs	r2, #0
 8006764:	602a      	str	r2, [r5, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f7fc ffd6 	bl	8003718 <_read>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_read_r+0x1e>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_read_r+0x1e>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000420 	.word	0x20000420

0800677c <_write_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d07      	ldr	r5, [pc, #28]	; (800679c <_write_r+0x20>)
 8006780:	4604      	mov	r4, r0
 8006782:	4608      	mov	r0, r1
 8006784:	4611      	mov	r1, r2
 8006786:	2200      	movs	r2, #0
 8006788:	602a      	str	r2, [r5, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f7fc ffe1 	bl	8003752 <_write>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_write_r+0x1e>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_write_r+0x1e>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	20000420 	.word	0x20000420

080067a0 <__errno>:
 80067a0:	4b01      	ldr	r3, [pc, #4]	; (80067a8 <__errno+0x8>)
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000068 	.word	0x20000068

080067ac <__libc_init_array>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4d0d      	ldr	r5, [pc, #52]	; (80067e4 <__libc_init_array+0x38>)
 80067b0:	4c0d      	ldr	r4, [pc, #52]	; (80067e8 <__libc_init_array+0x3c>)
 80067b2:	1b64      	subs	r4, r4, r5
 80067b4:	10a4      	asrs	r4, r4, #2
 80067b6:	2600      	movs	r6, #0
 80067b8:	42a6      	cmp	r6, r4
 80067ba:	d109      	bne.n	80067d0 <__libc_init_array+0x24>
 80067bc:	4d0b      	ldr	r5, [pc, #44]	; (80067ec <__libc_init_array+0x40>)
 80067be:	4c0c      	ldr	r4, [pc, #48]	; (80067f0 <__libc_init_array+0x44>)
 80067c0:	f001 fe5a 	bl	8008478 <_init>
 80067c4:	1b64      	subs	r4, r4, r5
 80067c6:	10a4      	asrs	r4, r4, #2
 80067c8:	2600      	movs	r6, #0
 80067ca:	42a6      	cmp	r6, r4
 80067cc:	d105      	bne.n	80067da <__libc_init_array+0x2e>
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d4:	4798      	blx	r3
 80067d6:	3601      	adds	r6, #1
 80067d8:	e7ee      	b.n	80067b8 <__libc_init_array+0xc>
 80067da:	f855 3b04 	ldr.w	r3, [r5], #4
 80067de:	4798      	blx	r3
 80067e0:	3601      	adds	r6, #1
 80067e2:	e7f2      	b.n	80067ca <__libc_init_array+0x1e>
 80067e4:	08008b2c 	.word	0x08008b2c
 80067e8:	08008b2c 	.word	0x08008b2c
 80067ec:	08008b2c 	.word	0x08008b2c
 80067f0:	08008b30 	.word	0x08008b30

080067f4 <__retarget_lock_init_recursive>:
 80067f4:	4770      	bx	lr

080067f6 <__retarget_lock_acquire_recursive>:
 80067f6:	4770      	bx	lr

080067f8 <__retarget_lock_release_recursive>:
 80067f8:	4770      	bx	lr

080067fa <quorem>:
 80067fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fe:	6903      	ldr	r3, [r0, #16]
 8006800:	690c      	ldr	r4, [r1, #16]
 8006802:	42a3      	cmp	r3, r4
 8006804:	4607      	mov	r7, r0
 8006806:	db7e      	blt.n	8006906 <quorem+0x10c>
 8006808:	3c01      	subs	r4, #1
 800680a:	f101 0814 	add.w	r8, r1, #20
 800680e:	f100 0514 	add.w	r5, r0, #20
 8006812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800681c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006820:	3301      	adds	r3, #1
 8006822:	429a      	cmp	r2, r3
 8006824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800682c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006830:	d331      	bcc.n	8006896 <quorem+0x9c>
 8006832:	f04f 0e00 	mov.w	lr, #0
 8006836:	4640      	mov	r0, r8
 8006838:	46ac      	mov	ip, r5
 800683a:	46f2      	mov	sl, lr
 800683c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006840:	b293      	uxth	r3, r2
 8006842:	fb06 e303 	mla	r3, r6, r3, lr
 8006846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800684a:	0c1a      	lsrs	r2, r3, #16
 800684c:	b29b      	uxth	r3, r3
 800684e:	ebaa 0303 	sub.w	r3, sl, r3
 8006852:	f8dc a000 	ldr.w	sl, [ip]
 8006856:	fa13 f38a 	uxtah	r3, r3, sl
 800685a:	fb06 220e 	mla	r2, r6, lr, r2
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	9b00      	ldr	r3, [sp, #0]
 8006862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006866:	b292      	uxth	r2, r2
 8006868:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800686c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006870:	f8bd 3000 	ldrh.w	r3, [sp]
 8006874:	4581      	cmp	r9, r0
 8006876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687a:	f84c 3b04 	str.w	r3, [ip], #4
 800687e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006882:	d2db      	bcs.n	800683c <quorem+0x42>
 8006884:	f855 300b 	ldr.w	r3, [r5, fp]
 8006888:	b92b      	cbnz	r3, 8006896 <quorem+0x9c>
 800688a:	9b01      	ldr	r3, [sp, #4]
 800688c:	3b04      	subs	r3, #4
 800688e:	429d      	cmp	r5, r3
 8006890:	461a      	mov	r2, r3
 8006892:	d32c      	bcc.n	80068ee <quorem+0xf4>
 8006894:	613c      	str	r4, [r7, #16]
 8006896:	4638      	mov	r0, r7
 8006898:	f001 f9a8 	bl	8007bec <__mcmp>
 800689c:	2800      	cmp	r0, #0
 800689e:	db22      	blt.n	80068e6 <quorem+0xec>
 80068a0:	3601      	adds	r6, #1
 80068a2:	4629      	mov	r1, r5
 80068a4:	2000      	movs	r0, #0
 80068a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80068aa:	f8d1 c000 	ldr.w	ip, [r1]
 80068ae:	b293      	uxth	r3, r2
 80068b0:	1ac3      	subs	r3, r0, r3
 80068b2:	0c12      	lsrs	r2, r2, #16
 80068b4:	fa13 f38c 	uxtah	r3, r3, ip
 80068b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80068bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c6:	45c1      	cmp	r9, r8
 80068c8:	f841 3b04 	str.w	r3, [r1], #4
 80068cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068d0:	d2e9      	bcs.n	80068a6 <quorem+0xac>
 80068d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068da:	b922      	cbnz	r2, 80068e6 <quorem+0xec>
 80068dc:	3b04      	subs	r3, #4
 80068de:	429d      	cmp	r5, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	d30a      	bcc.n	80068fa <quorem+0x100>
 80068e4:	613c      	str	r4, [r7, #16]
 80068e6:	4630      	mov	r0, r6
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1ce      	bne.n	8006894 <quorem+0x9a>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7c9      	b.n	800688e <quorem+0x94>
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1f0      	bne.n	80068e4 <quorem+0xea>
 8006902:	3c01      	subs	r4, #1
 8006904:	e7eb      	b.n	80068de <quorem+0xe4>
 8006906:	2000      	movs	r0, #0
 8006908:	e7ee      	b.n	80068e8 <quorem+0xee>
 800690a:	0000      	movs	r0, r0
 800690c:	0000      	movs	r0, r0
	...

08006910 <_dtoa_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ed2d 8b04 	vpush	{d8-d9}
 8006918:	69c5      	ldr	r5, [r0, #28]
 800691a:	b093      	sub	sp, #76	; 0x4c
 800691c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006920:	ec57 6b10 	vmov	r6, r7, d0
 8006924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006928:	9107      	str	r1, [sp, #28]
 800692a:	4604      	mov	r4, r0
 800692c:	920a      	str	r2, [sp, #40]	; 0x28
 800692e:	930d      	str	r3, [sp, #52]	; 0x34
 8006930:	b975      	cbnz	r5, 8006950 <_dtoa_r+0x40>
 8006932:	2010      	movs	r0, #16
 8006934:	f000 fe2a 	bl	800758c <malloc>
 8006938:	4602      	mov	r2, r0
 800693a:	61e0      	str	r0, [r4, #28]
 800693c:	b920      	cbnz	r0, 8006948 <_dtoa_r+0x38>
 800693e:	4bae      	ldr	r3, [pc, #696]	; (8006bf8 <_dtoa_r+0x2e8>)
 8006940:	21ef      	movs	r1, #239	; 0xef
 8006942:	48ae      	ldr	r0, [pc, #696]	; (8006bfc <_dtoa_r+0x2ec>)
 8006944:	f001 fce6 	bl	8008314 <__assert_func>
 8006948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800694c:	6005      	str	r5, [r0, #0]
 800694e:	60c5      	str	r5, [r0, #12]
 8006950:	69e3      	ldr	r3, [r4, #28]
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	b151      	cbz	r1, 800696c <_dtoa_r+0x5c>
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	604a      	str	r2, [r1, #4]
 800695a:	2301      	movs	r3, #1
 800695c:	4093      	lsls	r3, r2
 800695e:	608b      	str	r3, [r1, #8]
 8006960:	4620      	mov	r0, r4
 8006962:	f000 ff07 	bl	8007774 <_Bfree>
 8006966:	69e3      	ldr	r3, [r4, #28]
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	1e3b      	subs	r3, r7, #0
 800696e:	bfbb      	ittet	lt
 8006970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006974:	9303      	strlt	r3, [sp, #12]
 8006976:	2300      	movge	r3, #0
 8006978:	2201      	movlt	r2, #1
 800697a:	bfac      	ite	ge
 800697c:	f8c8 3000 	strge.w	r3, [r8]
 8006980:	f8c8 2000 	strlt.w	r2, [r8]
 8006984:	4b9e      	ldr	r3, [pc, #632]	; (8006c00 <_dtoa_r+0x2f0>)
 8006986:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800698a:	ea33 0308 	bics.w	r3, r3, r8
 800698e:	d11b      	bne.n	80069c8 <_dtoa_r+0xb8>
 8006990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006992:	f242 730f 	movw	r3, #9999	; 0x270f
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800699c:	4333      	orrs	r3, r6
 800699e:	f000 8593 	beq.w	80074c8 <_dtoa_r+0xbb8>
 80069a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069a4:	b963      	cbnz	r3, 80069c0 <_dtoa_r+0xb0>
 80069a6:	4b97      	ldr	r3, [pc, #604]	; (8006c04 <_dtoa_r+0x2f4>)
 80069a8:	e027      	b.n	80069fa <_dtoa_r+0xea>
 80069aa:	4b97      	ldr	r3, [pc, #604]	; (8006c08 <_dtoa_r+0x2f8>)
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	9800      	ldr	r0, [sp, #0]
 80069b6:	b013      	add	sp, #76	; 0x4c
 80069b8:	ecbd 8b04 	vpop	{d8-d9}
 80069bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c0:	4b90      	ldr	r3, [pc, #576]	; (8006c04 <_dtoa_r+0x2f4>)
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	3303      	adds	r3, #3
 80069c6:	e7f3      	b.n	80069b0 <_dtoa_r+0xa0>
 80069c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	ec51 0b17 	vmov	r0, r1, d7
 80069d2:	eeb0 8a47 	vmov.f32	s16, s14
 80069d6:	eef0 8a67 	vmov.f32	s17, s15
 80069da:	2300      	movs	r3, #0
 80069dc:	f7fa f894 	bl	8000b08 <__aeabi_dcmpeq>
 80069e0:	4681      	mov	r9, r0
 80069e2:	b160      	cbz	r0, 80069fe <_dtoa_r+0xee>
 80069e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069e6:	2301      	movs	r3, #1
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8568 	beq.w	80074c2 <_dtoa_r+0xbb2>
 80069f2:	4b86      	ldr	r3, [pc, #536]	; (8006c0c <_dtoa_r+0x2fc>)
 80069f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	e7da      	b.n	80069b4 <_dtoa_r+0xa4>
 80069fe:	aa10      	add	r2, sp, #64	; 0x40
 8006a00:	a911      	add	r1, sp, #68	; 0x44
 8006a02:	4620      	mov	r0, r4
 8006a04:	eeb0 0a48 	vmov.f32	s0, s16
 8006a08:	eef0 0a68 	vmov.f32	s1, s17
 8006a0c:	f001 f994 	bl	8007d38 <__d2b>
 8006a10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a14:	4682      	mov	sl, r0
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	d07f      	beq.n	8006b1a <_dtoa_r+0x20a>
 8006a1a:	ee18 3a90 	vmov	r3, s17
 8006a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a26:	ec51 0b18 	vmov	r0, r1, d8
 8006a2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006a36:	4619      	mov	r1, r3
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4b75      	ldr	r3, [pc, #468]	; (8006c10 <_dtoa_r+0x300>)
 8006a3c:	f7f9 fc44 	bl	80002c8 <__aeabi_dsub>
 8006a40:	a367      	add	r3, pc, #412	; (adr r3, 8006be0 <_dtoa_r+0x2d0>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fdf7 	bl	8000638 <__aeabi_dmul>
 8006a4a:	a367      	add	r3, pc, #412	; (adr r3, 8006be8 <_dtoa_r+0x2d8>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fc3c 	bl	80002cc <__adddf3>
 8006a54:	4606      	mov	r6, r0
 8006a56:	4628      	mov	r0, r5
 8006a58:	460f      	mov	r7, r1
 8006a5a:	f7f9 fd83 	bl	8000564 <__aeabi_i2d>
 8006a5e:	a364      	add	r3, pc, #400	; (adr r3, 8006bf0 <_dtoa_r+0x2e0>)
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f7f9 fde8 	bl	8000638 <__aeabi_dmul>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fc2c 	bl	80002cc <__adddf3>
 8006a74:	4606      	mov	r6, r0
 8006a76:	460f      	mov	r7, r1
 8006a78:	f7fa f88e 	bl	8000b98 <__aeabi_d2iz>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4683      	mov	fp, r0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7fa f849 	bl	8000b1c <__aeabi_dcmplt>
 8006a8a:	b148      	cbz	r0, 8006aa0 <_dtoa_r+0x190>
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f7f9 fd69 	bl	8000564 <__aeabi_i2d>
 8006a92:	4632      	mov	r2, r6
 8006a94:	463b      	mov	r3, r7
 8006a96:	f7fa f837 	bl	8000b08 <__aeabi_dcmpeq>
 8006a9a:	b908      	cbnz	r0, 8006aa0 <_dtoa_r+0x190>
 8006a9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006aa0:	f1bb 0f16 	cmp.w	fp, #22
 8006aa4:	d857      	bhi.n	8006b56 <_dtoa_r+0x246>
 8006aa6:	4b5b      	ldr	r3, [pc, #364]	; (8006c14 <_dtoa_r+0x304>)
 8006aa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	ec51 0b18 	vmov	r0, r1, d8
 8006ab4:	f7fa f832 	bl	8000b1c <__aeabi_dcmplt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d04e      	beq.n	8006b5a <_dtoa_r+0x24a>
 8006abc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ac6:	1b5b      	subs	r3, r3, r5
 8006ac8:	1e5a      	subs	r2, r3, #1
 8006aca:	bf45      	ittet	mi
 8006acc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ad0:	9305      	strmi	r3, [sp, #20]
 8006ad2:	2300      	movpl	r3, #0
 8006ad4:	2300      	movmi	r3, #0
 8006ad6:	9206      	str	r2, [sp, #24]
 8006ad8:	bf54      	ite	pl
 8006ada:	9305      	strpl	r3, [sp, #20]
 8006adc:	9306      	strmi	r3, [sp, #24]
 8006ade:	f1bb 0f00 	cmp.w	fp, #0
 8006ae2:	db3c      	blt.n	8006b5e <_dtoa_r+0x24e>
 8006ae4:	9b06      	ldr	r3, [sp, #24]
 8006ae6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006aea:	445b      	add	r3, fp
 8006aec:	9306      	str	r3, [sp, #24]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	9b07      	ldr	r3, [sp, #28]
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	d868      	bhi.n	8006bca <_dtoa_r+0x2ba>
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	bfc4      	itt	gt
 8006afc:	3b04      	subgt	r3, #4
 8006afe:	9307      	strgt	r3, [sp, #28]
 8006b00:	9b07      	ldr	r3, [sp, #28]
 8006b02:	f1a3 0302 	sub.w	r3, r3, #2
 8006b06:	bfcc      	ite	gt
 8006b08:	2500      	movgt	r5, #0
 8006b0a:	2501      	movle	r5, #1
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	f200 8085 	bhi.w	8006c1c <_dtoa_r+0x30c>
 8006b12:	e8df f003 	tbb	[pc, r3]
 8006b16:	3b2e      	.short	0x3b2e
 8006b18:	5839      	.short	0x5839
 8006b1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b1e:	441d      	add	r5, r3
 8006b20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	bfc1      	itttt	gt
 8006b28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006b30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006b34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006b38:	bfd6      	itet	le
 8006b3a:	f1c3 0320 	rsble	r3, r3, #32
 8006b3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b42:	fa06 f003 	lslle.w	r0, r6, r3
 8006b46:	f7f9 fcfd 	bl	8000544 <__aeabi_ui2d>
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006b50:	3d01      	subs	r5, #1
 8006b52:	920e      	str	r2, [sp, #56]	; 0x38
 8006b54:	e76f      	b.n	8006a36 <_dtoa_r+0x126>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e7b3      	b.n	8006ac2 <_dtoa_r+0x1b2>
 8006b5a:	900c      	str	r0, [sp, #48]	; 0x30
 8006b5c:	e7b2      	b.n	8006ac4 <_dtoa_r+0x1b4>
 8006b5e:	9b05      	ldr	r3, [sp, #20]
 8006b60:	eba3 030b 	sub.w	r3, r3, fp
 8006b64:	9305      	str	r3, [sp, #20]
 8006b66:	f1cb 0300 	rsb	r3, fp, #0
 8006b6a:	9308      	str	r3, [sp, #32]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b70:	e7bf      	b.n	8006af2 <_dtoa_r+0x1e2>
 8006b72:	2300      	movs	r3, #0
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dc52      	bgt.n	8006c22 <_dtoa_r+0x312>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	461a      	mov	r2, r3
 8006b84:	920a      	str	r2, [sp, #40]	; 0x28
 8006b86:	e00b      	b.n	8006ba0 <_dtoa_r+0x290>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7f3      	b.n	8006b74 <_dtoa_r+0x264>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b92:	445b      	add	r3, fp
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	3301      	adds	r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	9304      	str	r3, [sp, #16]
 8006b9c:	bfb8      	it	lt
 8006b9e:	2301      	movlt	r3, #1
 8006ba0:	69e0      	ldr	r0, [r4, #28]
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	f102 0614 	add.w	r6, r2, #20
 8006baa:	429e      	cmp	r6, r3
 8006bac:	d93d      	bls.n	8006c2a <_dtoa_r+0x31a>
 8006bae:	6041      	str	r1, [r0, #4]
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fd9f 	bl	80076f4 <_Balloc>
 8006bb6:	9000      	str	r0, [sp, #0]
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d139      	bne.n	8006c30 <_dtoa_r+0x320>
 8006bbc:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <_dtoa_r+0x308>)
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	f240 11af 	movw	r1, #431	; 0x1af
 8006bc4:	e6bd      	b.n	8006942 <_dtoa_r+0x32>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e7e1      	b.n	8006b8e <_dtoa_r+0x27e>
 8006bca:	2501      	movs	r5, #1
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	9509      	str	r5, [sp, #36]	; 0x24
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2312      	movs	r3, #18
 8006bde:	e7d1      	b.n	8006b84 <_dtoa_r+0x274>
 8006be0:	636f4361 	.word	0x636f4361
 8006be4:	3fd287a7 	.word	0x3fd287a7
 8006be8:	8b60c8b3 	.word	0x8b60c8b3
 8006bec:	3fc68a28 	.word	0x3fc68a28
 8006bf0:	509f79fb 	.word	0x509f79fb
 8006bf4:	3fd34413 	.word	0x3fd34413
 8006bf8:	080087f5 	.word	0x080087f5
 8006bfc:	0800880c 	.word	0x0800880c
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	080087f1 	.word	0x080087f1
 8006c08:	080087e8 	.word	0x080087e8
 8006c0c:	080087c5 	.word	0x080087c5
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	080088f8 	.word	0x080088f8
 8006c18:	08008864 	.word	0x08008864
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c20:	e7d7      	b.n	8006bd2 <_dtoa_r+0x2c2>
 8006c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	e7ba      	b.n	8006ba0 <_dtoa_r+0x290>
 8006c2a:	3101      	adds	r1, #1
 8006c2c:	0052      	lsls	r2, r2, #1
 8006c2e:	e7ba      	b.n	8006ba6 <_dtoa_r+0x296>
 8006c30:	69e3      	ldr	r3, [r4, #28]
 8006c32:	9a00      	ldr	r2, [sp, #0]
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	9b04      	ldr	r3, [sp, #16]
 8006c38:	2b0e      	cmp	r3, #14
 8006c3a:	f200 80a8 	bhi.w	8006d8e <_dtoa_r+0x47e>
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	f000 80a5 	beq.w	8006d8e <_dtoa_r+0x47e>
 8006c44:	f1bb 0f00 	cmp.w	fp, #0
 8006c48:	dd38      	ble.n	8006cbc <_dtoa_r+0x3ac>
 8006c4a:	4bc0      	ldr	r3, [pc, #768]	; (8006f4c <_dtoa_r+0x63c>)
 8006c4c:	f00b 020f 	and.w	r2, fp, #15
 8006c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006c58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006c5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006c60:	d019      	beq.n	8006c96 <_dtoa_r+0x386>
 8006c62:	4bbb      	ldr	r3, [pc, #748]	; (8006f50 <_dtoa_r+0x640>)
 8006c64:	ec51 0b18 	vmov	r0, r1, d8
 8006c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c6c:	f7f9 fe0e 	bl	800088c <__aeabi_ddiv>
 8006c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c74:	f008 080f 	and.w	r8, r8, #15
 8006c78:	2503      	movs	r5, #3
 8006c7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006f50 <_dtoa_r+0x640>
 8006c7e:	f1b8 0f00 	cmp.w	r8, #0
 8006c82:	d10a      	bne.n	8006c9a <_dtoa_r+0x38a>
 8006c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c88:	4632      	mov	r2, r6
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	f7f9 fdfe 	bl	800088c <__aeabi_ddiv>
 8006c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c94:	e02b      	b.n	8006cee <_dtoa_r+0x3de>
 8006c96:	2502      	movs	r5, #2
 8006c98:	e7ef      	b.n	8006c7a <_dtoa_r+0x36a>
 8006c9a:	f018 0f01 	tst.w	r8, #1
 8006c9e:	d008      	beq.n	8006cb2 <_dtoa_r+0x3a2>
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ca8:	f7f9 fcc6 	bl	8000638 <__aeabi_dmul>
 8006cac:	3501      	adds	r5, #1
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006cb6:	f109 0908 	add.w	r9, r9, #8
 8006cba:	e7e0      	b.n	8006c7e <_dtoa_r+0x36e>
 8006cbc:	f000 809f 	beq.w	8006dfe <_dtoa_r+0x4ee>
 8006cc0:	f1cb 0600 	rsb	r6, fp, #0
 8006cc4:	4ba1      	ldr	r3, [pc, #644]	; (8006f4c <_dtoa_r+0x63c>)
 8006cc6:	4fa2      	ldr	r7, [pc, #648]	; (8006f50 <_dtoa_r+0x640>)
 8006cc8:	f006 020f 	and.w	r2, r6, #15
 8006ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	ec51 0b18 	vmov	r0, r1, d8
 8006cd8:	f7f9 fcae 	bl	8000638 <__aeabi_dmul>
 8006cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce0:	1136      	asrs	r6, r6, #4
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2502      	movs	r5, #2
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d17e      	bne.n	8006de8 <_dtoa_r+0x4d8>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1d0      	bne.n	8006c90 <_dtoa_r+0x380>
 8006cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8084 	beq.w	8006e02 <_dtoa_r+0x4f2>
 8006cfa:	4b96      	ldr	r3, [pc, #600]	; (8006f54 <_dtoa_r+0x644>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4649      	mov	r1, r9
 8006d02:	f7f9 ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d07b      	beq.n	8006e02 <_dtoa_r+0x4f2>
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d078      	beq.n	8006e02 <_dtoa_r+0x4f2>
 8006d10:	9b01      	ldr	r3, [sp, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dd39      	ble.n	8006d8a <_dtoa_r+0x47a>
 8006d16:	4b90      	ldr	r3, [pc, #576]	; (8006f58 <_dtoa_r+0x648>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f7f9 fc8b 	bl	8000638 <__aeabi_dmul>
 8006d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d26:	9e01      	ldr	r6, [sp, #4]
 8006d28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7f9 fc16 	bl	8000564 <__aeabi_i2d>
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	f7f9 fc7c 	bl	8000638 <__aeabi_dmul>
 8006d40:	4b86      	ldr	r3, [pc, #536]	; (8006f5c <_dtoa_r+0x64c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 fac2 	bl	80002cc <__adddf3>
 8006d48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	2e00      	cmp	r6, #0
 8006d54:	d158      	bne.n	8006e08 <_dtoa_r+0x4f8>
 8006d56:	4b82      	ldr	r3, [pc, #520]	; (8006f60 <_dtoa_r+0x650>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fab3 	bl	80002c8 <__aeabi_dsub>
 8006d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d66:	4680      	mov	r8, r0
 8006d68:	4689      	mov	r9, r1
 8006d6a:	f7f9 fef5 	bl	8000b58 <__aeabi_dcmpgt>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f040 8296 	bne.w	80072a0 <_dtoa_r+0x990>
 8006d74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d78:	4640      	mov	r0, r8
 8006d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 fecc 	bl	8000b1c <__aeabi_dcmplt>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f040 8289 	bne.w	800729c <_dtoa_r+0x98c>
 8006d8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f2c0 814e 	blt.w	8007032 <_dtoa_r+0x722>
 8006d96:	f1bb 0f0e 	cmp.w	fp, #14
 8006d9a:	f300 814a 	bgt.w	8007032 <_dtoa_r+0x722>
 8006d9e:	4b6b      	ldr	r3, [pc, #428]	; (8006f4c <_dtoa_r+0x63c>)
 8006da0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f280 80dc 	bge.w	8006f68 <_dtoa_r+0x658>
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f300 80d8 	bgt.w	8006f68 <_dtoa_r+0x658>
 8006db8:	f040 826f 	bne.w	800729a <_dtoa_r+0x98a>
 8006dbc:	4b68      	ldr	r3, [pc, #416]	; (8006f60 <_dtoa_r+0x650>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	f7f9 fc38 	bl	8000638 <__aeabi_dmul>
 8006dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dcc:	f7f9 feba 	bl	8000b44 <__aeabi_dcmpge>
 8006dd0:	9e04      	ldr	r6, [sp, #16]
 8006dd2:	4637      	mov	r7, r6
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f040 8245 	bne.w	8007264 <_dtoa_r+0x954>
 8006dda:	9d00      	ldr	r5, [sp, #0]
 8006ddc:	2331      	movs	r3, #49	; 0x31
 8006dde:	f805 3b01 	strb.w	r3, [r5], #1
 8006de2:	f10b 0b01 	add.w	fp, fp, #1
 8006de6:	e241      	b.n	800726c <_dtoa_r+0x95c>
 8006de8:	07f2      	lsls	r2, r6, #31
 8006dea:	d505      	bpl.n	8006df8 <_dtoa_r+0x4e8>
 8006dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df0:	f7f9 fc22 	bl	8000638 <__aeabi_dmul>
 8006df4:	3501      	adds	r5, #1
 8006df6:	2301      	movs	r3, #1
 8006df8:	1076      	asrs	r6, r6, #1
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	e773      	b.n	8006ce6 <_dtoa_r+0x3d6>
 8006dfe:	2502      	movs	r5, #2
 8006e00:	e775      	b.n	8006cee <_dtoa_r+0x3de>
 8006e02:	9e04      	ldr	r6, [sp, #16]
 8006e04:	465f      	mov	r7, fp
 8006e06:	e792      	b.n	8006d2e <_dtoa_r+0x41e>
 8006e08:	9900      	ldr	r1, [sp, #0]
 8006e0a:	4b50      	ldr	r3, [pc, #320]	; (8006f4c <_dtoa_r+0x63c>)
 8006e0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e10:	4431      	add	r1, r6
 8006e12:	9102      	str	r1, [sp, #8]
 8006e14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e16:	eeb0 9a47 	vmov.f32	s18, s14
 8006e1a:	eef0 9a67 	vmov.f32	s19, s15
 8006e1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e26:	2900      	cmp	r1, #0
 8006e28:	d044      	beq.n	8006eb4 <_dtoa_r+0x5a4>
 8006e2a:	494e      	ldr	r1, [pc, #312]	; (8006f64 <_dtoa_r+0x654>)
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7f9 fd2d 	bl	800088c <__aeabi_ddiv>
 8006e32:	ec53 2b19 	vmov	r2, r3, d9
 8006e36:	f7f9 fa47 	bl	80002c8 <__aeabi_dsub>
 8006e3a:	9d00      	ldr	r5, [sp, #0]
 8006e3c:	ec41 0b19 	vmov	d9, r0, r1
 8006e40:	4649      	mov	r1, r9
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7f9 fea8 	bl	8000b98 <__aeabi_d2iz>
 8006e48:	4606      	mov	r6, r0
 8006e4a:	f7f9 fb8b 	bl	8000564 <__aeabi_i2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f7f9 fa37 	bl	80002c8 <__aeabi_dsub>
 8006e5a:	3630      	adds	r6, #48	; 0x30
 8006e5c:	f805 6b01 	strb.w	r6, [r5], #1
 8006e60:	ec53 2b19 	vmov	r2, r3, d9
 8006e64:	4680      	mov	r8, r0
 8006e66:	4689      	mov	r9, r1
 8006e68:	f7f9 fe58 	bl	8000b1c <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d164      	bne.n	8006f3a <_dtoa_r+0x62a>
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	4937      	ldr	r1, [pc, #220]	; (8006f54 <_dtoa_r+0x644>)
 8006e76:	2000      	movs	r0, #0
 8006e78:	f7f9 fa26 	bl	80002c8 <__aeabi_dsub>
 8006e7c:	ec53 2b19 	vmov	r2, r3, d9
 8006e80:	f7f9 fe4c 	bl	8000b1c <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f040 80b6 	bne.w	8006ff6 <_dtoa_r+0x6e6>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	f43f af7c 	beq.w	8006d8a <_dtoa_r+0x47a>
 8006e92:	4b31      	ldr	r3, [pc, #196]	; (8006f58 <_dtoa_r+0x648>)
 8006e94:	ec51 0b19 	vmov	r0, r1, d9
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7f9 fbcd 	bl	8000638 <__aeabi_dmul>
 8006e9e:	4b2e      	ldr	r3, [pc, #184]	; (8006f58 <_dtoa_r+0x648>)
 8006ea0:	ec41 0b19 	vmov	d9, r0, r1
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	f7f9 fbc5 	bl	8000638 <__aeabi_dmul>
 8006eae:	4680      	mov	r8, r0
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	e7c5      	b.n	8006e40 <_dtoa_r+0x530>
 8006eb4:	ec51 0b17 	vmov	r0, r1, d7
 8006eb8:	f7f9 fbbe 	bl	8000638 <__aeabi_dmul>
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	9d00      	ldr	r5, [sp, #0]
 8006ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec2:	ec41 0b19 	vmov	d9, r0, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	f7f9 fe65 	bl	8000b98 <__aeabi_d2iz>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	f7f9 fb48 	bl	8000564 <__aeabi_i2d>
 8006ed4:	3630      	adds	r6, #48	; 0x30
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 f9f3 	bl	80002c8 <__aeabi_dsub>
 8006ee2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ee6:	9b02      	ldr	r3, [sp, #8]
 8006ee8:	429d      	cmp	r5, r3
 8006eea:	4680      	mov	r8, r0
 8006eec:	4689      	mov	r9, r1
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	d124      	bne.n	8006f3e <_dtoa_r+0x62e>
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <_dtoa_r+0x654>)
 8006ef6:	ec51 0b19 	vmov	r0, r1, d9
 8006efa:	f7f9 f9e7 	bl	80002cc <__adddf3>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4640      	mov	r0, r8
 8006f04:	4649      	mov	r1, r9
 8006f06:	f7f9 fe27 	bl	8000b58 <__aeabi_dcmpgt>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d173      	bne.n	8006ff6 <_dtoa_r+0x6e6>
 8006f0e:	ec53 2b19 	vmov	r2, r3, d9
 8006f12:	4914      	ldr	r1, [pc, #80]	; (8006f64 <_dtoa_r+0x654>)
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7f9 f9d7 	bl	80002c8 <__aeabi_dsub>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 fdfb 	bl	8000b1c <__aeabi_dcmplt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f43f af2f 	beq.w	8006d8a <_dtoa_r+0x47a>
 8006f2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f2e:	1e6b      	subs	r3, r5, #1
 8006f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d0f8      	beq.n	8006f2c <_dtoa_r+0x61c>
 8006f3a:	46bb      	mov	fp, r7
 8006f3c:	e04a      	b.n	8006fd4 <_dtoa_r+0x6c4>
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <_dtoa_r+0x648>)
 8006f40:	f7f9 fb7a 	bl	8000638 <__aeabi_dmul>
 8006f44:	4680      	mov	r8, r0
 8006f46:	4689      	mov	r9, r1
 8006f48:	e7bd      	b.n	8006ec6 <_dtoa_r+0x5b6>
 8006f4a:	bf00      	nop
 8006f4c:	080088f8 	.word	0x080088f8
 8006f50:	080088d0 	.word	0x080088d0
 8006f54:	3ff00000 	.word	0x3ff00000
 8006f58:	40240000 	.word	0x40240000
 8006f5c:	401c0000 	.word	0x401c0000
 8006f60:	40140000 	.word	0x40140000
 8006f64:	3fe00000 	.word	0x3fe00000
 8006f68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f6c:	9d00      	ldr	r5, [sp, #0]
 8006f6e:	4642      	mov	r2, r8
 8006f70:	464b      	mov	r3, r9
 8006f72:	4630      	mov	r0, r6
 8006f74:	4639      	mov	r1, r7
 8006f76:	f7f9 fc89 	bl	800088c <__aeabi_ddiv>
 8006f7a:	f7f9 fe0d 	bl	8000b98 <__aeabi_d2iz>
 8006f7e:	9001      	str	r0, [sp, #4]
 8006f80:	f7f9 faf0 	bl	8000564 <__aeabi_i2d>
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	f7f9 fb56 	bl	8000638 <__aeabi_dmul>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4630      	mov	r0, r6
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 f998 	bl	80002c8 <__aeabi_dsub>
 8006f98:	9e01      	ldr	r6, [sp, #4]
 8006f9a:	9f04      	ldr	r7, [sp, #16]
 8006f9c:	3630      	adds	r6, #48	; 0x30
 8006f9e:	f805 6b01 	strb.w	r6, [r5], #1
 8006fa2:	9e00      	ldr	r6, [sp, #0]
 8006fa4:	1bae      	subs	r6, r5, r6
 8006fa6:	42b7      	cmp	r7, r6
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	d134      	bne.n	8007018 <_dtoa_r+0x708>
 8006fae:	f7f9 f98d 	bl	80002cc <__adddf3>
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	f7f9 fdcd 	bl	8000b58 <__aeabi_dcmpgt>
 8006fbe:	b9c8      	cbnz	r0, 8006ff4 <_dtoa_r+0x6e4>
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 8006fcc:	b110      	cbz	r0, 8006fd4 <_dtoa_r+0x6c4>
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	07db      	lsls	r3, r3, #31
 8006fd2:	d40f      	bmi.n	8006ff4 <_dtoa_r+0x6e4>
 8006fd4:	4651      	mov	r1, sl
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 fbcc 	bl	8007774 <_Bfree>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fe0:	702b      	strb	r3, [r5, #0]
 8006fe2:	f10b 0301 	add.w	r3, fp, #1
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f43f ace2 	beq.w	80069b4 <_dtoa_r+0xa4>
 8006ff0:	601d      	str	r5, [r3, #0]
 8006ff2:	e4df      	b.n	80069b4 <_dtoa_r+0xa4>
 8006ff4:	465f      	mov	r7, fp
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffe:	2a39      	cmp	r2, #57	; 0x39
 8007000:	d106      	bne.n	8007010 <_dtoa_r+0x700>
 8007002:	9a00      	ldr	r2, [sp, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1f7      	bne.n	8006ff8 <_dtoa_r+0x6e8>
 8007008:	9900      	ldr	r1, [sp, #0]
 800700a:	2230      	movs	r2, #48	; 0x30
 800700c:	3701      	adds	r7, #1
 800700e:	700a      	strb	r2, [r1, #0]
 8007010:	781a      	ldrb	r2, [r3, #0]
 8007012:	3201      	adds	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e790      	b.n	8006f3a <_dtoa_r+0x62a>
 8007018:	4ba3      	ldr	r3, [pc, #652]	; (80072a8 <_dtoa_r+0x998>)
 800701a:	2200      	movs	r2, #0
 800701c:	f7f9 fb0c 	bl	8000638 <__aeabi_dmul>
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4606      	mov	r6, r0
 8007026:	460f      	mov	r7, r1
 8007028:	f7f9 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800702c:	2800      	cmp	r0, #0
 800702e:	d09e      	beq.n	8006f6e <_dtoa_r+0x65e>
 8007030:	e7d0      	b.n	8006fd4 <_dtoa_r+0x6c4>
 8007032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007034:	2a00      	cmp	r2, #0
 8007036:	f000 80ca 	beq.w	80071ce <_dtoa_r+0x8be>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	2a01      	cmp	r2, #1
 800703e:	f300 80ad 	bgt.w	800719c <_dtoa_r+0x88c>
 8007042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007044:	2a00      	cmp	r2, #0
 8007046:	f000 80a5 	beq.w	8007194 <_dtoa_r+0x884>
 800704a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800704e:	9e08      	ldr	r6, [sp, #32]
 8007050:	9d05      	ldr	r5, [sp, #20]
 8007052:	9a05      	ldr	r2, [sp, #20]
 8007054:	441a      	add	r2, r3
 8007056:	9205      	str	r2, [sp, #20]
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	2101      	movs	r1, #1
 800705c:	441a      	add	r2, r3
 800705e:	4620      	mov	r0, r4
 8007060:	9206      	str	r2, [sp, #24]
 8007062:	f000 fc3d 	bl	80078e0 <__i2b>
 8007066:	4607      	mov	r7, r0
 8007068:	b165      	cbz	r5, 8007084 <_dtoa_r+0x774>
 800706a:	9b06      	ldr	r3, [sp, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd09      	ble.n	8007084 <_dtoa_r+0x774>
 8007070:	42ab      	cmp	r3, r5
 8007072:	9a05      	ldr	r2, [sp, #20]
 8007074:	bfa8      	it	ge
 8007076:	462b      	movge	r3, r5
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	9205      	str	r2, [sp, #20]
 800707c:	9a06      	ldr	r2, [sp, #24]
 800707e:	1aed      	subs	r5, r5, r3
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	9306      	str	r3, [sp, #24]
 8007084:	9b08      	ldr	r3, [sp, #32]
 8007086:	b1f3      	cbz	r3, 80070c6 <_dtoa_r+0x7b6>
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80a3 	beq.w	80071d6 <_dtoa_r+0x8c6>
 8007090:	2e00      	cmp	r6, #0
 8007092:	dd10      	ble.n	80070b6 <_dtoa_r+0x7a6>
 8007094:	4639      	mov	r1, r7
 8007096:	4632      	mov	r2, r6
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fce1 	bl	8007a60 <__pow5mult>
 800709e:	4652      	mov	r2, sl
 80070a0:	4601      	mov	r1, r0
 80070a2:	4607      	mov	r7, r0
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fc31 	bl	800790c <__multiply>
 80070aa:	4651      	mov	r1, sl
 80070ac:	4680      	mov	r8, r0
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fb60 	bl	8007774 <_Bfree>
 80070b4:	46c2      	mov	sl, r8
 80070b6:	9b08      	ldr	r3, [sp, #32]
 80070b8:	1b9a      	subs	r2, r3, r6
 80070ba:	d004      	beq.n	80070c6 <_dtoa_r+0x7b6>
 80070bc:	4651      	mov	r1, sl
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fcce 	bl	8007a60 <__pow5mult>
 80070c4:	4682      	mov	sl, r0
 80070c6:	2101      	movs	r1, #1
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 fc09 	bl	80078e0 <__i2b>
 80070ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	4606      	mov	r6, r0
 80070d4:	f340 8081 	ble.w	80071da <_dtoa_r+0x8ca>
 80070d8:	461a      	mov	r2, r3
 80070da:	4601      	mov	r1, r0
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fcbf 	bl	8007a60 <__pow5mult>
 80070e2:	9b07      	ldr	r3, [sp, #28]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	4606      	mov	r6, r0
 80070e8:	dd7a      	ble.n	80071e0 <_dtoa_r+0x8d0>
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	6933      	ldr	r3, [r6, #16]
 80070f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070f4:	6918      	ldr	r0, [r3, #16]
 80070f6:	f000 fba5 	bl	8007844 <__hi0bits>
 80070fa:	f1c0 0020 	rsb	r0, r0, #32
 80070fe:	9b06      	ldr	r3, [sp, #24]
 8007100:	4418      	add	r0, r3
 8007102:	f010 001f 	ands.w	r0, r0, #31
 8007106:	f000 8094 	beq.w	8007232 <_dtoa_r+0x922>
 800710a:	f1c0 0320 	rsb	r3, r0, #32
 800710e:	2b04      	cmp	r3, #4
 8007110:	f340 8085 	ble.w	800721e <_dtoa_r+0x90e>
 8007114:	9b05      	ldr	r3, [sp, #20]
 8007116:	f1c0 001c 	rsb	r0, r0, #28
 800711a:	4403      	add	r3, r0
 800711c:	9305      	str	r3, [sp, #20]
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	4403      	add	r3, r0
 8007122:	4405      	add	r5, r0
 8007124:	9306      	str	r3, [sp, #24]
 8007126:	9b05      	ldr	r3, [sp, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	dd05      	ble.n	8007138 <_dtoa_r+0x828>
 800712c:	4651      	mov	r1, sl
 800712e:	461a      	mov	r2, r3
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fcef 	bl	8007b14 <__lshift>
 8007136:	4682      	mov	sl, r0
 8007138:	9b06      	ldr	r3, [sp, #24]
 800713a:	2b00      	cmp	r3, #0
 800713c:	dd05      	ble.n	800714a <_dtoa_r+0x83a>
 800713e:	4631      	mov	r1, r6
 8007140:	461a      	mov	r2, r3
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fce6 	bl	8007b14 <__lshift>
 8007148:	4606      	mov	r6, r0
 800714a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d072      	beq.n	8007236 <_dtoa_r+0x926>
 8007150:	4631      	mov	r1, r6
 8007152:	4650      	mov	r0, sl
 8007154:	f000 fd4a 	bl	8007bec <__mcmp>
 8007158:	2800      	cmp	r0, #0
 800715a:	da6c      	bge.n	8007236 <_dtoa_r+0x926>
 800715c:	2300      	movs	r3, #0
 800715e:	4651      	mov	r1, sl
 8007160:	220a      	movs	r2, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fb28 	bl	80077b8 <__multadd>
 8007168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800716e:	4682      	mov	sl, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 81b0 	beq.w	80074d6 <_dtoa_r+0xbc6>
 8007176:	2300      	movs	r3, #0
 8007178:	4639      	mov	r1, r7
 800717a:	220a      	movs	r2, #10
 800717c:	4620      	mov	r0, r4
 800717e:	f000 fb1b 	bl	80077b8 <__multadd>
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	4607      	mov	r7, r0
 8007188:	f300 8096 	bgt.w	80072b8 <_dtoa_r+0x9a8>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dc59      	bgt.n	8007246 <_dtoa_r+0x936>
 8007192:	e091      	b.n	80072b8 <_dtoa_r+0x9a8>
 8007194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800719a:	e758      	b.n	800704e <_dtoa_r+0x73e>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	1e5e      	subs	r6, r3, #1
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	bfbf      	itttt	lt
 80071a6:	9b08      	ldrlt	r3, [sp, #32]
 80071a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80071aa:	9608      	strlt	r6, [sp, #32]
 80071ac:	1af3      	sublt	r3, r6, r3
 80071ae:	bfb4      	ite	lt
 80071b0:	18d2      	addlt	r2, r2, r3
 80071b2:	1b9e      	subge	r6, r3, r6
 80071b4:	9b04      	ldr	r3, [sp, #16]
 80071b6:	bfbc      	itt	lt
 80071b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80071ba:	2600      	movlt	r6, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfb7      	itett	lt
 80071c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80071c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80071c8:	1a9d      	sublt	r5, r3, r2
 80071ca:	2300      	movlt	r3, #0
 80071cc:	e741      	b.n	8007052 <_dtoa_r+0x742>
 80071ce:	9e08      	ldr	r6, [sp, #32]
 80071d0:	9d05      	ldr	r5, [sp, #20]
 80071d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80071d4:	e748      	b.n	8007068 <_dtoa_r+0x758>
 80071d6:	9a08      	ldr	r2, [sp, #32]
 80071d8:	e770      	b.n	80070bc <_dtoa_r+0x7ac>
 80071da:	9b07      	ldr	r3, [sp, #28]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	dc19      	bgt.n	8007214 <_dtoa_r+0x904>
 80071e0:	9b02      	ldr	r3, [sp, #8]
 80071e2:	b9bb      	cbnz	r3, 8007214 <_dtoa_r+0x904>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ea:	b99b      	cbnz	r3, 8007214 <_dtoa_r+0x904>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f2:	0d1b      	lsrs	r3, r3, #20
 80071f4:	051b      	lsls	r3, r3, #20
 80071f6:	b183      	cbz	r3, 800721a <_dtoa_r+0x90a>
 80071f8:	9b05      	ldr	r3, [sp, #20]
 80071fa:	3301      	adds	r3, #1
 80071fc:	9305      	str	r3, [sp, #20]
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	3301      	adds	r3, #1
 8007202:	9306      	str	r3, [sp, #24]
 8007204:	f04f 0801 	mov.w	r8, #1
 8007208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800720a:	2b00      	cmp	r3, #0
 800720c:	f47f af6f 	bne.w	80070ee <_dtoa_r+0x7de>
 8007210:	2001      	movs	r0, #1
 8007212:	e774      	b.n	80070fe <_dtoa_r+0x7ee>
 8007214:	f04f 0800 	mov.w	r8, #0
 8007218:	e7f6      	b.n	8007208 <_dtoa_r+0x8f8>
 800721a:	4698      	mov	r8, r3
 800721c:	e7f4      	b.n	8007208 <_dtoa_r+0x8f8>
 800721e:	d082      	beq.n	8007126 <_dtoa_r+0x816>
 8007220:	9a05      	ldr	r2, [sp, #20]
 8007222:	331c      	adds	r3, #28
 8007224:	441a      	add	r2, r3
 8007226:	9205      	str	r2, [sp, #20]
 8007228:	9a06      	ldr	r2, [sp, #24]
 800722a:	441a      	add	r2, r3
 800722c:	441d      	add	r5, r3
 800722e:	9206      	str	r2, [sp, #24]
 8007230:	e779      	b.n	8007126 <_dtoa_r+0x816>
 8007232:	4603      	mov	r3, r0
 8007234:	e7f4      	b.n	8007220 <_dtoa_r+0x910>
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc37      	bgt.n	80072ac <_dtoa_r+0x99c>
 800723c:	9b07      	ldr	r3, [sp, #28]
 800723e:	2b02      	cmp	r3, #2
 8007240:	dd34      	ble.n	80072ac <_dtoa_r+0x99c>
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	9b01      	ldr	r3, [sp, #4]
 8007248:	b963      	cbnz	r3, 8007264 <_dtoa_r+0x954>
 800724a:	4631      	mov	r1, r6
 800724c:	2205      	movs	r2, #5
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fab2 	bl	80077b8 <__multadd>
 8007254:	4601      	mov	r1, r0
 8007256:	4606      	mov	r6, r0
 8007258:	4650      	mov	r0, sl
 800725a:	f000 fcc7 	bl	8007bec <__mcmp>
 800725e:	2800      	cmp	r0, #0
 8007260:	f73f adbb 	bgt.w	8006dda <_dtoa_r+0x4ca>
 8007264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007266:	9d00      	ldr	r5, [sp, #0]
 8007268:	ea6f 0b03 	mvn.w	fp, r3
 800726c:	f04f 0800 	mov.w	r8, #0
 8007270:	4631      	mov	r1, r6
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fa7e 	bl	8007774 <_Bfree>
 8007278:	2f00      	cmp	r7, #0
 800727a:	f43f aeab 	beq.w	8006fd4 <_dtoa_r+0x6c4>
 800727e:	f1b8 0f00 	cmp.w	r8, #0
 8007282:	d005      	beq.n	8007290 <_dtoa_r+0x980>
 8007284:	45b8      	cmp	r8, r7
 8007286:	d003      	beq.n	8007290 <_dtoa_r+0x980>
 8007288:	4641      	mov	r1, r8
 800728a:	4620      	mov	r0, r4
 800728c:	f000 fa72 	bl	8007774 <_Bfree>
 8007290:	4639      	mov	r1, r7
 8007292:	4620      	mov	r0, r4
 8007294:	f000 fa6e 	bl	8007774 <_Bfree>
 8007298:	e69c      	b.n	8006fd4 <_dtoa_r+0x6c4>
 800729a:	2600      	movs	r6, #0
 800729c:	4637      	mov	r7, r6
 800729e:	e7e1      	b.n	8007264 <_dtoa_r+0x954>
 80072a0:	46bb      	mov	fp, r7
 80072a2:	4637      	mov	r7, r6
 80072a4:	e599      	b.n	8006dda <_dtoa_r+0x4ca>
 80072a6:	bf00      	nop
 80072a8:	40240000 	.word	0x40240000
 80072ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80c8 	beq.w	8007444 <_dtoa_r+0xb34>
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	dd05      	ble.n	80072c8 <_dtoa_r+0x9b8>
 80072bc:	4639      	mov	r1, r7
 80072be:	462a      	mov	r2, r5
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fc27 	bl	8007b14 <__lshift>
 80072c6:	4607      	mov	r7, r0
 80072c8:	f1b8 0f00 	cmp.w	r8, #0
 80072cc:	d05b      	beq.n	8007386 <_dtoa_r+0xa76>
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fa0f 	bl	80076f4 <_Balloc>
 80072d6:	4605      	mov	r5, r0
 80072d8:	b928      	cbnz	r0, 80072e6 <_dtoa_r+0x9d6>
 80072da:	4b83      	ldr	r3, [pc, #524]	; (80074e8 <_dtoa_r+0xbd8>)
 80072dc:	4602      	mov	r2, r0
 80072de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80072e2:	f7ff bb2e 	b.w	8006942 <_dtoa_r+0x32>
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	3202      	adds	r2, #2
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	f107 010c 	add.w	r1, r7, #12
 80072f0:	300c      	adds	r0, #12
 80072f2:	f001 f801 	bl	80082f8 <memcpy>
 80072f6:	2201      	movs	r2, #1
 80072f8:	4629      	mov	r1, r5
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fc0a 	bl	8007b14 <__lshift>
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800730a:	4413      	add	r3, r2
 800730c:	9308      	str	r3, [sp, #32]
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	46b8      	mov	r8, r7
 8007316:	9306      	str	r3, [sp, #24]
 8007318:	4607      	mov	r7, r0
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	4631      	mov	r1, r6
 800731e:	3b01      	subs	r3, #1
 8007320:	4650      	mov	r0, sl
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	f7ff fa69 	bl	80067fa <quorem>
 8007328:	4641      	mov	r1, r8
 800732a:	9002      	str	r0, [sp, #8]
 800732c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007330:	4650      	mov	r0, sl
 8007332:	f000 fc5b 	bl	8007bec <__mcmp>
 8007336:	463a      	mov	r2, r7
 8007338:	9005      	str	r0, [sp, #20]
 800733a:	4631      	mov	r1, r6
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fc71 	bl	8007c24 <__mdiff>
 8007342:	68c2      	ldr	r2, [r0, #12]
 8007344:	4605      	mov	r5, r0
 8007346:	bb02      	cbnz	r2, 800738a <_dtoa_r+0xa7a>
 8007348:	4601      	mov	r1, r0
 800734a:	4650      	mov	r0, sl
 800734c:	f000 fc4e 	bl	8007bec <__mcmp>
 8007350:	4602      	mov	r2, r0
 8007352:	4629      	mov	r1, r5
 8007354:	4620      	mov	r0, r4
 8007356:	9209      	str	r2, [sp, #36]	; 0x24
 8007358:	f000 fa0c 	bl	8007774 <_Bfree>
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007360:	9d04      	ldr	r5, [sp, #16]
 8007362:	ea43 0102 	orr.w	r1, r3, r2
 8007366:	9b06      	ldr	r3, [sp, #24]
 8007368:	4319      	orrs	r1, r3
 800736a:	d110      	bne.n	800738e <_dtoa_r+0xa7e>
 800736c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007370:	d029      	beq.n	80073c6 <_dtoa_r+0xab6>
 8007372:	9b05      	ldr	r3, [sp, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dd02      	ble.n	800737e <_dtoa_r+0xa6e>
 8007378:	9b02      	ldr	r3, [sp, #8]
 800737a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	f883 9000 	strb.w	r9, [r3]
 8007384:	e774      	b.n	8007270 <_dtoa_r+0x960>
 8007386:	4638      	mov	r0, r7
 8007388:	e7ba      	b.n	8007300 <_dtoa_r+0x9f0>
 800738a:	2201      	movs	r2, #1
 800738c:	e7e1      	b.n	8007352 <_dtoa_r+0xa42>
 800738e:	9b05      	ldr	r3, [sp, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db04      	blt.n	800739e <_dtoa_r+0xa8e>
 8007394:	9907      	ldr	r1, [sp, #28]
 8007396:	430b      	orrs	r3, r1
 8007398:	9906      	ldr	r1, [sp, #24]
 800739a:	430b      	orrs	r3, r1
 800739c:	d120      	bne.n	80073e0 <_dtoa_r+0xad0>
 800739e:	2a00      	cmp	r2, #0
 80073a0:	dded      	ble.n	800737e <_dtoa_r+0xa6e>
 80073a2:	4651      	mov	r1, sl
 80073a4:	2201      	movs	r2, #1
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 fbb4 	bl	8007b14 <__lshift>
 80073ac:	4631      	mov	r1, r6
 80073ae:	4682      	mov	sl, r0
 80073b0:	f000 fc1c 	bl	8007bec <__mcmp>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	dc03      	bgt.n	80073c0 <_dtoa_r+0xab0>
 80073b8:	d1e1      	bne.n	800737e <_dtoa_r+0xa6e>
 80073ba:	f019 0f01 	tst.w	r9, #1
 80073be:	d0de      	beq.n	800737e <_dtoa_r+0xa6e>
 80073c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073c4:	d1d8      	bne.n	8007378 <_dtoa_r+0xa68>
 80073c6:	9a01      	ldr	r2, [sp, #4]
 80073c8:	2339      	movs	r3, #57	; 0x39
 80073ca:	7013      	strb	r3, [r2, #0]
 80073cc:	462b      	mov	r3, r5
 80073ce:	461d      	mov	r5, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073d6:	2a39      	cmp	r2, #57	; 0x39
 80073d8:	d06c      	beq.n	80074b4 <_dtoa_r+0xba4>
 80073da:	3201      	adds	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e747      	b.n	8007270 <_dtoa_r+0x960>
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	dd07      	ble.n	80073f4 <_dtoa_r+0xae4>
 80073e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073e8:	d0ed      	beq.n	80073c6 <_dtoa_r+0xab6>
 80073ea:	9a01      	ldr	r2, [sp, #4]
 80073ec:	f109 0301 	add.w	r3, r9, #1
 80073f0:	7013      	strb	r3, [r2, #0]
 80073f2:	e73d      	b.n	8007270 <_dtoa_r+0x960>
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	9a08      	ldr	r2, [sp, #32]
 80073f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d043      	beq.n	8007488 <_dtoa_r+0xb78>
 8007400:	4651      	mov	r1, sl
 8007402:	2300      	movs	r3, #0
 8007404:	220a      	movs	r2, #10
 8007406:	4620      	mov	r0, r4
 8007408:	f000 f9d6 	bl	80077b8 <__multadd>
 800740c:	45b8      	cmp	r8, r7
 800740e:	4682      	mov	sl, r0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	f04f 020a 	mov.w	r2, #10
 8007418:	4641      	mov	r1, r8
 800741a:	4620      	mov	r0, r4
 800741c:	d107      	bne.n	800742e <_dtoa_r+0xb1e>
 800741e:	f000 f9cb 	bl	80077b8 <__multadd>
 8007422:	4680      	mov	r8, r0
 8007424:	4607      	mov	r7, r0
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	e775      	b.n	800731a <_dtoa_r+0xa0a>
 800742e:	f000 f9c3 	bl	80077b8 <__multadd>
 8007432:	4639      	mov	r1, r7
 8007434:	4680      	mov	r8, r0
 8007436:	2300      	movs	r3, #0
 8007438:	220a      	movs	r2, #10
 800743a:	4620      	mov	r0, r4
 800743c:	f000 f9bc 	bl	80077b8 <__multadd>
 8007440:	4607      	mov	r7, r0
 8007442:	e7f0      	b.n	8007426 <_dtoa_r+0xb16>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	9d00      	ldr	r5, [sp, #0]
 800744a:	4631      	mov	r1, r6
 800744c:	4650      	mov	r0, sl
 800744e:	f7ff f9d4 	bl	80067fa <quorem>
 8007452:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007456:	9b00      	ldr	r3, [sp, #0]
 8007458:	f805 9b01 	strb.w	r9, [r5], #1
 800745c:	1aea      	subs	r2, r5, r3
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	4293      	cmp	r3, r2
 8007462:	dd07      	ble.n	8007474 <_dtoa_r+0xb64>
 8007464:	4651      	mov	r1, sl
 8007466:	2300      	movs	r3, #0
 8007468:	220a      	movs	r2, #10
 800746a:	4620      	mov	r0, r4
 800746c:	f000 f9a4 	bl	80077b8 <__multadd>
 8007470:	4682      	mov	sl, r0
 8007472:	e7ea      	b.n	800744a <_dtoa_r+0xb3a>
 8007474:	9b01      	ldr	r3, [sp, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfc8      	it	gt
 800747a:	461d      	movgt	r5, r3
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	bfd8      	it	le
 8007480:	2501      	movle	r5, #1
 8007482:	441d      	add	r5, r3
 8007484:	f04f 0800 	mov.w	r8, #0
 8007488:	4651      	mov	r1, sl
 800748a:	2201      	movs	r2, #1
 800748c:	4620      	mov	r0, r4
 800748e:	f000 fb41 	bl	8007b14 <__lshift>
 8007492:	4631      	mov	r1, r6
 8007494:	4682      	mov	sl, r0
 8007496:	f000 fba9 	bl	8007bec <__mcmp>
 800749a:	2800      	cmp	r0, #0
 800749c:	dc96      	bgt.n	80073cc <_dtoa_r+0xabc>
 800749e:	d102      	bne.n	80074a6 <_dtoa_r+0xb96>
 80074a0:	f019 0f01 	tst.w	r9, #1
 80074a4:	d192      	bne.n	80073cc <_dtoa_r+0xabc>
 80074a6:	462b      	mov	r3, r5
 80074a8:	461d      	mov	r5, r3
 80074aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ae:	2a30      	cmp	r2, #48	; 0x30
 80074b0:	d0fa      	beq.n	80074a8 <_dtoa_r+0xb98>
 80074b2:	e6dd      	b.n	8007270 <_dtoa_r+0x960>
 80074b4:	9a00      	ldr	r2, [sp, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d189      	bne.n	80073ce <_dtoa_r+0xabe>
 80074ba:	f10b 0b01 	add.w	fp, fp, #1
 80074be:	2331      	movs	r3, #49	; 0x31
 80074c0:	e796      	b.n	80073f0 <_dtoa_r+0xae0>
 80074c2:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <_dtoa_r+0xbdc>)
 80074c4:	f7ff ba99 	b.w	80069fa <_dtoa_r+0xea>
 80074c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f47f aa6d 	bne.w	80069aa <_dtoa_r+0x9a>
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <_dtoa_r+0xbe0>)
 80074d2:	f7ff ba92 	b.w	80069fa <_dtoa_r+0xea>
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	dcb5      	bgt.n	8007448 <_dtoa_r+0xb38>
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	f73f aeb1 	bgt.w	8007246 <_dtoa_r+0x936>
 80074e4:	e7b0      	b.n	8007448 <_dtoa_r+0xb38>
 80074e6:	bf00      	nop
 80074e8:	08008864 	.word	0x08008864
 80074ec:	080087c4 	.word	0x080087c4
 80074f0:	080087e8 	.word	0x080087e8

080074f4 <_free_r>:
 80074f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d044      	beq.n	8007584 <_free_r+0x90>
 80074fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074fe:	9001      	str	r0, [sp, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f1a1 0404 	sub.w	r4, r1, #4
 8007506:	bfb8      	it	lt
 8007508:	18e4      	addlt	r4, r4, r3
 800750a:	f000 f8e7 	bl	80076dc <__malloc_lock>
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <_free_r+0x94>)
 8007510:	9801      	ldr	r0, [sp, #4]
 8007512:	6813      	ldr	r3, [r2, #0]
 8007514:	b933      	cbnz	r3, 8007524 <_free_r+0x30>
 8007516:	6063      	str	r3, [r4, #4]
 8007518:	6014      	str	r4, [r2, #0]
 800751a:	b003      	add	sp, #12
 800751c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007520:	f000 b8e2 	b.w	80076e8 <__malloc_unlock>
 8007524:	42a3      	cmp	r3, r4
 8007526:	d908      	bls.n	800753a <_free_r+0x46>
 8007528:	6825      	ldr	r5, [r4, #0]
 800752a:	1961      	adds	r1, r4, r5
 800752c:	428b      	cmp	r3, r1
 800752e:	bf01      	itttt	eq
 8007530:	6819      	ldreq	r1, [r3, #0]
 8007532:	685b      	ldreq	r3, [r3, #4]
 8007534:	1949      	addeq	r1, r1, r5
 8007536:	6021      	streq	r1, [r4, #0]
 8007538:	e7ed      	b.n	8007516 <_free_r+0x22>
 800753a:	461a      	mov	r2, r3
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	b10b      	cbz	r3, 8007544 <_free_r+0x50>
 8007540:	42a3      	cmp	r3, r4
 8007542:	d9fa      	bls.n	800753a <_free_r+0x46>
 8007544:	6811      	ldr	r1, [r2, #0]
 8007546:	1855      	adds	r5, r2, r1
 8007548:	42a5      	cmp	r5, r4
 800754a:	d10b      	bne.n	8007564 <_free_r+0x70>
 800754c:	6824      	ldr	r4, [r4, #0]
 800754e:	4421      	add	r1, r4
 8007550:	1854      	adds	r4, r2, r1
 8007552:	42a3      	cmp	r3, r4
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	d1e0      	bne.n	800751a <_free_r+0x26>
 8007558:	681c      	ldr	r4, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	6053      	str	r3, [r2, #4]
 800755e:	440c      	add	r4, r1
 8007560:	6014      	str	r4, [r2, #0]
 8007562:	e7da      	b.n	800751a <_free_r+0x26>
 8007564:	d902      	bls.n	800756c <_free_r+0x78>
 8007566:	230c      	movs	r3, #12
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	e7d6      	b.n	800751a <_free_r+0x26>
 800756c:	6825      	ldr	r5, [r4, #0]
 800756e:	1961      	adds	r1, r4, r5
 8007570:	428b      	cmp	r3, r1
 8007572:	bf04      	itt	eq
 8007574:	6819      	ldreq	r1, [r3, #0]
 8007576:	685b      	ldreq	r3, [r3, #4]
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	bf04      	itt	eq
 800757c:	1949      	addeq	r1, r1, r5
 800757e:	6021      	streq	r1, [r4, #0]
 8007580:	6054      	str	r4, [r2, #4]
 8007582:	e7ca      	b.n	800751a <_free_r+0x26>
 8007584:	b003      	add	sp, #12
 8007586:	bd30      	pop	{r4, r5, pc}
 8007588:	20000428 	.word	0x20000428

0800758c <malloc>:
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <malloc+0xc>)
 800758e:	4601      	mov	r1, r0
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f000 b823 	b.w	80075dc <_malloc_r>
 8007596:	bf00      	nop
 8007598:	20000068 	.word	0x20000068

0800759c <sbrk_aligned>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	4e0e      	ldr	r6, [pc, #56]	; (80075d8 <sbrk_aligned+0x3c>)
 80075a0:	460c      	mov	r4, r1
 80075a2:	6831      	ldr	r1, [r6, #0]
 80075a4:	4605      	mov	r5, r0
 80075a6:	b911      	cbnz	r1, 80075ae <sbrk_aligned+0x12>
 80075a8:	f000 fe96 	bl	80082d8 <_sbrk_r>
 80075ac:	6030      	str	r0, [r6, #0]
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 fe91 	bl	80082d8 <_sbrk_r>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d00a      	beq.n	80075d0 <sbrk_aligned+0x34>
 80075ba:	1cc4      	adds	r4, r0, #3
 80075bc:	f024 0403 	bic.w	r4, r4, #3
 80075c0:	42a0      	cmp	r0, r4
 80075c2:	d007      	beq.n	80075d4 <sbrk_aligned+0x38>
 80075c4:	1a21      	subs	r1, r4, r0
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 fe86 	bl	80082d8 <_sbrk_r>
 80075cc:	3001      	adds	r0, #1
 80075ce:	d101      	bne.n	80075d4 <sbrk_aligned+0x38>
 80075d0:	f04f 34ff 	mov.w	r4, #4294967295
 80075d4:	4620      	mov	r0, r4
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	2000042c 	.word	0x2000042c

080075dc <_malloc_r>:
 80075dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e0:	1ccd      	adds	r5, r1, #3
 80075e2:	f025 0503 	bic.w	r5, r5, #3
 80075e6:	3508      	adds	r5, #8
 80075e8:	2d0c      	cmp	r5, #12
 80075ea:	bf38      	it	cc
 80075ec:	250c      	movcc	r5, #12
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	4607      	mov	r7, r0
 80075f2:	db01      	blt.n	80075f8 <_malloc_r+0x1c>
 80075f4:	42a9      	cmp	r1, r5
 80075f6:	d905      	bls.n	8007604 <_malloc_r+0x28>
 80075f8:	230c      	movs	r3, #12
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	2600      	movs	r6, #0
 80075fe:	4630      	mov	r0, r6
 8007600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076d8 <_malloc_r+0xfc>
 8007608:	f000 f868 	bl	80076dc <__malloc_lock>
 800760c:	f8d8 3000 	ldr.w	r3, [r8]
 8007610:	461c      	mov	r4, r3
 8007612:	bb5c      	cbnz	r4, 800766c <_malloc_r+0x90>
 8007614:	4629      	mov	r1, r5
 8007616:	4638      	mov	r0, r7
 8007618:	f7ff ffc0 	bl	800759c <sbrk_aligned>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	4604      	mov	r4, r0
 8007620:	d155      	bne.n	80076ce <_malloc_r+0xf2>
 8007622:	f8d8 4000 	ldr.w	r4, [r8]
 8007626:	4626      	mov	r6, r4
 8007628:	2e00      	cmp	r6, #0
 800762a:	d145      	bne.n	80076b8 <_malloc_r+0xdc>
 800762c:	2c00      	cmp	r4, #0
 800762e:	d048      	beq.n	80076c2 <_malloc_r+0xe6>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	4631      	mov	r1, r6
 8007634:	4638      	mov	r0, r7
 8007636:	eb04 0903 	add.w	r9, r4, r3
 800763a:	f000 fe4d 	bl	80082d8 <_sbrk_r>
 800763e:	4581      	cmp	r9, r0
 8007640:	d13f      	bne.n	80076c2 <_malloc_r+0xe6>
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	1a6d      	subs	r5, r5, r1
 8007646:	4629      	mov	r1, r5
 8007648:	4638      	mov	r0, r7
 800764a:	f7ff ffa7 	bl	800759c <sbrk_aligned>
 800764e:	3001      	adds	r0, #1
 8007650:	d037      	beq.n	80076c2 <_malloc_r+0xe6>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	442b      	add	r3, r5
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	f8d8 3000 	ldr.w	r3, [r8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d038      	beq.n	80076d2 <_malloc_r+0xf6>
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	42a2      	cmp	r2, r4
 8007664:	d12b      	bne.n	80076be <_malloc_r+0xe2>
 8007666:	2200      	movs	r2, #0
 8007668:	605a      	str	r2, [r3, #4]
 800766a:	e00f      	b.n	800768c <_malloc_r+0xb0>
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	1b52      	subs	r2, r2, r5
 8007670:	d41f      	bmi.n	80076b2 <_malloc_r+0xd6>
 8007672:	2a0b      	cmp	r2, #11
 8007674:	d917      	bls.n	80076a6 <_malloc_r+0xca>
 8007676:	1961      	adds	r1, r4, r5
 8007678:	42a3      	cmp	r3, r4
 800767a:	6025      	str	r5, [r4, #0]
 800767c:	bf18      	it	ne
 800767e:	6059      	strne	r1, [r3, #4]
 8007680:	6863      	ldr	r3, [r4, #4]
 8007682:	bf08      	it	eq
 8007684:	f8c8 1000 	streq.w	r1, [r8]
 8007688:	5162      	str	r2, [r4, r5]
 800768a:	604b      	str	r3, [r1, #4]
 800768c:	4638      	mov	r0, r7
 800768e:	f104 060b 	add.w	r6, r4, #11
 8007692:	f000 f829 	bl	80076e8 <__malloc_unlock>
 8007696:	f026 0607 	bic.w	r6, r6, #7
 800769a:	1d23      	adds	r3, r4, #4
 800769c:	1af2      	subs	r2, r6, r3
 800769e:	d0ae      	beq.n	80075fe <_malloc_r+0x22>
 80076a0:	1b9b      	subs	r3, r3, r6
 80076a2:	50a3      	str	r3, [r4, r2]
 80076a4:	e7ab      	b.n	80075fe <_malloc_r+0x22>
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	6862      	ldr	r2, [r4, #4]
 80076aa:	d1dd      	bne.n	8007668 <_malloc_r+0x8c>
 80076ac:	f8c8 2000 	str.w	r2, [r8]
 80076b0:	e7ec      	b.n	800768c <_malloc_r+0xb0>
 80076b2:	4623      	mov	r3, r4
 80076b4:	6864      	ldr	r4, [r4, #4]
 80076b6:	e7ac      	b.n	8007612 <_malloc_r+0x36>
 80076b8:	4634      	mov	r4, r6
 80076ba:	6876      	ldr	r6, [r6, #4]
 80076bc:	e7b4      	b.n	8007628 <_malloc_r+0x4c>
 80076be:	4613      	mov	r3, r2
 80076c0:	e7cc      	b.n	800765c <_malloc_r+0x80>
 80076c2:	230c      	movs	r3, #12
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	4638      	mov	r0, r7
 80076c8:	f000 f80e 	bl	80076e8 <__malloc_unlock>
 80076cc:	e797      	b.n	80075fe <_malloc_r+0x22>
 80076ce:	6025      	str	r5, [r4, #0]
 80076d0:	e7dc      	b.n	800768c <_malloc_r+0xb0>
 80076d2:	605b      	str	r3, [r3, #4]
 80076d4:	deff      	udf	#255	; 0xff
 80076d6:	bf00      	nop
 80076d8:	20000428 	.word	0x20000428

080076dc <__malloc_lock>:
 80076dc:	4801      	ldr	r0, [pc, #4]	; (80076e4 <__malloc_lock+0x8>)
 80076de:	f7ff b88a 	b.w	80067f6 <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	20000424 	.word	0x20000424

080076e8 <__malloc_unlock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__malloc_unlock+0x8>)
 80076ea:	f7ff b885 	b.w	80067f8 <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	20000424 	.word	0x20000424

080076f4 <_Balloc>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	69c6      	ldr	r6, [r0, #28]
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	b976      	cbnz	r6, 800771c <_Balloc+0x28>
 80076fe:	2010      	movs	r0, #16
 8007700:	f7ff ff44 	bl	800758c <malloc>
 8007704:	4602      	mov	r2, r0
 8007706:	61e0      	str	r0, [r4, #28]
 8007708:	b920      	cbnz	r0, 8007714 <_Balloc+0x20>
 800770a:	4b18      	ldr	r3, [pc, #96]	; (800776c <_Balloc+0x78>)
 800770c:	4818      	ldr	r0, [pc, #96]	; (8007770 <_Balloc+0x7c>)
 800770e:	216b      	movs	r1, #107	; 0x6b
 8007710:	f000 fe00 	bl	8008314 <__assert_func>
 8007714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007718:	6006      	str	r6, [r0, #0]
 800771a:	60c6      	str	r6, [r0, #12]
 800771c:	69e6      	ldr	r6, [r4, #28]
 800771e:	68f3      	ldr	r3, [r6, #12]
 8007720:	b183      	cbz	r3, 8007744 <_Balloc+0x50>
 8007722:	69e3      	ldr	r3, [r4, #28]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800772a:	b9b8      	cbnz	r0, 800775c <_Balloc+0x68>
 800772c:	2101      	movs	r1, #1
 800772e:	fa01 f605 	lsl.w	r6, r1, r5
 8007732:	1d72      	adds	r2, r6, #5
 8007734:	0092      	lsls	r2, r2, #2
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fe0a 	bl	8008350 <_calloc_r>
 800773c:	b160      	cbz	r0, 8007758 <_Balloc+0x64>
 800773e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007742:	e00e      	b.n	8007762 <_Balloc+0x6e>
 8007744:	2221      	movs	r2, #33	; 0x21
 8007746:	2104      	movs	r1, #4
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fe01 	bl	8008350 <_calloc_r>
 800774e:	69e3      	ldr	r3, [r4, #28]
 8007750:	60f0      	str	r0, [r6, #12]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e4      	bne.n	8007722 <_Balloc+0x2e>
 8007758:	2000      	movs	r0, #0
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	6802      	ldr	r2, [r0, #0]
 800775e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007762:	2300      	movs	r3, #0
 8007764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007768:	e7f7      	b.n	800775a <_Balloc+0x66>
 800776a:	bf00      	nop
 800776c:	080087f5 	.word	0x080087f5
 8007770:	08008875 	.word	0x08008875

08007774 <_Bfree>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	69c6      	ldr	r6, [r0, #28]
 8007778:	4605      	mov	r5, r0
 800777a:	460c      	mov	r4, r1
 800777c:	b976      	cbnz	r6, 800779c <_Bfree+0x28>
 800777e:	2010      	movs	r0, #16
 8007780:	f7ff ff04 	bl	800758c <malloc>
 8007784:	4602      	mov	r2, r0
 8007786:	61e8      	str	r0, [r5, #28]
 8007788:	b920      	cbnz	r0, 8007794 <_Bfree+0x20>
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <_Bfree+0x3c>)
 800778c:	4809      	ldr	r0, [pc, #36]	; (80077b4 <_Bfree+0x40>)
 800778e:	218f      	movs	r1, #143	; 0x8f
 8007790:	f000 fdc0 	bl	8008314 <__assert_func>
 8007794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007798:	6006      	str	r6, [r0, #0]
 800779a:	60c6      	str	r6, [r0, #12]
 800779c:	b13c      	cbz	r4, 80077ae <_Bfree+0x3a>
 800779e:	69eb      	ldr	r3, [r5, #28]
 80077a0:	6862      	ldr	r2, [r4, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077a8:	6021      	str	r1, [r4, #0]
 80077aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	080087f5 	.word	0x080087f5
 80077b4:	08008875 	.word	0x08008875

080077b8 <__multadd>:
 80077b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077bc:	690d      	ldr	r5, [r1, #16]
 80077be:	4607      	mov	r7, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	461e      	mov	r6, r3
 80077c4:	f101 0c14 	add.w	ip, r1, #20
 80077c8:	2000      	movs	r0, #0
 80077ca:	f8dc 3000 	ldr.w	r3, [ip]
 80077ce:	b299      	uxth	r1, r3
 80077d0:	fb02 6101 	mla	r1, r2, r1, r6
 80077d4:	0c1e      	lsrs	r6, r3, #16
 80077d6:	0c0b      	lsrs	r3, r1, #16
 80077d8:	fb02 3306 	mla	r3, r2, r6, r3
 80077dc:	b289      	uxth	r1, r1
 80077de:	3001      	adds	r0, #1
 80077e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077e4:	4285      	cmp	r5, r0
 80077e6:	f84c 1b04 	str.w	r1, [ip], #4
 80077ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ee:	dcec      	bgt.n	80077ca <__multadd+0x12>
 80077f0:	b30e      	cbz	r6, 8007836 <__multadd+0x7e>
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	42ab      	cmp	r3, r5
 80077f6:	dc19      	bgt.n	800782c <__multadd+0x74>
 80077f8:	6861      	ldr	r1, [r4, #4]
 80077fa:	4638      	mov	r0, r7
 80077fc:	3101      	adds	r1, #1
 80077fe:	f7ff ff79 	bl	80076f4 <_Balloc>
 8007802:	4680      	mov	r8, r0
 8007804:	b928      	cbnz	r0, 8007812 <__multadd+0x5a>
 8007806:	4602      	mov	r2, r0
 8007808:	4b0c      	ldr	r3, [pc, #48]	; (800783c <__multadd+0x84>)
 800780a:	480d      	ldr	r0, [pc, #52]	; (8007840 <__multadd+0x88>)
 800780c:	21ba      	movs	r1, #186	; 0xba
 800780e:	f000 fd81 	bl	8008314 <__assert_func>
 8007812:	6922      	ldr	r2, [r4, #16]
 8007814:	3202      	adds	r2, #2
 8007816:	f104 010c 	add.w	r1, r4, #12
 800781a:	0092      	lsls	r2, r2, #2
 800781c:	300c      	adds	r0, #12
 800781e:	f000 fd6b 	bl	80082f8 <memcpy>
 8007822:	4621      	mov	r1, r4
 8007824:	4638      	mov	r0, r7
 8007826:	f7ff ffa5 	bl	8007774 <_Bfree>
 800782a:	4644      	mov	r4, r8
 800782c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007830:	3501      	adds	r5, #1
 8007832:	615e      	str	r6, [r3, #20]
 8007834:	6125      	str	r5, [r4, #16]
 8007836:	4620      	mov	r0, r4
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783c:	08008864 	.word	0x08008864
 8007840:	08008875 	.word	0x08008875

08007844 <__hi0bits>:
 8007844:	0c03      	lsrs	r3, r0, #16
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	b9d3      	cbnz	r3, 8007880 <__hi0bits+0x3c>
 800784a:	0400      	lsls	r0, r0, #16
 800784c:	2310      	movs	r3, #16
 800784e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007852:	bf04      	itt	eq
 8007854:	0200      	lsleq	r0, r0, #8
 8007856:	3308      	addeq	r3, #8
 8007858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800785c:	bf04      	itt	eq
 800785e:	0100      	lsleq	r0, r0, #4
 8007860:	3304      	addeq	r3, #4
 8007862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007866:	bf04      	itt	eq
 8007868:	0080      	lsleq	r0, r0, #2
 800786a:	3302      	addeq	r3, #2
 800786c:	2800      	cmp	r0, #0
 800786e:	db05      	blt.n	800787c <__hi0bits+0x38>
 8007870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007874:	f103 0301 	add.w	r3, r3, #1
 8007878:	bf08      	it	eq
 800787a:	2320      	moveq	r3, #32
 800787c:	4618      	mov	r0, r3
 800787e:	4770      	bx	lr
 8007880:	2300      	movs	r3, #0
 8007882:	e7e4      	b.n	800784e <__hi0bits+0xa>

08007884 <__lo0bits>:
 8007884:	6803      	ldr	r3, [r0, #0]
 8007886:	f013 0207 	ands.w	r2, r3, #7
 800788a:	d00c      	beq.n	80078a6 <__lo0bits+0x22>
 800788c:	07d9      	lsls	r1, r3, #31
 800788e:	d422      	bmi.n	80078d6 <__lo0bits+0x52>
 8007890:	079a      	lsls	r2, r3, #30
 8007892:	bf49      	itett	mi
 8007894:	085b      	lsrmi	r3, r3, #1
 8007896:	089b      	lsrpl	r3, r3, #2
 8007898:	6003      	strmi	r3, [r0, #0]
 800789a:	2201      	movmi	r2, #1
 800789c:	bf5c      	itt	pl
 800789e:	6003      	strpl	r3, [r0, #0]
 80078a0:	2202      	movpl	r2, #2
 80078a2:	4610      	mov	r0, r2
 80078a4:	4770      	bx	lr
 80078a6:	b299      	uxth	r1, r3
 80078a8:	b909      	cbnz	r1, 80078ae <__lo0bits+0x2a>
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	2210      	movs	r2, #16
 80078ae:	b2d9      	uxtb	r1, r3
 80078b0:	b909      	cbnz	r1, 80078b6 <__lo0bits+0x32>
 80078b2:	3208      	adds	r2, #8
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	0719      	lsls	r1, r3, #28
 80078b8:	bf04      	itt	eq
 80078ba:	091b      	lsreq	r3, r3, #4
 80078bc:	3204      	addeq	r2, #4
 80078be:	0799      	lsls	r1, r3, #30
 80078c0:	bf04      	itt	eq
 80078c2:	089b      	lsreq	r3, r3, #2
 80078c4:	3202      	addeq	r2, #2
 80078c6:	07d9      	lsls	r1, r3, #31
 80078c8:	d403      	bmi.n	80078d2 <__lo0bits+0x4e>
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	f102 0201 	add.w	r2, r2, #1
 80078d0:	d003      	beq.n	80078da <__lo0bits+0x56>
 80078d2:	6003      	str	r3, [r0, #0]
 80078d4:	e7e5      	b.n	80078a2 <__lo0bits+0x1e>
 80078d6:	2200      	movs	r2, #0
 80078d8:	e7e3      	b.n	80078a2 <__lo0bits+0x1e>
 80078da:	2220      	movs	r2, #32
 80078dc:	e7e1      	b.n	80078a2 <__lo0bits+0x1e>
	...

080078e0 <__i2b>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	460c      	mov	r4, r1
 80078e4:	2101      	movs	r1, #1
 80078e6:	f7ff ff05 	bl	80076f4 <_Balloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	b928      	cbnz	r0, 80078fa <__i2b+0x1a>
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <__i2b+0x24>)
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <__i2b+0x28>)
 80078f2:	f240 1145 	movw	r1, #325	; 0x145
 80078f6:	f000 fd0d 	bl	8008314 <__assert_func>
 80078fa:	2301      	movs	r3, #1
 80078fc:	6144      	str	r4, [r0, #20]
 80078fe:	6103      	str	r3, [r0, #16]
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	08008864 	.word	0x08008864
 8007908:	08008875 	.word	0x08008875

0800790c <__multiply>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	4691      	mov	r9, r2
 8007912:	690a      	ldr	r2, [r1, #16]
 8007914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007918:	429a      	cmp	r2, r3
 800791a:	bfb8      	it	lt
 800791c:	460b      	movlt	r3, r1
 800791e:	460c      	mov	r4, r1
 8007920:	bfbc      	itt	lt
 8007922:	464c      	movlt	r4, r9
 8007924:	4699      	movlt	r9, r3
 8007926:	6927      	ldr	r7, [r4, #16]
 8007928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	6861      	ldr	r1, [r4, #4]
 8007930:	eb07 060a 	add.w	r6, r7, sl
 8007934:	42b3      	cmp	r3, r6
 8007936:	b085      	sub	sp, #20
 8007938:	bfb8      	it	lt
 800793a:	3101      	addlt	r1, #1
 800793c:	f7ff feda 	bl	80076f4 <_Balloc>
 8007940:	b930      	cbnz	r0, 8007950 <__multiply+0x44>
 8007942:	4602      	mov	r2, r0
 8007944:	4b44      	ldr	r3, [pc, #272]	; (8007a58 <__multiply+0x14c>)
 8007946:	4845      	ldr	r0, [pc, #276]	; (8007a5c <__multiply+0x150>)
 8007948:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800794c:	f000 fce2 	bl	8008314 <__assert_func>
 8007950:	f100 0514 	add.w	r5, r0, #20
 8007954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007958:	462b      	mov	r3, r5
 800795a:	2200      	movs	r2, #0
 800795c:	4543      	cmp	r3, r8
 800795e:	d321      	bcc.n	80079a4 <__multiply+0x98>
 8007960:	f104 0314 	add.w	r3, r4, #20
 8007964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007968:	f109 0314 	add.w	r3, r9, #20
 800796c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	1b3a      	subs	r2, r7, r4
 8007974:	3a15      	subs	r2, #21
 8007976:	f022 0203 	bic.w	r2, r2, #3
 800797a:	3204      	adds	r2, #4
 800797c:	f104 0115 	add.w	r1, r4, #21
 8007980:	428f      	cmp	r7, r1
 8007982:	bf38      	it	cc
 8007984:	2204      	movcc	r2, #4
 8007986:	9201      	str	r2, [sp, #4]
 8007988:	9a02      	ldr	r2, [sp, #8]
 800798a:	9303      	str	r3, [sp, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d80c      	bhi.n	80079aa <__multiply+0x9e>
 8007990:	2e00      	cmp	r6, #0
 8007992:	dd03      	ble.n	800799c <__multiply+0x90>
 8007994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05b      	beq.n	8007a54 <__multiply+0x148>
 800799c:	6106      	str	r6, [r0, #16]
 800799e:	b005      	add	sp, #20
 80079a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a4:	f843 2b04 	str.w	r2, [r3], #4
 80079a8:	e7d8      	b.n	800795c <__multiply+0x50>
 80079aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80079ae:	f1ba 0f00 	cmp.w	sl, #0
 80079b2:	d024      	beq.n	80079fe <__multiply+0xf2>
 80079b4:	f104 0e14 	add.w	lr, r4, #20
 80079b8:	46a9      	mov	r9, r5
 80079ba:	f04f 0c00 	mov.w	ip, #0
 80079be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80079c2:	f8d9 1000 	ldr.w	r1, [r9]
 80079c6:	fa1f fb82 	uxth.w	fp, r2
 80079ca:	b289      	uxth	r1, r1
 80079cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80079d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079d4:	f8d9 2000 	ldr.w	r2, [r9]
 80079d8:	4461      	add	r1, ip
 80079da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079de:	fb0a c20b 	mla	r2, sl, fp, ip
 80079e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079e6:	b289      	uxth	r1, r1
 80079e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079ec:	4577      	cmp	r7, lr
 80079ee:	f849 1b04 	str.w	r1, [r9], #4
 80079f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079f6:	d8e2      	bhi.n	80079be <__multiply+0xb2>
 80079f8:	9a01      	ldr	r2, [sp, #4]
 80079fa:	f845 c002 	str.w	ip, [r5, r2]
 80079fe:	9a03      	ldr	r2, [sp, #12]
 8007a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a04:	3304      	adds	r3, #4
 8007a06:	f1b9 0f00 	cmp.w	r9, #0
 8007a0a:	d021      	beq.n	8007a50 <__multiply+0x144>
 8007a0c:	6829      	ldr	r1, [r5, #0]
 8007a0e:	f104 0c14 	add.w	ip, r4, #20
 8007a12:	46ae      	mov	lr, r5
 8007a14:	f04f 0a00 	mov.w	sl, #0
 8007a18:	f8bc b000 	ldrh.w	fp, [ip]
 8007a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a20:	fb09 220b 	mla	r2, r9, fp, r2
 8007a24:	4452      	add	r2, sl
 8007a26:	b289      	uxth	r1, r1
 8007a28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8007a30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a38:	f8be 1000 	ldrh.w	r1, [lr]
 8007a3c:	fb09 110a 	mla	r1, r9, sl, r1
 8007a40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a44:	4567      	cmp	r7, ip
 8007a46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a4a:	d8e5      	bhi.n	8007a18 <__multiply+0x10c>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	50a9      	str	r1, [r5, r2]
 8007a50:	3504      	adds	r5, #4
 8007a52:	e799      	b.n	8007988 <__multiply+0x7c>
 8007a54:	3e01      	subs	r6, #1
 8007a56:	e79b      	b.n	8007990 <__multiply+0x84>
 8007a58:	08008864 	.word	0x08008864
 8007a5c:	08008875 	.word	0x08008875

08007a60 <__pow5mult>:
 8007a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a64:	4615      	mov	r5, r2
 8007a66:	f012 0203 	ands.w	r2, r2, #3
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	d007      	beq.n	8007a80 <__pow5mult+0x20>
 8007a70:	4c25      	ldr	r4, [pc, #148]	; (8007b08 <__pow5mult+0xa8>)
 8007a72:	3a01      	subs	r2, #1
 8007a74:	2300      	movs	r3, #0
 8007a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a7a:	f7ff fe9d 	bl	80077b8 <__multadd>
 8007a7e:	4607      	mov	r7, r0
 8007a80:	10ad      	asrs	r5, r5, #2
 8007a82:	d03d      	beq.n	8007b00 <__pow5mult+0xa0>
 8007a84:	69f4      	ldr	r4, [r6, #28]
 8007a86:	b97c      	cbnz	r4, 8007aa8 <__pow5mult+0x48>
 8007a88:	2010      	movs	r0, #16
 8007a8a:	f7ff fd7f 	bl	800758c <malloc>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	61f0      	str	r0, [r6, #28]
 8007a92:	b928      	cbnz	r0, 8007aa0 <__pow5mult+0x40>
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <__pow5mult+0xac>)
 8007a96:	481e      	ldr	r0, [pc, #120]	; (8007b10 <__pow5mult+0xb0>)
 8007a98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007a9c:	f000 fc3a 	bl	8008314 <__assert_func>
 8007aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007aa4:	6004      	str	r4, [r0, #0]
 8007aa6:	60c4      	str	r4, [r0, #12]
 8007aa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ab0:	b94c      	cbnz	r4, 8007ac6 <__pow5mult+0x66>
 8007ab2:	f240 2171 	movw	r1, #625	; 0x271
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7ff ff12 	bl	80078e0 <__i2b>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	f04f 0900 	mov.w	r9, #0
 8007aca:	07eb      	lsls	r3, r5, #31
 8007acc:	d50a      	bpl.n	8007ae4 <__pow5mult+0x84>
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff ff1a 	bl	800790c <__multiply>
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4680      	mov	r8, r0
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff fe49 	bl	8007774 <_Bfree>
 8007ae2:	4647      	mov	r7, r8
 8007ae4:	106d      	asrs	r5, r5, #1
 8007ae6:	d00b      	beq.n	8007b00 <__pow5mult+0xa0>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	b938      	cbnz	r0, 8007afc <__pow5mult+0x9c>
 8007aec:	4622      	mov	r2, r4
 8007aee:	4621      	mov	r1, r4
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ff0b 	bl	800790c <__multiply>
 8007af6:	6020      	str	r0, [r4, #0]
 8007af8:	f8c0 9000 	str.w	r9, [r0]
 8007afc:	4604      	mov	r4, r0
 8007afe:	e7e4      	b.n	8007aca <__pow5mult+0x6a>
 8007b00:	4638      	mov	r0, r7
 8007b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b06:	bf00      	nop
 8007b08:	080089c0 	.word	0x080089c0
 8007b0c:	080087f5 	.word	0x080087f5
 8007b10:	08008875 	.word	0x08008875

08007b14 <__lshift>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	6849      	ldr	r1, [r1, #4]
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b22:	68a3      	ldr	r3, [r4, #8]
 8007b24:	4607      	mov	r7, r0
 8007b26:	4691      	mov	r9, r2
 8007b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b2c:	f108 0601 	add.w	r6, r8, #1
 8007b30:	42b3      	cmp	r3, r6
 8007b32:	db0b      	blt.n	8007b4c <__lshift+0x38>
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff fddd 	bl	80076f4 <_Balloc>
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	b948      	cbnz	r0, 8007b52 <__lshift+0x3e>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <__lshift+0xd0>)
 8007b42:	4829      	ldr	r0, [pc, #164]	; (8007be8 <__lshift+0xd4>)
 8007b44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b48:	f000 fbe4 	bl	8008314 <__assert_func>
 8007b4c:	3101      	adds	r1, #1
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	e7ee      	b.n	8007b30 <__lshift+0x1c>
 8007b52:	2300      	movs	r3, #0
 8007b54:	f100 0114 	add.w	r1, r0, #20
 8007b58:	f100 0210 	add.w	r2, r0, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	4553      	cmp	r3, sl
 8007b60:	db33      	blt.n	8007bca <__lshift+0xb6>
 8007b62:	6920      	ldr	r0, [r4, #16]
 8007b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b68:	f104 0314 	add.w	r3, r4, #20
 8007b6c:	f019 091f 	ands.w	r9, r9, #31
 8007b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b78:	d02b      	beq.n	8007bd2 <__lshift+0xbe>
 8007b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b7e:	468a      	mov	sl, r1
 8007b80:	2200      	movs	r2, #0
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	fa00 f009 	lsl.w	r0, r0, r9
 8007b88:	4310      	orrs	r0, r2
 8007b8a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b92:	459c      	cmp	ip, r3
 8007b94:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b98:	d8f3      	bhi.n	8007b82 <__lshift+0x6e>
 8007b9a:	ebac 0304 	sub.w	r3, ip, r4
 8007b9e:	3b15      	subs	r3, #21
 8007ba0:	f023 0303 	bic.w	r3, r3, #3
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	f104 0015 	add.w	r0, r4, #21
 8007baa:	4584      	cmp	ip, r0
 8007bac:	bf38      	it	cc
 8007bae:	2304      	movcc	r3, #4
 8007bb0:	50ca      	str	r2, [r1, r3]
 8007bb2:	b10a      	cbz	r2, 8007bb8 <__lshift+0xa4>
 8007bb4:	f108 0602 	add.w	r6, r8, #2
 8007bb8:	3e01      	subs	r6, #1
 8007bba:	4638      	mov	r0, r7
 8007bbc:	612e      	str	r6, [r5, #16]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	f7ff fdd8 	bl	8007774 <_Bfree>
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bce:	3301      	adds	r3, #1
 8007bd0:	e7c5      	b.n	8007b5e <__lshift+0x4a>
 8007bd2:	3904      	subs	r1, #4
 8007bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bdc:	459c      	cmp	ip, r3
 8007bde:	d8f9      	bhi.n	8007bd4 <__lshift+0xc0>
 8007be0:	e7ea      	b.n	8007bb8 <__lshift+0xa4>
 8007be2:	bf00      	nop
 8007be4:	08008864 	.word	0x08008864
 8007be8:	08008875 	.word	0x08008875

08007bec <__mcmp>:
 8007bec:	b530      	push	{r4, r5, lr}
 8007bee:	6902      	ldr	r2, [r0, #16]
 8007bf0:	690c      	ldr	r4, [r1, #16]
 8007bf2:	1b12      	subs	r2, r2, r4
 8007bf4:	d10e      	bne.n	8007c14 <__mcmp+0x28>
 8007bf6:	f100 0314 	add.w	r3, r0, #20
 8007bfa:	3114      	adds	r1, #20
 8007bfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c0c:	42a5      	cmp	r5, r4
 8007c0e:	d003      	beq.n	8007c18 <__mcmp+0x2c>
 8007c10:	d305      	bcc.n	8007c1e <__mcmp+0x32>
 8007c12:	2201      	movs	r2, #1
 8007c14:	4610      	mov	r0, r2
 8007c16:	bd30      	pop	{r4, r5, pc}
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d3f3      	bcc.n	8007c04 <__mcmp+0x18>
 8007c1c:	e7fa      	b.n	8007c14 <__mcmp+0x28>
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	e7f7      	b.n	8007c14 <__mcmp+0x28>

08007c24 <__mdiff>:
 8007c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4690      	mov	r8, r2
 8007c32:	f7ff ffdb 	bl	8007bec <__mcmp>
 8007c36:	1e05      	subs	r5, r0, #0
 8007c38:	d110      	bne.n	8007c5c <__mdiff+0x38>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff fd59 	bl	80076f4 <_Balloc>
 8007c42:	b930      	cbnz	r0, 8007c52 <__mdiff+0x2e>
 8007c44:	4b3a      	ldr	r3, [pc, #232]	; (8007d30 <__mdiff+0x10c>)
 8007c46:	4602      	mov	r2, r0
 8007c48:	f240 2137 	movw	r1, #567	; 0x237
 8007c4c:	4839      	ldr	r0, [pc, #228]	; (8007d34 <__mdiff+0x110>)
 8007c4e:	f000 fb61 	bl	8008314 <__assert_func>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	bfa4      	itt	ge
 8007c5e:	4643      	movge	r3, r8
 8007c60:	46a0      	movge	r8, r4
 8007c62:	4630      	mov	r0, r6
 8007c64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c68:	bfa6      	itte	ge
 8007c6a:	461c      	movge	r4, r3
 8007c6c:	2500      	movge	r5, #0
 8007c6e:	2501      	movlt	r5, #1
 8007c70:	f7ff fd40 	bl	80076f4 <_Balloc>
 8007c74:	b920      	cbnz	r0, 8007c80 <__mdiff+0x5c>
 8007c76:	4b2e      	ldr	r3, [pc, #184]	; (8007d30 <__mdiff+0x10c>)
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f240 2145 	movw	r1, #581	; 0x245
 8007c7e:	e7e5      	b.n	8007c4c <__mdiff+0x28>
 8007c80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c84:	6926      	ldr	r6, [r4, #16]
 8007c86:	60c5      	str	r5, [r0, #12]
 8007c88:	f104 0914 	add.w	r9, r4, #20
 8007c8c:	f108 0514 	add.w	r5, r8, #20
 8007c90:	f100 0e14 	add.w	lr, r0, #20
 8007c94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c9c:	f108 0210 	add.w	r2, r8, #16
 8007ca0:	46f2      	mov	sl, lr
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007cac:	fa11 f88b 	uxtah	r8, r1, fp
 8007cb0:	b299      	uxth	r1, r3
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	eba8 0801 	sub.w	r8, r8, r1
 8007cb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007cbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007cc0:	fa1f f888 	uxth.w	r8, r8
 8007cc4:	1419      	asrs	r1, r3, #16
 8007cc6:	454e      	cmp	r6, r9
 8007cc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ccc:	f84a 3b04 	str.w	r3, [sl], #4
 8007cd0:	d8e8      	bhi.n	8007ca4 <__mdiff+0x80>
 8007cd2:	1b33      	subs	r3, r6, r4
 8007cd4:	3b15      	subs	r3, #21
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	3304      	adds	r3, #4
 8007cdc:	3415      	adds	r4, #21
 8007cde:	42a6      	cmp	r6, r4
 8007ce0:	bf38      	it	cc
 8007ce2:	2304      	movcc	r3, #4
 8007ce4:	441d      	add	r5, r3
 8007ce6:	4473      	add	r3, lr
 8007ce8:	469e      	mov	lr, r3
 8007cea:	462e      	mov	r6, r5
 8007cec:	4566      	cmp	r6, ip
 8007cee:	d30e      	bcc.n	8007d0e <__mdiff+0xea>
 8007cf0:	f10c 0203 	add.w	r2, ip, #3
 8007cf4:	1b52      	subs	r2, r2, r5
 8007cf6:	f022 0203 	bic.w	r2, r2, #3
 8007cfa:	3d03      	subs	r5, #3
 8007cfc:	45ac      	cmp	ip, r5
 8007cfe:	bf38      	it	cc
 8007d00:	2200      	movcc	r2, #0
 8007d02:	4413      	add	r3, r2
 8007d04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d08:	b17a      	cbz	r2, 8007d2a <__mdiff+0x106>
 8007d0a:	6107      	str	r7, [r0, #16]
 8007d0c:	e7a4      	b.n	8007c58 <__mdiff+0x34>
 8007d0e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d12:	fa11 f288 	uxtah	r2, r1, r8
 8007d16:	1414      	asrs	r4, r2, #16
 8007d18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d1c:	b292      	uxth	r2, r2
 8007d1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d22:	f84e 2b04 	str.w	r2, [lr], #4
 8007d26:	1421      	asrs	r1, r4, #16
 8007d28:	e7e0      	b.n	8007cec <__mdiff+0xc8>
 8007d2a:	3f01      	subs	r7, #1
 8007d2c:	e7ea      	b.n	8007d04 <__mdiff+0xe0>
 8007d2e:	bf00      	nop
 8007d30:	08008864 	.word	0x08008864
 8007d34:	08008875 	.word	0x08008875

08007d38 <__d2b>:
 8007d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	2101      	movs	r1, #1
 8007d40:	ec59 8b10 	vmov	r8, r9, d0
 8007d44:	4616      	mov	r6, r2
 8007d46:	f7ff fcd5 	bl	80076f4 <_Balloc>
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b930      	cbnz	r0, 8007d5c <__d2b+0x24>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b24      	ldr	r3, [pc, #144]	; (8007de4 <__d2b+0xac>)
 8007d52:	4825      	ldr	r0, [pc, #148]	; (8007de8 <__d2b+0xb0>)
 8007d54:	f240 310f 	movw	r1, #783	; 0x30f
 8007d58:	f000 fadc 	bl	8008314 <__assert_func>
 8007d5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d64:	bb2d      	cbnz	r5, 8007db2 <__d2b+0x7a>
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	f1b8 0300 	subs.w	r3, r8, #0
 8007d6c:	d026      	beq.n	8007dbc <__d2b+0x84>
 8007d6e:	4668      	mov	r0, sp
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	f7ff fd87 	bl	8007884 <__lo0bits>
 8007d76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d7a:	b1e8      	cbz	r0, 8007db8 <__d2b+0x80>
 8007d7c:	f1c0 0320 	rsb	r3, r0, #32
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	430b      	orrs	r3, r1
 8007d86:	40c2      	lsrs	r2, r0
 8007d88:	6163      	str	r3, [r4, #20]
 8007d8a:	9201      	str	r2, [sp, #4]
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	61a3      	str	r3, [r4, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	bf14      	ite	ne
 8007d94:	2202      	movne	r2, #2
 8007d96:	2201      	moveq	r2, #1
 8007d98:	6122      	str	r2, [r4, #16]
 8007d9a:	b1bd      	cbz	r5, 8007dcc <__d2b+0x94>
 8007d9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007da0:	4405      	add	r5, r0
 8007da2:	603d      	str	r5, [r7, #0]
 8007da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	4620      	mov	r0, r4
 8007dac:	b003      	add	sp, #12
 8007dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db6:	e7d6      	b.n	8007d66 <__d2b+0x2e>
 8007db8:	6161      	str	r1, [r4, #20]
 8007dba:	e7e7      	b.n	8007d8c <__d2b+0x54>
 8007dbc:	a801      	add	r0, sp, #4
 8007dbe:	f7ff fd61 	bl	8007884 <__lo0bits>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	6163      	str	r3, [r4, #20]
 8007dc6:	3020      	adds	r0, #32
 8007dc8:	2201      	movs	r2, #1
 8007dca:	e7e5      	b.n	8007d98 <__d2b+0x60>
 8007dcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dd4:	6038      	str	r0, [r7, #0]
 8007dd6:	6918      	ldr	r0, [r3, #16]
 8007dd8:	f7ff fd34 	bl	8007844 <__hi0bits>
 8007ddc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007de0:	e7e2      	b.n	8007da8 <__d2b+0x70>
 8007de2:	bf00      	nop
 8007de4:	08008864 	.word	0x08008864
 8007de8:	08008875 	.word	0x08008875

08007dec <__sfputc_r>:
 8007dec:	6893      	ldr	r3, [r2, #8]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	b410      	push	{r4}
 8007df4:	6093      	str	r3, [r2, #8]
 8007df6:	da08      	bge.n	8007e0a <__sfputc_r+0x1e>
 8007df8:	6994      	ldr	r4, [r2, #24]
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	db01      	blt.n	8007e02 <__sfputc_r+0x16>
 8007dfe:	290a      	cmp	r1, #10
 8007e00:	d103      	bne.n	8007e0a <__sfputc_r+0x1e>
 8007e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e06:	f7fe bbe4 	b.w	80065d2 <__swbuf_r>
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	1c58      	adds	r0, r3, #1
 8007e0e:	6010      	str	r0, [r2, #0]
 8007e10:	7019      	strb	r1, [r3, #0]
 8007e12:	4608      	mov	r0, r1
 8007e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <__sfputs_r>:
 8007e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	18d5      	adds	r5, r2, r3
 8007e24:	42ac      	cmp	r4, r5
 8007e26:	d101      	bne.n	8007e2c <__sfputs_r+0x12>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e007      	b.n	8007e3c <__sfputs_r+0x22>
 8007e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e30:	463a      	mov	r2, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff ffda 	bl	8007dec <__sfputc_r>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d1f3      	bne.n	8007e24 <__sfputs_r+0xa>
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e40 <_vfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	460d      	mov	r5, r1
 8007e46:	b09d      	sub	sp, #116	; 0x74
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4698      	mov	r8, r3
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	b118      	cbz	r0, 8007e58 <_vfiprintf_r+0x18>
 8007e50:	6a03      	ldr	r3, [r0, #32]
 8007e52:	b90b      	cbnz	r3, 8007e58 <_vfiprintf_r+0x18>
 8007e54:	f7fe fad6 	bl	8006404 <__sinit>
 8007e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e5a:	07d9      	lsls	r1, r3, #31
 8007e5c:	d405      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e5e:	89ab      	ldrh	r3, [r5, #12]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e66:	f7fe fcc6 	bl	80067f6 <__retarget_lock_acquire_recursive>
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	071b      	lsls	r3, r3, #28
 8007e6e:	d501      	bpl.n	8007e74 <_vfiprintf_r+0x34>
 8007e70:	692b      	ldr	r3, [r5, #16]
 8007e72:	b99b      	cbnz	r3, 8007e9c <_vfiprintf_r+0x5c>
 8007e74:	4629      	mov	r1, r5
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7fe fbe8 	bl	800664c <__swsetup_r>
 8007e7c:	b170      	cbz	r0, 8007e9c <_vfiprintf_r+0x5c>
 8007e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e80:	07dc      	lsls	r4, r3, #31
 8007e82:	d504      	bpl.n	8007e8e <_vfiprintf_r+0x4e>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	b01d      	add	sp, #116	; 0x74
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d4f7      	bmi.n	8007e84 <_vfiprintf_r+0x44>
 8007e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e96:	f7fe fcaf 	bl	80067f8 <__retarget_lock_release_recursive>
 8007e9a:	e7f3      	b.n	8007e84 <_vfiprintf_r+0x44>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eaa:	2330      	movs	r3, #48	; 0x30
 8007eac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008060 <_vfiprintf_r+0x220>
 8007eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb4:	f04f 0901 	mov.w	r9, #1
 8007eb8:	4623      	mov	r3, r4
 8007eba:	469a      	mov	sl, r3
 8007ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_vfiprintf_r+0x86>
 8007ec2:	2a25      	cmp	r2, #37	; 0x25
 8007ec4:	d1f9      	bne.n	8007eba <_vfiprintf_r+0x7a>
 8007ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eca:	d00b      	beq.n	8007ee4 <_vfiprintf_r+0xa4>
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ffa1 	bl	8007e1a <__sfputs_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f000 80a9 	beq.w	8008030 <_vfiprintf_r+0x1f0>
 8007ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee0:	445a      	add	r2, fp
 8007ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80a1 	beq.w	8008030 <_vfiprintf_r+0x1f0>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f04:	931a      	str	r3, [sp, #104]	; 0x68
 8007f06:	4654      	mov	r4, sl
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4854      	ldr	r0, [pc, #336]	; (8008060 <_vfiprintf_r+0x220>)
 8007f10:	f7f8 f97e 	bl	8000210 <memchr>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	b9d8      	cbnz	r0, 8007f50 <_vfiprintf_r+0x110>
 8007f18:	06d1      	lsls	r1, r2, #27
 8007f1a:	bf44      	itt	mi
 8007f1c:	2320      	movmi	r3, #32
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f22:	0713      	lsls	r3, r2, #28
 8007f24:	bf44      	itt	mi
 8007f26:	232b      	movmi	r3, #43	; 0x2b
 8007f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b2a      	cmp	r3, #42	; 0x2a
 8007f32:	d015      	beq.n	8007f60 <_vfiprintf_r+0x120>
 8007f34:	9a07      	ldr	r2, [sp, #28]
 8007f36:	4654      	mov	r4, sl
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f44:	3b30      	subs	r3, #48	; 0x30
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d94d      	bls.n	8007fe6 <_vfiprintf_r+0x1a6>
 8007f4a:	b1b0      	cbz	r0, 8007f7a <_vfiprintf_r+0x13a>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e014      	b.n	8007f7a <_vfiprintf_r+0x13a>
 8007f50:	eba0 0308 	sub.w	r3, r0, r8
 8007f54:	fa09 f303 	lsl.w	r3, r9, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	46a2      	mov	sl, r4
 8007f5e:	e7d2      	b.n	8007f06 <_vfiprintf_r+0xc6>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9103      	str	r1, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbb      	ittet	lt
 8007f6c:	425b      	neglt	r3, r3
 8007f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f72:	9307      	strge	r3, [sp, #28]
 8007f74:	9307      	strlt	r3, [sp, #28]
 8007f76:	bfb8      	it	lt
 8007f78:	9204      	strlt	r2, [sp, #16]
 8007f7a:	7823      	ldrb	r3, [r4, #0]
 8007f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f7e:	d10c      	bne.n	8007f9a <_vfiprintf_r+0x15a>
 8007f80:	7863      	ldrb	r3, [r4, #1]
 8007f82:	2b2a      	cmp	r3, #42	; 0x2a
 8007f84:	d134      	bne.n	8007ff0 <_vfiprintf_r+0x1b0>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9203      	str	r2, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfb8      	it	lt
 8007f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f96:	3402      	adds	r4, #2
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008070 <_vfiprintf_r+0x230>
 8007f9e:	7821      	ldrb	r1, [r4, #0]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	f7f8 f934 	bl	8000210 <memchr>
 8007fa8:	b138      	cbz	r0, 8007fba <_vfiprintf_r+0x17a>
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	eba0 000a 	sub.w	r0, r0, sl
 8007fb0:	2240      	movs	r2, #64	; 0x40
 8007fb2:	4082      	lsls	r2, r0
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	3401      	adds	r4, #1
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	4829      	ldr	r0, [pc, #164]	; (8008064 <_vfiprintf_r+0x224>)
 8007fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc4:	2206      	movs	r2, #6
 8007fc6:	f7f8 f923 	bl	8000210 <memchr>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d03f      	beq.n	800804e <_vfiprintf_r+0x20e>
 8007fce:	4b26      	ldr	r3, [pc, #152]	; (8008068 <_vfiprintf_r+0x228>)
 8007fd0:	bb1b      	cbnz	r3, 800801a <_vfiprintf_r+0x1da>
 8007fd2:	9b03      	ldr	r3, [sp, #12]
 8007fd4:	3307      	adds	r3, #7
 8007fd6:	f023 0307 	bic.w	r3, r3, #7
 8007fda:	3308      	adds	r3, #8
 8007fdc:	9303      	str	r3, [sp, #12]
 8007fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe0:	443b      	add	r3, r7
 8007fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe4:	e768      	b.n	8007eb8 <_vfiprintf_r+0x78>
 8007fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fea:	460c      	mov	r4, r1
 8007fec:	2001      	movs	r0, #1
 8007fee:	e7a6      	b.n	8007f3e <_vfiprintf_r+0xfe>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	3401      	adds	r4, #1
 8007ff4:	9305      	str	r3, [sp, #20]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	f04f 0c0a 	mov.w	ip, #10
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008002:	3a30      	subs	r2, #48	; 0x30
 8008004:	2a09      	cmp	r2, #9
 8008006:	d903      	bls.n	8008010 <_vfiprintf_r+0x1d0>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0c6      	beq.n	8007f9a <_vfiprintf_r+0x15a>
 800800c:	9105      	str	r1, [sp, #20]
 800800e:	e7c4      	b.n	8007f9a <_vfiprintf_r+0x15a>
 8008010:	fb0c 2101 	mla	r1, ip, r1, r2
 8008014:	4604      	mov	r4, r0
 8008016:	2301      	movs	r3, #1
 8008018:	e7f0      	b.n	8007ffc <_vfiprintf_r+0x1bc>
 800801a:	ab03      	add	r3, sp, #12
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	462a      	mov	r2, r5
 8008020:	4b12      	ldr	r3, [pc, #72]	; (800806c <_vfiprintf_r+0x22c>)
 8008022:	a904      	add	r1, sp, #16
 8008024:	4630      	mov	r0, r6
 8008026:	f7fd fd9b 	bl	8005b60 <_printf_float>
 800802a:	4607      	mov	r7, r0
 800802c:	1c78      	adds	r0, r7, #1
 800802e:	d1d6      	bne.n	8007fde <_vfiprintf_r+0x19e>
 8008030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008032:	07d9      	lsls	r1, r3, #31
 8008034:	d405      	bmi.n	8008042 <_vfiprintf_r+0x202>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	059a      	lsls	r2, r3, #22
 800803a:	d402      	bmi.n	8008042 <_vfiprintf_r+0x202>
 800803c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803e:	f7fe fbdb 	bl	80067f8 <__retarget_lock_release_recursive>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	065b      	lsls	r3, r3, #25
 8008046:	f53f af1d 	bmi.w	8007e84 <_vfiprintf_r+0x44>
 800804a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804c:	e71c      	b.n	8007e88 <_vfiprintf_r+0x48>
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	462a      	mov	r2, r5
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <_vfiprintf_r+0x22c>)
 8008056:	a904      	add	r1, sp, #16
 8008058:	4630      	mov	r0, r6
 800805a:	f7fe f825 	bl	80060a8 <_printf_i>
 800805e:	e7e4      	b.n	800802a <_vfiprintf_r+0x1ea>
 8008060:	080089cc 	.word	0x080089cc
 8008064:	080089d6 	.word	0x080089d6
 8008068:	08005b61 	.word	0x08005b61
 800806c:	08007e1b 	.word	0x08007e1b
 8008070:	080089d2 	.word	0x080089d2

08008074 <__sflush_r>:
 8008074:	898a      	ldrh	r2, [r1, #12]
 8008076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807a:	4605      	mov	r5, r0
 800807c:	0710      	lsls	r0, r2, #28
 800807e:	460c      	mov	r4, r1
 8008080:	d458      	bmi.n	8008134 <__sflush_r+0xc0>
 8008082:	684b      	ldr	r3, [r1, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	dc05      	bgt.n	8008094 <__sflush_r+0x20>
 8008088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	dc02      	bgt.n	8008094 <__sflush_r+0x20>
 800808e:	2000      	movs	r0, #0
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008096:	2e00      	cmp	r6, #0
 8008098:	d0f9      	beq.n	800808e <__sflush_r+0x1a>
 800809a:	2300      	movs	r3, #0
 800809c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080a0:	682f      	ldr	r7, [r5, #0]
 80080a2:	6a21      	ldr	r1, [r4, #32]
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	d032      	beq.n	800810e <__sflush_r+0x9a>
 80080a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	075a      	lsls	r2, r3, #29
 80080ae:	d505      	bpl.n	80080bc <__sflush_r+0x48>
 80080b0:	6863      	ldr	r3, [r4, #4]
 80080b2:	1ac0      	subs	r0, r0, r3
 80080b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080b6:	b10b      	cbz	r3, 80080bc <__sflush_r+0x48>
 80080b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080ba:	1ac0      	subs	r0, r0, r3
 80080bc:	2300      	movs	r3, #0
 80080be:	4602      	mov	r2, r0
 80080c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c2:	6a21      	ldr	r1, [r4, #32]
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b0      	blx	r6
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	d106      	bne.n	80080dc <__sflush_r+0x68>
 80080ce:	6829      	ldr	r1, [r5, #0]
 80080d0:	291d      	cmp	r1, #29
 80080d2:	d82b      	bhi.n	800812c <__sflush_r+0xb8>
 80080d4:	4a29      	ldr	r2, [pc, #164]	; (800817c <__sflush_r+0x108>)
 80080d6:	410a      	asrs	r2, r1
 80080d8:	07d6      	lsls	r6, r2, #31
 80080da:	d427      	bmi.n	800812c <__sflush_r+0xb8>
 80080dc:	2200      	movs	r2, #0
 80080de:	6062      	str	r2, [r4, #4]
 80080e0:	04d9      	lsls	r1, r3, #19
 80080e2:	6922      	ldr	r2, [r4, #16]
 80080e4:	6022      	str	r2, [r4, #0]
 80080e6:	d504      	bpl.n	80080f2 <__sflush_r+0x7e>
 80080e8:	1c42      	adds	r2, r0, #1
 80080ea:	d101      	bne.n	80080f0 <__sflush_r+0x7c>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b903      	cbnz	r3, 80080f2 <__sflush_r+0x7e>
 80080f0:	6560      	str	r0, [r4, #84]	; 0x54
 80080f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080f4:	602f      	str	r7, [r5, #0]
 80080f6:	2900      	cmp	r1, #0
 80080f8:	d0c9      	beq.n	800808e <__sflush_r+0x1a>
 80080fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080fe:	4299      	cmp	r1, r3
 8008100:	d002      	beq.n	8008108 <__sflush_r+0x94>
 8008102:	4628      	mov	r0, r5
 8008104:	f7ff f9f6 	bl	80074f4 <_free_r>
 8008108:	2000      	movs	r0, #0
 800810a:	6360      	str	r0, [r4, #52]	; 0x34
 800810c:	e7c0      	b.n	8008090 <__sflush_r+0x1c>
 800810e:	2301      	movs	r3, #1
 8008110:	4628      	mov	r0, r5
 8008112:	47b0      	blx	r6
 8008114:	1c41      	adds	r1, r0, #1
 8008116:	d1c8      	bne.n	80080aa <__sflush_r+0x36>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0c5      	beq.n	80080aa <__sflush_r+0x36>
 800811e:	2b1d      	cmp	r3, #29
 8008120:	d001      	beq.n	8008126 <__sflush_r+0xb2>
 8008122:	2b16      	cmp	r3, #22
 8008124:	d101      	bne.n	800812a <__sflush_r+0xb6>
 8008126:	602f      	str	r7, [r5, #0]
 8008128:	e7b1      	b.n	800808e <__sflush_r+0x1a>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	e7ad      	b.n	8008090 <__sflush_r+0x1c>
 8008134:	690f      	ldr	r7, [r1, #16]
 8008136:	2f00      	cmp	r7, #0
 8008138:	d0a9      	beq.n	800808e <__sflush_r+0x1a>
 800813a:	0793      	lsls	r3, r2, #30
 800813c:	680e      	ldr	r6, [r1, #0]
 800813e:	bf08      	it	eq
 8008140:	694b      	ldreq	r3, [r1, #20]
 8008142:	600f      	str	r7, [r1, #0]
 8008144:	bf18      	it	ne
 8008146:	2300      	movne	r3, #0
 8008148:	eba6 0807 	sub.w	r8, r6, r7
 800814c:	608b      	str	r3, [r1, #8]
 800814e:	f1b8 0f00 	cmp.w	r8, #0
 8008152:	dd9c      	ble.n	800808e <__sflush_r+0x1a>
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008158:	4643      	mov	r3, r8
 800815a:	463a      	mov	r2, r7
 800815c:	4628      	mov	r0, r5
 800815e:	47b0      	blx	r6
 8008160:	2800      	cmp	r0, #0
 8008162:	dc06      	bgt.n	8008172 <__sflush_r+0xfe>
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	e78e      	b.n	8008090 <__sflush_r+0x1c>
 8008172:	4407      	add	r7, r0
 8008174:	eba8 0800 	sub.w	r8, r8, r0
 8008178:	e7e9      	b.n	800814e <__sflush_r+0xda>
 800817a:	bf00      	nop
 800817c:	dfbffffe 	.word	0xdfbffffe

08008180 <_fflush_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	690b      	ldr	r3, [r1, #16]
 8008184:	4605      	mov	r5, r0
 8008186:	460c      	mov	r4, r1
 8008188:	b913      	cbnz	r3, 8008190 <_fflush_r+0x10>
 800818a:	2500      	movs	r5, #0
 800818c:	4628      	mov	r0, r5
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	b118      	cbz	r0, 800819a <_fflush_r+0x1a>
 8008192:	6a03      	ldr	r3, [r0, #32]
 8008194:	b90b      	cbnz	r3, 800819a <_fflush_r+0x1a>
 8008196:	f7fe f935 	bl	8006404 <__sinit>
 800819a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0f3      	beq.n	800818a <_fflush_r+0xa>
 80081a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081a4:	07d0      	lsls	r0, r2, #31
 80081a6:	d404      	bmi.n	80081b2 <_fflush_r+0x32>
 80081a8:	0599      	lsls	r1, r3, #22
 80081aa:	d402      	bmi.n	80081b2 <_fflush_r+0x32>
 80081ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ae:	f7fe fb22 	bl	80067f6 <__retarget_lock_acquire_recursive>
 80081b2:	4628      	mov	r0, r5
 80081b4:	4621      	mov	r1, r4
 80081b6:	f7ff ff5d 	bl	8008074 <__sflush_r>
 80081ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081bc:	07da      	lsls	r2, r3, #31
 80081be:	4605      	mov	r5, r0
 80081c0:	d4e4      	bmi.n	800818c <_fflush_r+0xc>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	059b      	lsls	r3, r3, #22
 80081c6:	d4e1      	bmi.n	800818c <_fflush_r+0xc>
 80081c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ca:	f7fe fb15 	bl	80067f8 <__retarget_lock_release_recursive>
 80081ce:	e7dd      	b.n	800818c <_fflush_r+0xc>

080081d0 <__swhatbuf_r>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	460c      	mov	r4, r1
 80081d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d8:	2900      	cmp	r1, #0
 80081da:	b096      	sub	sp, #88	; 0x58
 80081dc:	4615      	mov	r5, r2
 80081de:	461e      	mov	r6, r3
 80081e0:	da0d      	bge.n	80081fe <__swhatbuf_r+0x2e>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081e8:	f04f 0100 	mov.w	r1, #0
 80081ec:	bf0c      	ite	eq
 80081ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081f2:	2340      	movne	r3, #64	; 0x40
 80081f4:	2000      	movs	r0, #0
 80081f6:	6031      	str	r1, [r6, #0]
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	b016      	add	sp, #88	; 0x58
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	466a      	mov	r2, sp
 8008200:	f000 f848 	bl	8008294 <_fstat_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	dbec      	blt.n	80081e2 <__swhatbuf_r+0x12>
 8008208:	9901      	ldr	r1, [sp, #4]
 800820a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800820e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008212:	4259      	negs	r1, r3
 8008214:	4159      	adcs	r1, r3
 8008216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800821a:	e7eb      	b.n	80081f4 <__swhatbuf_r+0x24>

0800821c <__smakebuf_r>:
 800821c:	898b      	ldrh	r3, [r1, #12]
 800821e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008220:	079d      	lsls	r5, r3, #30
 8008222:	4606      	mov	r6, r0
 8008224:	460c      	mov	r4, r1
 8008226:	d507      	bpl.n	8008238 <__smakebuf_r+0x1c>
 8008228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	6123      	str	r3, [r4, #16]
 8008230:	2301      	movs	r3, #1
 8008232:	6163      	str	r3, [r4, #20]
 8008234:	b002      	add	sp, #8
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	ab01      	add	r3, sp, #4
 800823a:	466a      	mov	r2, sp
 800823c:	f7ff ffc8 	bl	80081d0 <__swhatbuf_r>
 8008240:	9900      	ldr	r1, [sp, #0]
 8008242:	4605      	mov	r5, r0
 8008244:	4630      	mov	r0, r6
 8008246:	f7ff f9c9 	bl	80075dc <_malloc_r>
 800824a:	b948      	cbnz	r0, 8008260 <__smakebuf_r+0x44>
 800824c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008250:	059a      	lsls	r2, r3, #22
 8008252:	d4ef      	bmi.n	8008234 <__smakebuf_r+0x18>
 8008254:	f023 0303 	bic.w	r3, r3, #3
 8008258:	f043 0302 	orr.w	r3, r3, #2
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	e7e3      	b.n	8008228 <__smakebuf_r+0xc>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	6020      	str	r0, [r4, #0]
 8008264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	9b00      	ldr	r3, [sp, #0]
 800826c:	6163      	str	r3, [r4, #20]
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	6120      	str	r0, [r4, #16]
 8008272:	b15b      	cbz	r3, 800828c <__smakebuf_r+0x70>
 8008274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008278:	4630      	mov	r0, r6
 800827a:	f000 f81d 	bl	80082b8 <_isatty_r>
 800827e:	b128      	cbz	r0, 800828c <__smakebuf_r+0x70>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	431d      	orrs	r5, r3
 8008290:	81a5      	strh	r5, [r4, #12]
 8008292:	e7cf      	b.n	8008234 <__smakebuf_r+0x18>

08008294 <_fstat_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d07      	ldr	r5, [pc, #28]	; (80082b4 <_fstat_r+0x20>)
 8008298:	2300      	movs	r3, #0
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	4611      	mov	r1, r2
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	f7fb fa7e 	bl	80037a2 <_fstat>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	d102      	bne.n	80082b0 <_fstat_r+0x1c>
 80082aa:	682b      	ldr	r3, [r5, #0]
 80082ac:	b103      	cbz	r3, 80082b0 <_fstat_r+0x1c>
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	bd38      	pop	{r3, r4, r5, pc}
 80082b2:	bf00      	nop
 80082b4:	20000420 	.word	0x20000420

080082b8 <_isatty_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4d06      	ldr	r5, [pc, #24]	; (80082d4 <_isatty_r+0x1c>)
 80082bc:	2300      	movs	r3, #0
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	f7fb fa7d 	bl	80037c2 <_isatty>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_isatty_r+0x1a>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_isatty_r+0x1a>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	20000420 	.word	0x20000420

080082d8 <_sbrk_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d06      	ldr	r5, [pc, #24]	; (80082f4 <_sbrk_r+0x1c>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7fb fa86 	bl	80037f4 <_sbrk>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_sbrk_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_sbrk_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	20000420 	.word	0x20000420

080082f8 <memcpy>:
 80082f8:	440a      	add	r2, r1
 80082fa:	4291      	cmp	r1, r2
 80082fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008300:	d100      	bne.n	8008304 <memcpy+0xc>
 8008302:	4770      	bx	lr
 8008304:	b510      	push	{r4, lr}
 8008306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800830e:	4291      	cmp	r1, r2
 8008310:	d1f9      	bne.n	8008306 <memcpy+0xe>
 8008312:	bd10      	pop	{r4, pc}

08008314 <__assert_func>:
 8008314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008316:	4614      	mov	r4, r2
 8008318:	461a      	mov	r2, r3
 800831a:	4b09      	ldr	r3, [pc, #36]	; (8008340 <__assert_func+0x2c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4605      	mov	r5, r0
 8008320:	68d8      	ldr	r0, [r3, #12]
 8008322:	b14c      	cbz	r4, 8008338 <__assert_func+0x24>
 8008324:	4b07      	ldr	r3, [pc, #28]	; (8008344 <__assert_func+0x30>)
 8008326:	9100      	str	r1, [sp, #0]
 8008328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800832c:	4906      	ldr	r1, [pc, #24]	; (8008348 <__assert_func+0x34>)
 800832e:	462b      	mov	r3, r5
 8008330:	f000 f844 	bl	80083bc <fiprintf>
 8008334:	f000 f854 	bl	80083e0 <abort>
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <__assert_func+0x38>)
 800833a:	461c      	mov	r4, r3
 800833c:	e7f3      	b.n	8008326 <__assert_func+0x12>
 800833e:	bf00      	nop
 8008340:	20000068 	.word	0x20000068
 8008344:	080089e7 	.word	0x080089e7
 8008348:	080089f4 	.word	0x080089f4
 800834c:	08008a22 	.word	0x08008a22

08008350 <_calloc_r>:
 8008350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008352:	fba1 2402 	umull	r2, r4, r1, r2
 8008356:	b94c      	cbnz	r4, 800836c <_calloc_r+0x1c>
 8008358:	4611      	mov	r1, r2
 800835a:	9201      	str	r2, [sp, #4]
 800835c:	f7ff f93e 	bl	80075dc <_malloc_r>
 8008360:	9a01      	ldr	r2, [sp, #4]
 8008362:	4605      	mov	r5, r0
 8008364:	b930      	cbnz	r0, 8008374 <_calloc_r+0x24>
 8008366:	4628      	mov	r0, r5
 8008368:	b003      	add	sp, #12
 800836a:	bd30      	pop	{r4, r5, pc}
 800836c:	220c      	movs	r2, #12
 800836e:	6002      	str	r2, [r0, #0]
 8008370:	2500      	movs	r5, #0
 8008372:	e7f8      	b.n	8008366 <_calloc_r+0x16>
 8008374:	4621      	mov	r1, r4
 8008376:	f7fe f9c1 	bl	80066fc <memset>
 800837a:	e7f4      	b.n	8008366 <_calloc_r+0x16>

0800837c <__ascii_mbtowc>:
 800837c:	b082      	sub	sp, #8
 800837e:	b901      	cbnz	r1, 8008382 <__ascii_mbtowc+0x6>
 8008380:	a901      	add	r1, sp, #4
 8008382:	b142      	cbz	r2, 8008396 <__ascii_mbtowc+0x1a>
 8008384:	b14b      	cbz	r3, 800839a <__ascii_mbtowc+0x1e>
 8008386:	7813      	ldrb	r3, [r2, #0]
 8008388:	600b      	str	r3, [r1, #0]
 800838a:	7812      	ldrb	r2, [r2, #0]
 800838c:	1e10      	subs	r0, r2, #0
 800838e:	bf18      	it	ne
 8008390:	2001      	movne	r0, #1
 8008392:	b002      	add	sp, #8
 8008394:	4770      	bx	lr
 8008396:	4610      	mov	r0, r2
 8008398:	e7fb      	b.n	8008392 <__ascii_mbtowc+0x16>
 800839a:	f06f 0001 	mvn.w	r0, #1
 800839e:	e7f8      	b.n	8008392 <__ascii_mbtowc+0x16>

080083a0 <__ascii_wctomb>:
 80083a0:	b149      	cbz	r1, 80083b6 <__ascii_wctomb+0x16>
 80083a2:	2aff      	cmp	r2, #255	; 0xff
 80083a4:	bf85      	ittet	hi
 80083a6:	238a      	movhi	r3, #138	; 0x8a
 80083a8:	6003      	strhi	r3, [r0, #0]
 80083aa:	700a      	strbls	r2, [r1, #0]
 80083ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80083b0:	bf98      	it	ls
 80083b2:	2001      	movls	r0, #1
 80083b4:	4770      	bx	lr
 80083b6:	4608      	mov	r0, r1
 80083b8:	4770      	bx	lr
	...

080083bc <fiprintf>:
 80083bc:	b40e      	push	{r1, r2, r3}
 80083be:	b503      	push	{r0, r1, lr}
 80083c0:	4601      	mov	r1, r0
 80083c2:	ab03      	add	r3, sp, #12
 80083c4:	4805      	ldr	r0, [pc, #20]	; (80083dc <fiprintf+0x20>)
 80083c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	f7ff fd37 	bl	8007e40 <_vfiprintf_r>
 80083d2:	b002      	add	sp, #8
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b003      	add	sp, #12
 80083da:	4770      	bx	lr
 80083dc:	20000068 	.word	0x20000068

080083e0 <abort>:
 80083e0:	b508      	push	{r3, lr}
 80083e2:	2006      	movs	r0, #6
 80083e4:	f000 f82c 	bl	8008440 <raise>
 80083e8:	2001      	movs	r0, #1
 80083ea:	f7fb f98b 	bl	8003704 <_exit>

080083ee <_raise_r>:
 80083ee:	291f      	cmp	r1, #31
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4604      	mov	r4, r0
 80083f4:	460d      	mov	r5, r1
 80083f6:	d904      	bls.n	8008402 <_raise_r+0x14>
 80083f8:	2316      	movs	r3, #22
 80083fa:	6003      	str	r3, [r0, #0]
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	bd38      	pop	{r3, r4, r5, pc}
 8008402:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008404:	b112      	cbz	r2, 800840c <_raise_r+0x1e>
 8008406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800840a:	b94b      	cbnz	r3, 8008420 <_raise_r+0x32>
 800840c:	4620      	mov	r0, r4
 800840e:	f000 f831 	bl	8008474 <_getpid_r>
 8008412:	462a      	mov	r2, r5
 8008414:	4601      	mov	r1, r0
 8008416:	4620      	mov	r0, r4
 8008418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800841c:	f000 b818 	b.w	8008450 <_kill_r>
 8008420:	2b01      	cmp	r3, #1
 8008422:	d00a      	beq.n	800843a <_raise_r+0x4c>
 8008424:	1c59      	adds	r1, r3, #1
 8008426:	d103      	bne.n	8008430 <_raise_r+0x42>
 8008428:	2316      	movs	r3, #22
 800842a:	6003      	str	r3, [r0, #0]
 800842c:	2001      	movs	r0, #1
 800842e:	e7e7      	b.n	8008400 <_raise_r+0x12>
 8008430:	2400      	movs	r4, #0
 8008432:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008436:	4628      	mov	r0, r5
 8008438:	4798      	blx	r3
 800843a:	2000      	movs	r0, #0
 800843c:	e7e0      	b.n	8008400 <_raise_r+0x12>
	...

08008440 <raise>:
 8008440:	4b02      	ldr	r3, [pc, #8]	; (800844c <raise+0xc>)
 8008442:	4601      	mov	r1, r0
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	f7ff bfd2 	b.w	80083ee <_raise_r>
 800844a:	bf00      	nop
 800844c:	20000068 	.word	0x20000068

08008450 <_kill_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	; (8008470 <_kill_r+0x20>)
 8008454:	2300      	movs	r3, #0
 8008456:	4604      	mov	r4, r0
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	f7fb f941 	bl	80036e4 <_kill>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	d102      	bne.n	800846c <_kill_r+0x1c>
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	b103      	cbz	r3, 800846c <_kill_r+0x1c>
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	bd38      	pop	{r3, r4, r5, pc}
 800846e:	bf00      	nop
 8008470:	20000420 	.word	0x20000420

08008474 <_getpid_r>:
 8008474:	f7fb b92e 	b.w	80036d4 <_getpid>

08008478 <_init>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr

08008484 <_fini>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr
